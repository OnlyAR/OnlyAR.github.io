<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>博客施工记录</title>
    <link href="/2022/07/23/%E5%8D%9A%E5%AE%A2%E6%96%BD%E5%B7%A5%E8%AE%B0%E5%BD%95/"/>
    <url>/2022/07/23/%E5%8D%9A%E5%AE%A2%E6%96%BD%E5%B7%A5%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h2 id="1-梦的开始"><a class="markdownIt-Anchor" href="#1-梦的开始"></a> 1. 梦的开始</h2><blockquote><p>2022-07-23 记</p></blockquote><p>距离 2021 惊心动魄的烤漆已经过去 20 天，我的纯纯摆烂生活也已经过去了 20 天。这些天里我白天肝游戏，晚上出去吃饭，终于在这负罪感中感受到了空虚。我 9 月份的国赛还没有一点准备，8 月 1 号的小学期也毫无头绪，甚至，在这 20 天里我没有动过一行代码。我意识到，这样的生活要结束了，要结束了吗……？</p><p>在搭建起这篇博客前我也做过一些尝试，本来我们上个学期的软工课程有一个用 hugo 搭建博客的作业，当时我也遇到了许许多多的阻碍，终于用了将近 10 个小时把那篇博客部署成功，后来尝试着做一些美化，但是同样也遇到了许多阻碍，终于停止尝试。</p><p>今天我终于决定重新搭建起属于我自己的博客，于是在 github 上删除了原来的仓库，使用 hexo 框架重新开始搭建一个博客网站，我在 b 站里找了一个视频<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="[手把手教你从0开始搭建自己的个人博客 |无坑版视频教程| hexo_哔哩哔哩_bilibili](https://www.bilibili.com/video/BV1Yb411a7ty?spm_id_from=333.337.search-card.all.click&vd_source=4057053e17ee49a946206af982f14d5a)">[1]</span></a></sup>边学边做，谨以此篇作为我博客的搭建记录。</p><p>本篇博客使用的主题是 Fluid<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="[fluid-dev/hexo-theme-fluid: 一款 Material Design 风格的 Hexo 主题 / An elegant Material-Design theme for Hexo (github.com)](https://github.com/fluid-dev/hexo-theme-fluid)">[2]</span></a></sup>，并进行了一些自己的个性化定制。</p><p>具体过程视频里已经很详细了，在此我就不多赘述了。</p><h2 id="2-继续整活"><a class="markdownIt-Anchor" href="#2-继续整活"></a> 2. 继续整活</h2><blockquote><p>2022-07-24 记</p></blockquote><h3 id="21-加入-miku-看板娘"><a class="markdownIt-Anchor" href="#21-加入-miku-看板娘"></a> 2.1 加入 miku 看板娘</h3><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://www.bilibili.com/video/BV1Yb411a7ty?spm_id_from=333.337.search-card.all.click&amp;vd_source=4057053e17ee49a946206af982f14d5a">手把手教你从0开始搭建自己的个人博客 |无坑版视频教程| hexo_哔哩哔哩_bilibili</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://github.com/fluid-dev/hexo-theme-fluid">fluid-dev/hexo-theme-fluid: 一款 Material Design 风格的 Hexo 主题 / An elegant Material-Design theme for Hexo (github.com)</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>博客搭建</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
      <tag>Github</tag>
      
      <tag>博客</tag>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java集合框架</title>
    <link href="/2022/05/19/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/"/>
    <url>/2022/05/19/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="java集合学习"><a class="markdownIt-Anchor" href="#java集合学习"></a> Java集合学习</h1><h2 id="0-引言"><a class="markdownIt-Anchor" href="#0-引言"></a> 0 引言</h2><p>大家都学过数据结构这门课，应该对数据的基本存储和组织方式有一定的概念了吧。我们可以把大量的数据的存储到“容器”里，这里的“容器”就是一种被封装起来的数据结构，为我们提供了很多便捷好用的接口，而将内部的实现细节给隐藏起来了。</p><blockquote><p>打个比方，我们使用电饭煲做饭，可以把电饭煲看作是容器，只需要知道怎么打开电饭煲把米放进去，按哪个按钮开始做饭，怎么把盖子打开把饭盛出来，这些就是电饭煲为我们提供的接口。而我们不需要了解电饭煲内部的电路结构，使用什么电子元件，盖子的机械传动结构是什么样的，这些是被隐藏起来的实现细节。</p></blockquote><p>当我们用 C 语言写链表时，会先定义一个长这样的结构体：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> &#123;</span><br>    ElementType val;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> * <span class="hljs-title">next</span>;</span><br>&#125; *List;<br></code></pre></td></tr></table></figure><p>然后在程序里各种<code>malloc</code>函数、<code>next</code>指针满天飞~~，跑起来就空指针野指针程序崩溃是吧~~。</p><p>当然我们也可以将写的链表操作封成函数，类似这样：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">insertList</span><span class="hljs-params">(List L, <span class="hljs-type">int</span> idx, ElementType e)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">removeNode</span><span class="hljs-params">(List L)</span>;<br>List <span class="hljs-title function_">find</span><span class="hljs-params">(List L, ElementType e)</span>;<br></code></pre></td></tr></table></figure><p>这些是我们自己写的链表函数，用函数来实现链表的功能，一是方便 debug，二是可以让程序更有条理。C 毕竟还只是<strong>面向过程</strong>的编程语言，而封装到极致就进化成了<strong>面向对象</strong>。</p><p>再比如，做编程题的时候，要写一个栈，于是你上来就开一个大小 100005 的数组，再设一个全局变量 top。真要写大工程的时候是万万不能这样搞的，尤其不能动不动就设全局变量。</p><p>在 C++ 中就友好多了，C++ 提供了很多拿来就用的容器，比如可变数组 <code>vector</code>、栈 <code>stack</code>、字典 <code>Map</code>等等。而到了 Java 这边，容器更要复杂而精致得多。</p><h2 id="1-集合框架概述"><a class="markdownIt-Anchor" href="#1-集合框架概述"></a> 1 集合框架概述</h2><p>集合框架的四部分：</p><ul><li>数据结构</li><li>比较器</li><li>算法：Collections 和 Arrays；</li><li>迭代器</li></ul><p>集合类的特点：</p><ul><li>只容纳对象，基本数据类型要封装成类的对象；</li></ul><hr /><p>Java 中的集合框架为我们提供了各种各样的容器类，每一种容器都有各自的性质，当然底层的实现方式也不尽相同，因此其使用方式、操作效率和安全性也不一样。</p><p>同时 Java 中的容器还具有能动态增长、高性能、提供丰富的方法等特点，很方便用户使用。</p><p><strong>继承</strong>是面向对象语言的一大特点，而不同的容器也是有继承关系的，就好像生物学中的分类一样。Java 的所有容器都发源于 Iterable 接口，从 Iterable 接口又分出两大派系（接口），一是每个单元格存储数据本身的 Collection 接口，二是单元格需要存储键值对（<code>&lt;key, value&gt;</code>）的 Map 接口。其它的容器类或接口都是继承或实现了这两个接口。下面用一张图来说明一下 Java 容器的家族关系：</p><p><img src="/img/Java%E9%9B%86%E5%90%88%E5%AD%A6%E4%B9%A0.assets/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E5%85%B3%E7%B3%BB.png" alt="Java集合框架关系" /></p><blockquote><p>？？？怎么这么多啊</p></blockquote><p>其实很多细节我们也用不上在这篇文章也不会详细介绍，用到了就查官方文档吧。下面就一些重要的部分简单说一下：</p><ul><li>Collection 接口：<ul><li>List 接口：数据被组织为线性结构，每一个元素在容器中有固定的位置，可以通过索引访问；</li><li>Queue 接口：队列，可以往里放元素，但是只有一个出口<ul><li>PriorityQueue：优先队列，每次只能弹出或访问权值最大（或小）的元素；</li><li>Deque：双端队列，两头都可以进出元素。</li></ul></li><li>Set 接口：每个元素无固定位置，元素不能重复，因此元素必须实现 <code>equals()</code> 方法<ul><li>SortedSet：可以有序遍历的集合；</li></ul></li></ul></li><li>Map：<ul><li>HashMap：哈希实现的 <code>&lt;key, value&gt;</code> 集合，高效插入查找；</li><li>SortedMap：同样是 <code>&lt;key, value&gt;</code> 集合，但是内部存储从某种程度来说是有序的，方便遍历。</li></ul></li></ul><p>这些多种多样的容器跟<strong>比较器（Comparable、Comparator）</strong>、<strong>算法（Collactions、Arrays）</strong>、**迭代器（Iterator）**共同组成了 Java 的集合框架。</p><p>下面的内容便是对这部分的较为详细的介绍。</p><h2 id="2-容器"><a class="markdownIt-Anchor" href="#2-容器"></a> 2 容器</h2><h3 id="21-泛型"><a class="markdownIt-Anchor" href="#21-泛型"></a> 2.1 泛型</h3><p>Java 5 之前的容器都是放的 <code>Object</code> 类的对象作为元素，一旦被放进去就会被自动转型。虽然什么都能往里面放，但是拿出来的话那个对象也不是原来的对象了，就需要强制转回原来的类才能用。但是这样操作不仅麻烦，而且很容易在运行时由于转换错误抛出运行时异常。所以 Java 5 及之后的版本使用泛型来解决这个问题。</p><p>在声明一个容器的时候必须指定容器内元素的类型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">ArrayList&lt;Integer&gt; arrayList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><span class="hljs-comment">// 声明一个存放整数的可变数组</span><br><br>HashMap&lt;String, Object&gt; hashMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><span class="hljs-comment">// 声明一个以 String 为键, Object 为值的哈希表</span><br></code></pre></td></tr></table></figure><p>注意：</p><ul><li>泛型中不能使用基本类型，但可以用其对应的类，比如 <code>Integer</code> 存整数，<code>Boolean</code> 存布尔变量；</li><li>声明好的容器可以存放声明类型的子类，比如声明成 <code>Object</code> 类就可以放任何类。</li><li>泛型中也可以使用接口，里面的可以存放实现该接口的子类。</li></ul><h3 id="22-collection-接口"><a class="markdownIt-Anchor" href="#22-collection-接口"></a> 2.2 Collection 接口</h3><p>直接说一下这个接口里的常用方法吧：</p><ul><li><code>int size()</code>：返回元素个数；</li><li><code>boolean isEmpty()</code>：返回是否空；</li><li><code>boolean add(E e)</code>：加入一个元素，返回是否成功；</li><li><code>boolean remove(Object o)</code>：删除一个元素，返回是否成功；</li><li><code>boolean contains(Object o)</code>：返回是否含有某个元素，调用 <code>equals()</code> 方法作比较；</li><li><code>boolean addAll(Collection&lt;? extends E&gt; c)</code>：加入 <code>c</code> 中的所有元素，返回是否成功；</li><li><code>boolean removeAll(Collection&lt;?&gt; c)</code>：删除 <code>c</code> 中的所有元素，返回是否有元素被删除；</li><li><code>boolean containsAll(Collection&lt;?&gt; c)</code>：检查是否含有 <code>c</code> 中的所有元素；</li><li><code>Iterator&lt;E&gt; iterator()</code>：返回一个迭代器；</li><li><code>Object[] toArray()</code>：返回一个数组，存放里面的元素；</li><li><code>&lt;T&gt; T[] toArray(T[] a)</code>：<ul><li>首先将集合中的元素造型为 <code>T</code>；</li><li>若 <code>a</code> 的大小足以容纳集合中的元素，则将 <code>a</code> 中填为集合中的元素，同时返回 <code>a</code> 本身；</li><li>否则另开一个数组填为集合中的所有元素并返回。</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">Collection&lt;Object&gt; collection = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Collection</span>&lt;&gt;();<br>String[] strings = collection.toArray(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[<span class="hljs-number">5</span>]);<br></code></pre></td></tr></table></figure><ul><li><code>default boolean removeIf(Predicate&lt;? super E&gt; filter)</code>：传进一个谓词 filter，符合该条件的元素被删除，返回是否有元素被删除；</li><li><code>boolean retainAll(Collection&lt;?&gt; c)</code>：仅保留 <code>c</code> 中含有的元素，返回是否有元素被删除；</li><li><code>void clear()</code>：清除集合。</li></ul><h4 id="211-list"><a class="markdownIt-Anchor" href="#211-list"></a> 2.1.1 List</h4><ul><li><code>default void replaceAll(UnaryOperator&lt;E&gt; operator)</code>：传一个操作类的对象 <code>UnaryOperator</code>，对每一个元素施以这个操作。</li><li><code>default void sort(Comparator&lt;? super E&gt; c)</code>：传一个比较器，进行排序；</li><li><code>E get(int index)</code>：取得指定位置的元素；</li><li><code>E set(int index, E element)</code>：将指定位置位置的元素替换为 element；</li><li><code>void add(int index, E element)</code>：向指定位置插入一个元素；</li><li><code>E remove(int index)</code>：删除指定位置的元素；</li><li><code>int indexOf(Object o)</code>：查找第一次出现的位置；</li><li><code>int lastIndexOf(Object o)</code>：查找最后一次出现的位置；</li><li><code>ListIterator&lt;E&gt; listIterator()</code>：返回一个迭代器；</li><li><code>ListIterator&lt;E&gt; listIterator(int index)</code>：返回值定位置的迭代器。</li></ul><h5 id="2111-arraylist"><a class="markdownIt-Anchor" href="#2111-arraylist"></a> 2.1.1.1 ArrayList</h5><p>动态数组，顺序存储，每次扩张容量增大 50%。</p><ul><li><code>public ArrayList(int initialCapacity)</code>：构造函数，初始化大小；</li><li><code>public ArrayList()</code>：构造函数，默认大小为 10；</li><li><code>public ArrayList(Collection&lt;? extends E&gt; c)</code>：从 <code>c</code> 中初始化；</li><li><code>public void trimToSize()</code>：将容器占用空间收缩至长度；</li><li><code>public void ensureCapacity(int minCapacity)</code>：扩大大小至 <code>minCapacity</code>。</li><li><code>public List&lt;E&gt; subList(int fromIndex, int toIndex)</code>：返回子列。</li></ul><h5 id="2112-linkedlist"><a class="markdownIt-Anchor" href="#2112-linkedlist"></a> 2.1.1.2 LinkedList</h5><p>链式存储，也可以快速删除首尾元素。</p><ul><li><code>public LinkedList()</code>：构造空链表；</li><li><code>public LinkedList(Collection&lt;? extends E&gt; c)</code>：从 <code>c</code> 中初始化；</li><li><code>public E getFirst()</code>：获取头部；</li><li><code>public E getLast()</code>：获取尾部；</li><li><code>public E removeFirst()</code>：删除头部；</li><li><code>public E removeLast()</code>：删除尾部；</li><li><code>public void addFirst(E e)</code>：从头部添加；</li><li><code>public void addLast(E e)</code>：从尾部添加。</li></ul><h5 id="2113-vector"><a class="markdownIt-Anchor" href="#2113-vector"></a> 2.1.1.3 Vector</h5><p>ArrayList 的线程安全版，但是效率不如 ArrayList。</p><h4 id="212-set"><a class="markdownIt-Anchor" href="#212-set"></a> 2.1.2 Set</h4><p>元素必须唯一，所以里面的元素必须定义 equals() 方法。不允许添加重复的元素。</p><p>方法与 Collection 相同，只是当插入失败（试图插入重复元素）时 <code>add()</code> 方法会返回 <code>false</code>。</p><h5 id="2121-hashset"><a class="markdownIt-Anchor" href="#2121-hashset"></a> 2.1.2.1 HashSet</h5><p>初始化时可以规定大小，也可以从某集合初始化，是无序的。</p><h5 id="2122-treeset"><a class="markdownIt-Anchor" href="#2122-treeset"></a> 2.1.2.2 TreeSet</h5><p>初始化时可以规定大小，也可以从某集合初始化，是有序的。</p><ul><li><code>public Iterator&lt;E&gt; descendingIterator()</code>：返回一个降序的迭代器；</li><li><code>public NavigableSet&lt;E&gt; descendingSet()</code>：返回降序的集合；</li><li><code>public NavigableSet&lt;E&gt; subSet(E fromElement, boolean fromInclusive, E toElement, boolean toInclusive)</code>：返回从 <code>fromElement</code> 到 <code>toElement</code> 子集合；</li><li><code>public NavigableSet&lt;E&gt; headSet(E toElement, boolean inclusive)</code>：返回从头到 <code>toElement</code> 的自集合；</li><li><code>public NavigableSet&lt;E&gt; tailSet(E fromElement, boolean inclusive)</code>：返回从 <code>fromElement</code> 到尾的子集合；</li><li><code>public Comparator&lt;? super E&gt; comparator()</code>：返回比较器；</li><li><code>public E first()</code>：返回首个元素；</li><li><code>public E last()</code>：返回最后一个元素；</li><li><code>public E lower(E e)</code></li><li><code>public E floor(E e)</code></li><li><code>public E ceiling(E e)</code></li><li><code>public E higher(E e)</code></li><li><code>public E pollFirst()</code></li><li><code>public E pollLast()</code></li></ul><h4 id="213-queue"><a class="markdownIt-Anchor" href="#213-queue"></a> 2.1.3 Queue</h4><ul><li><code>boolean add(E e)</code>：加入一个元素，容量满会异常；</li><li><code>boolean offer(E e)</code>：功能同 <code>add()</code>，插入失败会返回 <code>false</code> 而不会异常；</li><li><code>E remove()</code>：返回并删除队头，队列为空则异常；</li><li><code>E poll()</code>：返回并删除队头，队列为空返回 <code>null</code>，不会异常；</li><li><code>E element()</code>：取队首元素，队列为空则异常；</li><li><code>E peek()</code>：取队首元素，队列为空则返回 <code>null</code> 不会异常。</li></ul><h3 id="23-map-接口"><a class="markdownIt-Anchor" href="#23-map-接口"></a> 2.3 Map 接口</h3><p>其含有的方法如下：</p><ul><li><code>int size()</code></li><li><code>boolean isEmpty()</code></li><li><code>boolean containsKey(Object key)</code></li><li><code>boolean containsValue(Object value)</code></li><li><code>V get(Object key)</code></li><li><code>V put(K key, V value)</code></li><li><code>V remove(Object key)</code></li><li><code>void putAll(Map&lt;? extends K, ? extends V&gt; m)</code></li><li><code>void clear()</code></li><li><code>Set&lt;K&gt; keySet()</code></li><li><code>Collection&lt;V&gt; values()</code></li><li><code>Set&lt;Map.Entry&lt;K, V&gt;&gt; entrySet()</code>：返回一个集合。</li></ul><h4 id="231-hashmap"><a class="markdownIt-Anchor" href="#231-hashmap"></a> 2.3.1 HashMap</h4><p>方法基本同上。可以从一个 Map 初始化。</p><h4 id="232-treemap"><a class="markdownIt-Anchor" href="#232-treemap"></a> 2.3.2 TreeMap</h4><p>使用红黑树存储便于遍历。</p><h2 id="3-比较器"><a class="markdownIt-Anchor" href="#3-比较器"></a> 3 比较器</h2><p>Java 中要实现自动排序需要定义比较器，对于 String 和包装类有自动的比较器，但是对于其他类就需要使用我们自己定义的比较器了。要实现比较功能，可以实现 Comparable 接口或定义 Comparator 类。</p><h3 id="31-comparable-接口"><a class="markdownIt-Anchor" href="#31-comparable-接口"></a> 3.1 Comparable 接口</h3><p>自定义类可以实现 <code>Comparable&lt;E&gt;</code> 接口，其中 <code>E</code> 为自定义类，同时类中必须实现 <code>compareTo</code> 方法，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cell</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Comparable</span>&lt;Cell&gt;&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> id;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Item</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>    &#125;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compareTo</span><span class="hljs-params">(Item o)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.id - o.id;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="32-comparator-类"><a class="markdownIt-Anchor" href="#32-comparator-类"></a> 3.2 Comparator 类</h3><p>在使用一些容器的 <code>sort()</code> 方法之前，需要定义一个 <code>Comparator</code> 类作为参数传入，定义可以是这样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">Comparator&lt;Cell&gt; comparator = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>&lt;Cell&gt;() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Cell o1, Cell o2)</span> &#123;<br>        ...;<br>        <span class="hljs-keyword">return</span> o1.compareTo(o2);<br>    &#125;<br>&#125;;<br>arrayList.sort(comparator);<br></code></pre></td></tr></table></figure><p>当然可以用 lambda 表达式化简：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">Comparator&lt;Cell&gt; comparator = (o1, o2) -&gt;&#123;<br>    ...;<br>    o1.compareTo(o2)<br>&#125;;<br></code></pre></td></tr></table></figure><p>当只是调用到 <code>Cell</code> 的一个函数时，可以用方法的引用进一步化简：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Comparator&lt;Cell&gt; comparator = Cell::compareTo;<br></code></pre></td></tr></table></figure><p>以至于你在使用容器的排序方法时可以：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">arrayList.sort(Cell::compareTo);<br></code></pre></td></tr></table></figure><h2 id="4-迭代器-iterator"><a class="markdownIt-Anchor" href="#4-迭代器-iterator"></a> 4 迭代器 Iterator</h2><p>迭代器是用于容器的遍历的，对于一个容器，遍历方法通常有以下三种：</p><ul><li>for 循环遍历：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; array.size(); i++) &#123;<br>    System.out.println(array.get(i));<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>增强型 for 循环：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (Cell cell : array) &#123;<br>    System.out.println(cell);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>迭代器遍历</li></ul><p>下面将要细说迭代器是怎么用的了。</p><h3 id="41-初始化迭代器"><a class="markdownIt-Anchor" href="#41-初始化迭代器"></a> 4.1 初始化迭代器</h3><p>调用容器的返回迭代器的方法即可获得一个迭代器，如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Iterator&lt;Cell&gt; iterator = array.iterator();<br></code></pre></td></tr></table></figure><h3 id="42-迭代器的方法"><a class="markdownIt-Anchor" href="#42-迭代器的方法"></a> 4.2 迭代器的方法</h3><ul><li><code>boolean hasNext()</code>：判断迭代器是否到达末尾（此时指的是一个空元素）；</li><li><code>next()</code>：返回迭代器所指的成员，并且自身后移一位；</li><li><code>default void remove()</code>：删除迭代器所指的前一个元素，要跟在 <code>next()</code> 后面，且每调用一次 <code>next()</code> 最多只能删除一次。</li></ul><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">ArrayList&lt;Integer&gt; arrayList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>arrayList.add(<span class="hljs-number">1</span>);<br>arrayList.add(<span class="hljs-number">2</span>);<br>arrayList.add(<span class="hljs-number">15</span>);<br>Iterator&lt;Integer&gt; iterator = arrayList.iterator();<br><span class="hljs-keyword">while</span> (iterator.hasNext()) &#123;<br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> iterator.next();<br>    <span class="hljs-keyword">if</span> (i &lt; <span class="hljs-number">10</span>)<br>        iterator.remove();<br>&#125;<br>System.out.println(arrayList);<br></code></pre></td></tr></table></figure><h3 id="43-listiterator"><a class="markdownIt-Anchor" href="#43-listiterator"></a> 4.3 ListIterator</h3><p>相比于一般的 Iterator，ListIterator 可以前向遍历，也可以返回所指元素的的位置，具体方法见文档。</p><h2 id="5-算法类"><a class="markdownIt-Anchor" href="#5-算法类"></a> 5 算法类</h2><p>Java 的集合架构提供了两个功能强大的算法库 Collections 和 Arrays，用这两个库可以在集合上进行排序、序列化等等操作。</p><h3 id="51-collections"><a class="markdownIt-Anchor" href="#51-collections"></a> 5.1 Collections</h3><ul><li><code>void sort(List&lt;T&gt; list)</code>：对 list 进行排序，要求其中的元素 T 必须实现了 Comparable 接口，重写 compareTo 方法；</li><li><code>void sort(List&lt;T&gt; list, Comparator&lt;? super T&gt; c)</code>：当 list 没有实现 Comparable 接口时，可以传入一个 Comparator 进行排序操作；</li><li><code>int binarySearch(List&lt;? extends Comparable&lt;? super T&gt;&gt; list, T key)</code>：对一个实现了 Comparable 的有序 list 进行二分查找，返回第一个找到的元素的下标；</li><li><code>int binarySearch(List&lt;? extends T&gt; list, T key, Comparator&lt;? super T&gt; c)</code>：二分查找，传入一个比较器；</li><li><code>void reverse(List&lt;?&gt; list)</code>：翻转 list；</li><li><code>void shuffle(List&lt;?&gt; list)</code>：打乱 list；</li><li><code>void shuffle(List&lt;?&gt; list, Random rnd)</code>：以 rnd 为种子打乱 list；</li><li><code>void swap(List&lt;?&gt; list, int i, int j)</code>：交换两个元素的位置；</li><li><code>void fill(List&lt;? super T&gt; list, T obj)</code>：将所有元素都赋为 obj；</li><li><code>void copy(List&lt;? super T&gt; dest, List&lt;? extends T&gt; src)</code>：将 src 的内容拷贝到 dest 中；</li><li><code>T min(Collection&lt;? extends T&gt; coll)</code>：获得最小值，coll 要实现 Comparable 接口；</li><li><code>T min(Collection&lt;? extends T&gt; coll, Comparator&lt;? super T&gt; comp)</code>：根据 comp 获得最小元素；</li><li><code>T max(Collection&lt;? extends T&gt; coll)</code>：获得最大元素；</li><li><code>T max(Collection&lt;? extends T&gt; coll, Comparator&lt;? super T&gt; comp)</code>：获得最大元素；</li><li><code>void rotate(List&lt;?&gt; list, int distance)</code>：可以理解为循环列表的整体平移操作；</li><li><code>boolean replaceAll(List&lt;T&gt; list, T oldVal, T newVal)</code>；</li><li><code>int indexOfSubList(List&lt;?&gt; source, List&lt;?&gt; target)</code>：查找字列；</li><li><code>int lastIndexOfSubList(List&lt;?&gt; source, List&lt;?&gt; target)</code>：找最后一个字列；</li></ul><h3 id="52-arrays"><a class="markdownIt-Anchor" href="#52-arrays"></a> 5.2 Arrays</h3><p>这个类中的方法都是对<strong>数组</strong>进行操作的。</p><ul><li><code>void sort()</code>：可以对基本类型的数组进行排序，也可以排自定义类的数组，也可以传入 Comparator，还可以指定排序的起始和终止位置；</li><li><code>void parallelSort()</code>：归并排序；</li><li><code>int binarySearch()</code>：二分查找；</li><li><code>boolean equals()</code>：判断两数组是否相等；</li><li><code>void fill()</code>：将数组用 obj 填满；</li><li><code>T[] copyOf(T[] original, int newLength)</code>：深拷贝；</li><li><code>T[] copyOfRange(T[] original, int from, int to)</code>：区间深拷贝；</li><li><code>List&lt;T&gt; asList(T... a)</code>：转 ArrayList；</li></ul>]]></content>
    
    
    <categories>
      
      <category>笔记总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>Java</tag>
      
      <tag>集合框架</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python求解线性规划——PuLP使用教程</title>
    <link href="/2022/04/26/Python%E6%B1%82%E8%A7%A3%E7%BA%BF%E6%80%A7%E8%A7%84%E5%88%92%E2%80%94%E2%80%94PuLP%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
    <url>/2022/04/26/Python%E6%B1%82%E8%A7%A3%E7%BA%BF%E6%80%A7%E8%A7%84%E5%88%92%E2%80%94%E2%80%94PuLP%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="python求解线性规划pulp使用教程"><a class="markdownIt-Anchor" href="#python求解线性规划pulp使用教程"></a> Python求解线性规划——PuLP使用教程</h1><blockquote><p>简洁是智慧的灵魂，冗长是肤浅的藻饰。——莎士比亚《哈姆雷特》</p></blockquote><h2 id="1-pulp-库的安装"><a class="markdownIt-Anchor" href="#1-pulp-库的安装"></a> 1 PuLP 库的安装</h2><p>如果您使用的是 Anaconda<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="众所周知 Python 在各个领域如此受欢迎很大程度上是因为其有众多强大的第三方库，但是用的多了就会发现如果安装太多库就有点乱。而 Anaconda 就是一种很方便的管理 Python 环境的工具，不仅可以将不同的库分门别类管理好，更有用的是可以在电脑上安装**不同版本**的 Python 而不用担心会互相冲突。">[1]</span></a></sup> 的话（事实上我也更推荐这样做），需要先激活你想要安装的虚拟环境，之后在 Prompt 输入</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">pip install pulp<br></code></pre></td></tr></table></figure><p>不出意外的话等一会就安装完毕。</p><h2 id="2-线性规划简介"><a class="markdownIt-Anchor" href="#2-线性规划简介"></a> 2 线性规划简介</h2><p>想必大家能点开这篇文章一定都知道<strong>线性规划</strong>是什么意思吧……那么我用两个例子再简单说一下。</p><h3 id="21-线性规划"><a class="markdownIt-Anchor" href="#21-线性规划"></a> 2.1 线性规划</h3><h4 id="211-题目描述sup-idfnref2-classfootnote-refa-hreffn2-relfootnotespan-classhint-top-hint-rounded-aria-label2019-年高考全数学国二卷-2spanasup"><a class="markdownIt-Anchor" href="#211-题目描述sup-idfnref2-classfootnote-refa-hreffn2-relfootnotespan-classhint-top-hint-rounded-aria-label2019-年高考全数学国二卷-2spanasup"></a> 2.1.1 题目描述<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="2019 年高考全数学国二卷。">[2]</span></a></sup></h4><p>若变量 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo separator="true">,</mo><mi>y</mi></mrow><annotation encoding="application/x-tex">x, y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span> 满足约束条件：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo fence="true">{</mo><mtable rowspacing="0.24999999999999992em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mn>2</mn><mi>x</mi><mo>+</mo><mn>3</mn><mi>y</mi><mo>−</mo><mn>6</mn><mo>≥</mo><mn>0</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mi>x</mi><mo>+</mo><mi>y</mi><mo>−</mo><mn>3</mn><mo>≤</mo><mn>0</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mi>y</mi><mo>−</mo><mn>2</mn><mo>≤</mo><mn>0</mn></mrow></mstyle></mtd></mtr></mtable></mrow><annotation encoding="application/x-tex">\left\{\begin{aligned}&amp; 2x + 3y - 6\geq 0\\&amp; x + y - 3 \leq 0\\&amp; y - 2 \leq 0    \end{aligned}\right.</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:4.500000000000002em;vertical-align:-2.000000000000001em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.35002em;"><span style="top:-2.19999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎩</span></span></span><span style="top:-2.19999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-3.1500100000000004em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎨</span></span></span><span style="top:-4.30001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-4.60002em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎧</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.8500199999999998em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.5000000000000004em;"><span style="top:-4.5em;"><span class="pstrut" style="height:2.84em;"></span><span class="mord"></span></span><span style="top:-3em;"><span class="pstrut" style="height:2.84em;"></span><span class="mord"></span></span><span style="top:-1.4999999999999991em;"><span class="pstrut" style="height:2.84em;"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.000000000000001em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.5000000000000004em;"><span style="top:-4.66em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mord">2</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">3</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">6</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">0</span></span></span><span style="top:-3.16em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">3</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">0</span></span></span><span style="top:-1.6599999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.000000000000001em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>求 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>z</mi><mo>=</mo><mn>3</mn><mi>x</mi><mo>+</mo><mi>y</mi></mrow><annotation encoding="application/x-tex">z = 3x + y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">3</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span> 的最大值。</p><h4 id="212-基本概念"><a class="markdownIt-Anchor" href="#212-基本概念"></a> 2.1.2 基本概念</h4><p>首先，我们要认清在这道题中，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>y</mi></mrow><annotation encoding="application/x-tex">y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span> 是可以变的，所以把它们叫做<strong>决策变量</strong>。三个不等式叫做<strong>约束条件</strong>，即 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>y</mi></mrow><annotation encoding="application/x-tex">y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span> 必须同时满足这三个不等式。我们若画出图来：</p><p><img src="/img/PuLP.assets/image-20220426182542100.png" alt="" /></p><p>其中<strong>不满足</strong>约束条件的区域被我标上了颜色，所以 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo separator="true">,</mo><mi>y</mi></mrow><annotation encoding="application/x-tex">x, y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span> 可以取得值只能在纯白区域内，这一片区域称作<strong>可行域</strong>。</p><p>再看最后的我们的目标：求 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>z</mi><mo>=</mo><mi>x</mi><mo>+</mo><mn>3</mn><mi>y</mi></mrow><annotation encoding="application/x-tex">z = x + 3y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">3</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span> 的最大值。</p><p>于是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>z</mi><mo>=</mo><mi>x</mi><mo>+</mo><mn>3</mn><mi>y</mi></mrow><annotation encoding="application/x-tex">z=x+3y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">3</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span> 就被称作<strong>目标函数</strong>，我们的工作就是求这个目标函数的最大值。</p><p>整个问题描述为：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable rowspacing="0.24999999999999992em" columnalign="right left right left" columnspacing="0em 1em 0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mi>max</mi><mo>⁡</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mi>z</mi><mo>=</mo><mi>x</mi><mo>+</mo><mn>3</mn><mi>y</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mrow><mi mathvariant="normal">s</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">t</mi><mi mathvariant="normal">.</mi></mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mn>2</mn><mi>x</mi><mo>+</mo><mn>3</mn><mi>y</mi><mo>−</mo><mn>6</mn><mo>≥</mo><mn>0</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mi>x</mi><mo>+</mo><mn>3</mn><mi>y</mi><mo>−</mo><mn>3</mn><mo>≤</mo><mn>0</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mi>y</mi><mo>−</mo><mn>2</mn><mo>≤</mo><mn>0</mn></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned} &amp;\max &amp;&amp;z = x+3y\\ &amp;\mathrm{s.t.} &amp;&amp; 2x + 3y - 6 \geq0\\ &amp;              &amp;&amp; x + 3y - 3 \leq 0\\ &amp;              &amp;&amp; y - 2 \leq 0     \end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:6em;vertical-align:-2.7500000000000004em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.25em;"><span style="top:-5.25em;"><span class="pstrut" style="height:2.84em;"></span><span class="mord"></span></span><span style="top:-3.75em;"><span class="pstrut" style="height:2.84em;"></span><span class="mord"></span></span><span style="top:-2.249999999999999em;"><span class="pstrut" style="height:2.84em;"></span><span class="mord"></span></span><span style="top:-0.7499999999999996em;"><span class="pstrut" style="height:2.84em;"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.7500000000000004em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.25em;"><span style="top:-5.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">max</span></span></span><span style="top:-3.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mord"><span class="mord mathrm">s</span><span class="mord mathrm">.</span><span class="mord mathrm">t</span><span class="mord mathrm">.</span></span></span></span><span style="top:-2.4099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span></span></span><span style="top:-0.9099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.7500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:1em;"></span><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.25em;"><span style="top:-5.25em;"><span class="pstrut" style="height:2.84em;"></span><span class="mord"></span></span><span style="top:-3.75em;"><span class="pstrut" style="height:2.84em;"></span><span class="mord"></span></span><span style="top:-2.249999999999999em;"><span class="pstrut" style="height:2.84em;"></span><span class="mord"></span></span><span style="top:-0.7499999999999996em;"><span class="pstrut" style="height:2.84em;"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.7500000000000004em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.25em;"><span style="top:-5.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">3</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span><span style="top:-3.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mord">2</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">3</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">6</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">0</span></span></span><span style="top:-2.4099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">3</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">3</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">0</span></span></span><span style="top:-0.9099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.7500000000000004em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>然后怎么算？别急我们再看一个例子。</p><h3 id="22-整数规划"><a class="markdownIt-Anchor" href="#22-整数规划"></a> 2.2 整数规划</h3><h4 id="221-题目描述sup-idfnref3-classfootnote-refa-hreffn3-relfootnotespan-classhint-top-hint-rounded-aria-label改编自姜启元等数学模型第五版108-页例-1-3spanasup"><a class="markdownIt-Anchor" href="#221-题目描述sup-idfnref3-classfootnote-refa-hreffn3-relfootnotespan-classhint-top-hint-rounded-aria-label改编自姜启元等数学模型第五版108-页例-1-3spanasup"></a> 2.2.1 题目描述<sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><span class="hint--top hint--rounded" aria-label="改编自姜启元等《数学模型（第五版）》108 页例 1。">[3]</span></a></sup></h4><p>汽车厂生产小、中、大三种类型的汽车，已知各类型每辆车对钢材、劳动时间的需求以及利润如下表所示。要求每月的钢材消耗不超过 600 t，总劳动时间不超过 60 000 h。试指定生产计划使得工厂每月的利润最大。</p><table><thead><tr><th></th><th>小型车</th><th>中型车</th><th>大型车</th></tr></thead><tbody><tr><td>钢材 / t</td><td>1.5</td><td>3</td><td>5</td></tr><tr><td>劳动时间 / h</td><td>280</td><td>250</td><td>400</td></tr><tr><td>利润 / 万元</td><td>2</td><td>3</td><td>4</td></tr></tbody></table><h4 id="222-解题思路"><a class="markdownIt-Anchor" href="#222-解题思路"></a> 2.2.2 解题思路</h4><p>首先，设三个<strong>决策变量</strong>，用 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>x</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>x</mi><mn>2</mn></msub><mo separator="true">,</mo><msub><mi>x</mi><mn>3</mn></msub></mrow><annotation encoding="application/x-tex">x_1, x_2, x_3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 分别表示生产小型车、中型车、大型车的数量，但是注意要满足：</p><ul><li>车的数量<strong>只能是整数</strong>；</li><li>车的数量大于等于 0。</li></ul><p>其他<strong>约束条件</strong>看题直接列：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo fence="true">{</mo><mtable rowspacing="0.24999999999999992em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mn>1.5</mn><msub><mi>x</mi><mn>1</mn></msub><mo>+</mo><mn>3</mn><msub><mi>x</mi><mn>2</mn></msub><mo>+</mo><mn>5</mn><msub><mi>x</mi><mn>3</mn></msub><mo>≤</mo><mn>600</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mn>280</mn><msub><mi>x</mi><mn>1</mn></msub><mo>+</mo><mn>250</mn><msub><mi>x</mi><mn>2</mn></msub><mo>+</mo><mn>400</mn><msub><mi>x</mi><mn>2</mn></msub><mo>≤</mo><mn>60000</mn></mrow></mstyle></mtd></mtr></mtable></mrow><annotation encoding="application/x-tex">\left\{\begin{aligned}&amp; 1.5 x_1 +   3 x_2 +   5 x_3 \leq 600\\    &amp; 280 x_1 + 250 x_2 + 400 x_2 \leq 60000\end{aligned}\right.</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.00003em;vertical-align:-1.25003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">{</span></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.7500000000000002em;"><span style="top:-3.75em;"><span class="pstrut" style="height:2.84em;"></span><span class="mord"></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:2.84em;"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2500000000000002em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.7500000000000002em;"><span style="top:-3.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mord">1</span><span class="mord">.</span><span class="mord">5</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">3</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">5</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">6</span><span class="mord">0</span><span class="mord">0</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mord">2</span><span class="mord">8</span><span class="mord">0</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">2</span><span class="mord">5</span><span class="mord">0</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">4</span><span class="mord">0</span><span class="mord">0</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">6</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2500000000000002em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>最后写出<strong>目标函数</strong>：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>z</mi><mo>=</mo><mn>2</mn><msub><mi>x</mi><mn>1</mn></msub><mo>+</mo><mn>3</mn><msub><mi>x</mi><mn>2</mn></msub><mo>+</mo><mn>4</mn><msub><mi>x</mi><mn>3</mn></msub></mrow><annotation encoding="application/x-tex">z = 2x_1 + 3x_2 + 4x_3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.79444em;vertical-align:-0.15em;"></span><span class="mord">2</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.79444em;vertical-align:-0.15em;"></span><span class="mord">3</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.79444em;vertical-align:-0.15em;"></span><span class="mord">4</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><p>综合起来整个问题描述为：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable rowspacing="0.24999999999999992em" columnalign="right left right left" columnspacing="0em 1em 0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mi>max</mi><mo>⁡</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mi>z</mi><mo>=</mo><mn>2</mn><msub><mi>x</mi><mn>1</mn></msub><mo>+</mo><mn>3</mn><msub><mi>x</mi><mn>2</mn></msub><mo>+</mo><mn>4</mn><msub><mi>x</mi><mn>3</mn></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mrow><mi mathvariant="normal">s</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">t</mi><mi mathvariant="normal">.</mi></mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mn>1.5</mn><msub><mi>x</mi><mn>1</mn></msub><mo>+</mo><mn>3</mn><msub><mi>x</mi><mn>2</mn></msub><mo>+</mo><mn>5</mn><msub><mi>x</mi><mn>3</mn></msub><mo>≤</mo><mn>600</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mn>280</mn><msub><mi>x</mi><mn>1</mn></msub><mo>+</mo><mn>250</mn><msub><mi>x</mi><mn>2</mn></msub><mo>+</mo><mn>400</mn><msub><mi>x</mi><mn>2</mn></msub><mo>≤</mo><mn>60000</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><msub><mi>x</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>x</mi><mn>2</mn></msub><mo separator="true">,</mo><msub><mi>x</mi><mn>3</mn></msub><mo>≥</mo><mn>0</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><msub><mi>x</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>x</mi><mn>2</mn></msub><mo separator="true">,</mo><msub><mi>x</mi><mn>3</mn></msub><mtext>  </mtext><mi>a</mi><mi>r</mi><mi>e</mi><mtext>  </mtext><mi>i</mi><mi>n</mi><mi>t</mi><mi>e</mi><mi>g</mi><mi>e</mi><mi>r</mi><mi>s</mi></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned} &amp;\max &amp;&amp; z = 2x_1 + 3x_2 + 4x_3\\ &amp;\mathrm{s.t.} &amp;&amp; 1.5 x_1 +   3 x_2 +   5 x_3 \leq 600\\     &amp;              &amp;&amp; 280 x_1 + 250 x_2 + 400 x_2 \leq 60000\\     &amp;              &amp;&amp; x_1, x_2, x_3 \geq 0\\     &amp;              &amp;&amp; x_1, x_2, x_3 \; are \; integers\end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:7.500000000000002em;vertical-align:-3.5000000000000018em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:4em;"><span style="top:-6em;"><span class="pstrut" style="height:2.84em;"></span><span class="mord"></span></span><span style="top:-4.499999999999999em;"><span class="pstrut" style="height:2.84em;"></span><span class="mord"></span></span><span style="top:-2.9999999999999982em;"><span class="pstrut" style="height:2.84em;"></span><span class="mord"></span></span><span style="top:-1.4999999999999982em;"><span class="pstrut" style="height:2.84em;"></span><span class="mord"></span></span><span style="top:1.7763568394002505e-15em;"><span class="pstrut" style="height:2.84em;"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.5000000000000018em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:4em;"><span style="top:-6.16em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">max</span></span></span><span style="top:-4.659999999999999em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mord"><span class="mord mathrm">s</span><span class="mord mathrm">.</span><span class="mord mathrm">t</span><span class="mord mathrm">.</span></span></span></span><span style="top:-3.1599999999999984em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span></span></span><span style="top:-1.6599999999999984em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span></span></span><span style="top:-0.15999999999999837em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.5000000000000018em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:1em;"></span><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:4em;"><span style="top:-6em;"><span class="pstrut" style="height:2.84em;"></span><span class="mord"></span></span><span style="top:-4.499999999999999em;"><span class="pstrut" style="height:2.84em;"></span><span class="mord"></span></span><span style="top:-2.9999999999999982em;"><span class="pstrut" style="height:2.84em;"></span><span class="mord"></span></span><span style="top:-1.4999999999999982em;"><span class="pstrut" style="height:2.84em;"></span><span class="mord"></span></span><span style="top:1.7763568394002505e-15em;"><span class="pstrut" style="height:2.84em;"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.5000000000000018em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:4em;"><span style="top:-6.16em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">2</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">3</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">4</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-4.659999999999999em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mord">1</span><span class="mord">.</span><span class="mord">5</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">3</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">5</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">6</span><span class="mord">0</span><span class="mord">0</span></span></span><span style="top:-3.1599999999999984em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mord">2</span><span class="mord">8</span><span class="mord">0</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">2</span><span class="mord">5</span><span class="mord">0</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">4</span><span class="mord">0</span><span class="mord">0</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">6</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span></span></span><span style="top:-1.6599999999999984em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">0</span></span></span><span style="top:-0.15999999999999837em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault">t</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">s</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.5000000000000018em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>另外可以看出这个题由于涉及到三个决策变量，可行域是相当抽象的，这里就不画了 hhh~</p><h2 id="3-求解过程"><a class="markdownIt-Anchor" href="#3-求解过程"></a> 3 求解过程</h2><p>首先在最前面引入所需的<code>pulp</code>工具库：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pulp <span class="hljs-keyword">as</span> pl<br></code></pre></td></tr></table></figure><p>这句话是引入 <code>pulp</code> 库并简写为 <code>pl</code>，一个 python 库只有在开始 <code>import</code> 了之后才能在后面使用。这样后面凡是用到 <code>pulp</code> 的功能都要写成 <code>pl.xxx</code>。</p><p>接下来是以下几个步骤：</p><ul><li>定义模型</li><li>定义决策变量</li><li>添加约束条件</li><li>添加目标函数</li><li>模型求解</li><li>打印结果</li></ul><h3 id="31-定义模型"><a class="markdownIt-Anchor" href="#31-定义模型"></a> 3.1 定义模型</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Define the model</span><br>model = pl.LpProblem(name=<span class="hljs-string">&quot;My-Model&quot;</span>, sense=pl.LpMaximize)<br></code></pre></td></tr></table></figure><p>这个操作是使用 <code>pl.LpProblem</code> 创建了一个模型并赋值给变量 <code>model</code>，接收两个参数：</p><ul><li><code>name</code>：模型的名字，随便起一个；</li><li><code>sense</code>：模型的类型，<code>pl.LpMinimize</code>是求目标函数的最小值，<code>pl.LpMaximize</code> 是求最大值</li></ul><h3 id="32-定义决策变量"><a class="markdownIt-Anchor" href="#32-定义决策变量"></a> 3.2 定义决策变量</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Define the decision variables</span><br>x = pl.LpVariable(name=<span class="hljs-string">&#x27;x&#x27;</span>)<br>y = pl.LpVariable(name=<span class="hljs-string">&#x27;y&#x27;</span>)<br></code></pre></td></tr></table></figure><p>如果你的变量比较少的话可以简单这么写。这个意思是定义了两个浮点数变量，取值范围是整个实数域。注意等号左边的变量才是你在之后的计算式中使用的符号，而参数 <code>name</code> 只有在最后打印结果的时候才会被打印出来。另外如果你对变量有其他要求的话可以添加以下参数：</p><ul><li><code>lowBound</code>：变量的最小取值（不写的话默认负无穷）；</li><li><code>upBound</code>：变量的最大取值（默认正无穷）；</li><li><code>cat</code>：变量的类型，有 <code>pl.Binary</code> 逻辑变量、<code>pl.Integer</code> 整数、<code>pl.Continuous</code> 实数（默认值）；</li></ul><p>如果你的变量比较多而不得不用 1, 2, 3…… 来编号，可以采用类似这样的写法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Define the decision variables</span><br>x = &#123;i: pl.LpVariable(name=<span class="hljs-string">f&quot;x<span class="hljs-subst">&#123;i&#125;</span>&quot;</span>, lowBound=<span class="hljs-number">0</span>, cat=pl.LpInteger) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">9</span>)&#125;<br></code></pre></td></tr></table></figure><p>这是一次定义 8 个变量并保存在一个类似数组的结构中，变量都是<strong>正整数</strong>，分别用 <code>x[1]</code>,<code>x[2]</code>, …, <code>x[8]</code> 表示，依次命名为 x1, x2,…, x8。</p><blockquote><p>注意 <code>range(left, right)</code> 表示的区间是左闭右开。</p></blockquote><h3 id="33-添加约束条件"><a class="markdownIt-Anchor" href="#33-添加约束条件"></a> 3.3 添加约束条件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Add constraints</span><br>model += (<span class="hljs-number">2</span> * x + <span class="hljs-number">3</span> * y - <span class="hljs-number">6</span> &gt;= <span class="hljs-number">0</span>, <span class="hljs-string">&quot;constrain_1&quot;</span>)<br>model += (x + <span class="hljs-number">3</span> * y - <span class="hljs-number">3</span> == <span class="hljs-number">0</span>, <span class="hljs-string">&quot;constrain_2&quot;</span>)<br></code></pre></td></tr></table></figure><p>没错！如你所见就是这么简单，括号里第一个变量就是你的约束<strong>不等式</strong>或<strong>等式</strong>，第二个变量是你的自定义的约束名（可以起一个有意义的名字，当然也可以省略）。</p><blockquote><p>由于一些比较数学的原因，约束条件里是不能使用大于号“&gt;”或小于号“&lt;”的。</p></blockquote><p>如果你像前面一样把变量定义在了数组中，那么可以直接用方括号调用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">model += (<span class="hljs-number">2</span> * x[<span class="hljs-number">1</span>] + <span class="hljs-number">3</span> * x[<span class="hljs-number">2</span>] - <span class="hljs-number">6</span> &gt;= <span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><h3 id="34-添加目标函数"><a class="markdownIt-Anchor" href="#34-添加目标函数"></a> 3.4 添加目标函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Set the objective</span><br>model += x + <span class="hljs-number">3</span> * y<br></code></pre></td></tr></table></figure><p>与前面添加约束条件不同，添加目标函数这一步不用加最外层的括号。</p><h3 id="35-模型求解"><a class="markdownIt-Anchor" href="#35-模型求解"></a> 3.5 模型求解</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Solve the optimization problem</span><br>status = model.solve()<br></code></pre></td></tr></table></figure><p>就写这一句话，调用 <code>model</code> 的 <code>solve()</code> 方法，并把结果保存在 <code>status</code> 中。</p><h3 id="34-打印结果"><a class="markdownIt-Anchor" href="#34-打印结果"></a> 3.4 打印结果</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Get the results</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;status: <span class="hljs-subst">&#123;model.status&#125;</span>, <span class="hljs-subst">&#123;pl.LpStatus[model.status]&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;objective: <span class="hljs-subst">&#123;model.objective.value()&#125;</span>&quot;</span>)<br><br><span class="hljs-keyword">for</span> var <span class="hljs-keyword">in</span> model.variables():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;var.name&#125;</span>: <span class="hljs-subst">&#123;var.value()&#125;</span>&quot;</span>)<br><br><span class="hljs-keyword">for</span> name, constraint <span class="hljs-keyword">in</span> model.constraints.items():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;name&#125;</span>: <span class="hljs-subst">&#123;constraint.value()&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><p>然后你就能看到模型求解的结果了。</p><h2 id="4-示例代码"><a class="markdownIt-Anchor" href="#4-示例代码"></a> 4 示例代码</h2><h3 id="41-高考题代码"><a class="markdownIt-Anchor" href="#41-高考题代码"></a> 4.1 高考题代码</h3><p>首先解决一下 3.1 的高考题：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pulp <span class="hljs-keyword">as</span> pl<br><br><span class="hljs-comment"># 定义一个模型，命名为 &quot;Model_3.1&quot;，求最大值</span><br>model = pl.LpProblem(name=<span class="hljs-string">&quot;Model_3.1&quot;</span>, sense=pl.LpMaximize)<br><br><span class="hljs-comment"># 定义两个决策变量，取值为整个实数域</span><br>x = pl.LpVariable(name=<span class="hljs-string">&#x27;x&#x27;</span>)<br>y = pl.LpVariable(name=<span class="hljs-string">&#x27;y&#x27;</span>)<br><br><span class="hljs-comment"># 添加三个约束条件</span><br>model += (<span class="hljs-number">2</span> * x + <span class="hljs-number">3</span> * y - <span class="hljs-number">6</span> &gt;= <span class="hljs-number">0</span>)<br>model += (x + y - <span class="hljs-number">3</span> &lt;= <span class="hljs-number">0</span>)<br>model += (y - <span class="hljs-number">2</span> &lt;= <span class="hljs-number">0</span>)<br><br><span class="hljs-comment"># 目标函数</span><br>model += x + <span class="hljs-number">3</span> * y<br><br><span class="hljs-comment"># 求解</span><br>status = model.solve()<br><br><span class="hljs-comment"># 打印结果</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;status: <span class="hljs-subst">&#123;model.status&#125;</span>, <span class="hljs-subst">&#123;pl.LpStatus[model.status]&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;objective: <span class="hljs-subst">&#123;model.objective.value()&#125;</span>&quot;</span>)<br><br><span class="hljs-keyword">for</span> var <span class="hljs-keyword">in</span> model.variables():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;var.name&#125;</span>: <span class="hljs-subst">&#123;var.value()&#125;</span>&quot;</span>)<br><br><span class="hljs-keyword">for</span> name, constraint <span class="hljs-keyword">in</span> model.constraints.items():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;name&#125;</span>: <span class="hljs-subst">&#123;constraint.value()&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><p>查看结果的最后几行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs X">status: 1, Optimal<br>objective: 7.0<br>x: 1.0<br>y: 2.0<br>_C1: 2.0<br>_C2: 0.0<br>_C3: 0.0<br></code></pre></td></tr></table></figure><p>最大值是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>7.0</mn></mrow><annotation encoding="application/x-tex">7.0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">7</span><span class="mord">.</span><span class="mord">0</span></span></span></span>，在 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>=</mo><mn>1.0</mn><mo separator="true">,</mo><mi>y</mi><mo>=</mo><mn>2.0</mn></mrow><annotation encoding="application/x-tex">x=1.0, y=2.0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mord">.</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord">.</span><span class="mord">0</span></span></span></span> 时取到。</p><h3 id="42-汽车厂代码"><a class="markdownIt-Anchor" href="#42-汽车厂代码"></a> 4.2 汽车厂代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pulp <span class="hljs-keyword">as</span> pl<br><br><span class="hljs-comment"># 定义一个模型，命名为 &quot;Model_3.2&quot;，求最大值</span><br>model = pl.LpProblem(name=<span class="hljs-string">&quot;Model_3.2&quot;</span>, sense=pl.LpMaximize)<br><br><span class="hljs-comment"># 定义三个决策变量，取值正整数</span><br>x = &#123;i: pl.LpVariable(name=<span class="hljs-string">f&quot;x<span class="hljs-subst">&#123;i&#125;</span>&quot;</span>, lowBound=<span class="hljs-number">0</span>, cat=pl.LpInteger) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">4</span>)&#125;<br><br><span class="hljs-comment"># 添加约束条件</span><br>model += (<span class="hljs-number">1.5</span> * x[<span class="hljs-number">1</span>] + <span class="hljs-number">3</span> * x[<span class="hljs-number">2</span>] + <span class="hljs-number">5</span> * x[<span class="hljs-number">3</span>] &lt;= <span class="hljs-number">600</span>)<br>model += (<span class="hljs-number">280</span> * x[<span class="hljs-number">1</span>] + <span class="hljs-number">250</span> * x[<span class="hljs-number">2</span>] + <span class="hljs-number">400</span> * x[<span class="hljs-number">3</span>] &lt;= <span class="hljs-number">60000</span>)<br><br><span class="hljs-comment"># 目标函数</span><br>model += <span class="hljs-number">2</span> * x[<span class="hljs-number">1</span>] + <span class="hljs-number">3</span> * x[<span class="hljs-number">2</span>] + <span class="hljs-number">4</span> * x[<span class="hljs-number">3</span>]<br><br><span class="hljs-comment"># 求解</span><br>status = model.solve()<br><br><span class="hljs-comment"># 打印结果</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;status: <span class="hljs-subst">&#123;model.status&#125;</span>, <span class="hljs-subst">&#123;pl.LpStatus[model.status]&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;objective: <span class="hljs-subst">&#123;model.objective.value()&#125;</span>&quot;</span>)<br><br><span class="hljs-keyword">for</span> var <span class="hljs-keyword">in</span> model.variables():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;var.name&#125;</span>: <span class="hljs-subst">&#123;var.value()&#125;</span>&quot;</span>)<br><br><span class="hljs-keyword">for</span> name, constraint <span class="hljs-keyword">in</span> model.constraints.items():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;name&#125;</span>: <span class="hljs-subst">&#123;constraint.value()&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><p>查看结果的最后几行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs X">status: 1, Optimal<br>objective: 632.0<br>x1: 64.0<br>x2: 168.0<br>x3: 0.0<br>_C1: 0.0<br>_C2: -80.0<br></code></pre></td></tr></table></figure><p>三种车的产量分别取 64、168、0，最大收益 632 万元。</p><hr /><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>众所周知 Python 在各个领域如此受欢迎很大程度上是因为其有众多强大的第三方库，但是用的多了就会发现如果安装太多库就有点乱。而 Anaconda 就是一种很方便的管理 Python 环境的工具，不仅可以将不同的库分门别类管理好，更有用的是可以在电脑上安装<strong>不同版本</strong>的 Python 而不用担心会互相冲突。<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span>2019 年高考全数学国二卷。<a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span>改编自姜启元等《数学模型（第五版）》108 页例 1。<a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>教程系列</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Pyhton</tag>
      
      <tag>PuLP</tag>
      
      <tag>数学建模</tag>
      
      <tag>线性规划</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ssh 连接 git 教程</title>
    <link href="/2022/04/17/ssh-%E8%BF%9E%E6%8E%A5-git-%E6%95%99%E7%A8%8B/"/>
    <url>/2022/04/17/ssh-%E8%BF%9E%E6%8E%A5-git-%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<blockquote><p>有了门，我们可以出去；有了窗，我们可以不必出去。——钱钟书《围城》</p></blockquote><h2 id="0-说在前面的话"><a class="markdownIt-Anchor" href="#0-说在前面的话"></a> 0 说在前面的话</h2><p>Git 是个好东西，但是用起来有两个不方便之处：</p><ul><li>操作时要频繁输密码；</li><li>连接 github 时由于网速问题经常失败。</li></ul><p>使用 ssh 连接便可以解决这样的问题，但奈何本人记性不好，每次配置都要上网查半天教程，于是这次终于下定决心自己总结了。<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="参考自：[使用SSH连接到GitHub - 简书 (jianshu.com)](https://www.jianshu.com/p/9a36ba848d4d) 和 [配置github SSH公钥登录 - 苦咖啡~~ - 博客园 (cnblogs.com)](https://www.cnblogs.com/wyzhou/p/9835927.html)">[1]</span></a></sup></p><h2 id="1-关于-ssh"><a class="markdownIt-Anchor" href="#1-关于-ssh"></a> 1 关于 ssh</h2><p>SSH 是较可靠，专为远程登录会话和其他网络服务提供安全性的协议。<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="来自《百度百科》">[2]</span></a></sup>使用 SSH 协议可以连接远程服务器和服务并向它们验证。连接远程仓库时无需输入密码而且能实现对 github 的流畅访问。除此之外我还用 ssh 协议成功在 Windows Terminal 中连接上了自己的远程服务器。</p><h2 id="2-检查现有的-ssh-密钥"><a class="markdownIt-Anchor" href="#2-检查现有的-ssh-密钥"></a> 2 检查现有的 ssh 密钥</h2><p>Windows 打开 GitBash，Linux 下打开终端，输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">ls</span> -al ~/.ssh<br></code></pre></td></tr></table></figure><p>如果你看到以下输出，那么说明你已经有 ssh 密钥（以 .pub 结尾的文件）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">ls</span> -al ~/.ssh<br>total 26<br>drwxr-xr-x 1 197121    0 Mar 31 22:29 ./<br>drwxr-xr-x 1 197121    0 Apr 16 23:36 ../<br>-rw-r--r-- 1 197121 2610 Mar 31 22:27 id_rsa<br>-rw-r--r-- 1 197121  573 Mar 31 22:27 id_rsa.pub<br>-rw-r--r-- 1 197121  831 Apr  1 12:08 known_hosts<br>-rw-r--r-- 1 197121   92 Mar 31 22:26 known_hosts.old<br></code></pre></td></tr></table></figure><p>如果你不想用原来的密钥或者没有密钥的话也不用着急，看下一步如何生成新的 ssh 密钥。</p><h2 id="3-创建新的-ssh-密钥"><a class="markdownIt-Anchor" href="#3-创建新的-ssh-密钥"></a> 3 创建新的 ssh 密钥</h2><h3 id="31-生成新的-ssh-密钥"><a class="markdownIt-Anchor" href="#31-生成新的-ssh-密钥"></a> 3.1 生成新的 ssh 密钥</h3><p>在 Windows 的 GitBash 或 Linux 终端输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ ssh-keygen -t rsa -b 4096 -C <span class="hljs-string">&quot;your_email@example.com&quot;</span><br><span class="hljs-comment"># 你可以把引号里的替换为你自己的邮箱，不换的话问题不大</span><br></code></pre></td></tr></table></figure><p>然后终端会让你输入一些东西，可以不用输入直接一路回车，看到：</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">Generating public/private rsa key pair.<br>Enter file in which to save the key (/root/.ssh/id_rsa):<br>Enter passphrase (empty for no passphrase):<br>Enter same passphrase again:<br>Your identification has been saved in /root/.ssh/id_rsa<br>Your public key has been saved in /root/.ssh/id_rsa.pub<br>The key fingerprint is:<br>SHA256:t3925EJgD4kcUp69dBv/nqkM85n0I5mFRW4BlZwaVeo your_email<span class="hljs-meta">@example.com</span><br>The key&#x27;s randomart image is:<br>+---[RSA 4096]----+<br>|<span class="hljs-string">             .=o=</span>|<br>|<span class="hljs-string">          .  . B </span>|<br>|<span class="hljs-string">         o +  * .</span>|<br>|<span class="hljs-string">        . * =oo+ </span>|<br>|<span class="hljs-string">        So.B +A+ </span>|<br>|<span class="hljs-string">         .o.B.o.o</span>|<br>|<span class="hljs-string">          .o o+o.</span>|<br>|<span class="hljs-string">           .*+B.*</span>|<br>|<span class="hljs-string">            .OoBo</span>|<br>+----[SHA256]-----+<br></code></pre></td></tr></table></figure><p>代表密钥生成成功。</p><h3 id="32-将ssh密钥添加到ssh-agent"><a class="markdownIt-Anchor" href="#32-将ssh密钥添加到ssh-agent"></a> 3.2 将SSH密钥添加到ssh-agent</h3><h4 id="321-确保-ssh-正在运行"><a class="markdownIt-Anchor" href="#321-确保-ssh-正在运行"></a> 3.2.1 确保 ssh 正在运行</h4><p>终端输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">eval</span><br>$ ssh-agent -s<br></code></pre></td></tr></table></figure><p>看到如下输出：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">SSH_AUTH_SOCK</span>=/tmp/ssh-xkZRdf3bu6fW/agent.1075848; <span class="hljs-built_in">export</span> SSH_AUTH_SOCK;<br><span class="hljs-attribute">SSH_AGENT_PID</span>=1075849; <span class="hljs-built_in">export</span> SSH_AGENT_PID;<br>echo Agent pid 1075849;<br></code></pre></td></tr></table></figure><p>代表 ssh 正常运行。</p><h4 id="333-添加-ssh-到账户"><a class="markdownIt-Anchor" href="#333-添加-ssh-到账户"></a> 3.3.3 添加 ssh 到账户</h4><p>执行以下两条命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ ssh-agent bash<br>$ ssh-add ~/.ssh/id_rsa <span class="hljs-comment"># 这里如果文件名被改过要写你自己定义的文件名</span><br></code></pre></td></tr></table></figure><p>看到输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">Identity added: id_rsa (your_email@example.com)<br></code></pre></td></tr></table></figure><p>添加成功！</p><h2 id="4-将密钥添加到-github-账户"><a class="markdownIt-Anchor" href="#4-将密钥添加到-github-账户"></a> 4 将密钥添加到 github 账户</h2><h3 id="41-复制你的公钥"><a class="markdownIt-Anchor" href="#41-复制你的公钥"></a> 4.1 复制你的公钥</h3><p>在终端使用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">cat</span> ~/.ssh/id_rsa.pub<br></code></pre></td></tr></table></figure><p>看到：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDJ6c4cXmpyJr<span class="hljs-regexp">/anagkKz4K+RCFYSJlkFvdNY6JBmKeomrQYfChpDZFxjUkj72XfSAhGyJjPcn4pTHHLCHOS2jzstrvE0Cq19p/m</span>bbvwsq5GGqmzsTYqOeqpTIeEKnXlv<span class="hljs-regexp">/PXkh/m</span>XJVOWhui8esIQk4bU1Ss2wIEVMSRI+<span class="hljs-number">9</span>n8RgyBcpbiq4m<span class="hljs-regexp">/SDrUy1HJNHO3pyjcf7k6XUjfxeTRWMVtj7IH3yQbgrZQo90VHsVhkmTeyvaCv8tJLi/</span>j+t9E1<span class="hljs-regexp">/kOWPbpTFTmaAe190SuPVwpQjyRH/</span>Z8UWVdCYxgeZ9l9JN3MTyHfRWz6FuDJdoQze94mU1NwEP8AftHNVTsMT2qvbAYK3Mcr6<span class="hljs-regexp">/j1R1vAeq4mbgn1dp79RGW0cKOSx336WuFsfebMV7QLZ1RnW5xF6VgghMd4x9Hk8kmLL6s8I7ZfbjNCgyAhL9d5N01lsz8hdMv1BHzaZp+yk0EXUy8fxFvaSYaUpQuKb8eL6DesBJJ8FH4GVb6+V7J7OsXhG8QiKdDsDbfGDJs/</span>Aq0Ew14cuHlD9y<span class="hljs-regexp">/1A44b+Kt6WwmcISGG85SM+YUcPuay8gEFzNQ/</span>Tzgw4bJznw0RHHVuvtpmjvlBUxXRTSICvrrAJ19<span class="hljs-regexp">/yXoHcZtiPncpDHVnyIy6IVAg23MCeUbrIPIPKQXVHG/</span><span class="hljs-number">5</span>ouRk0YbkFbl6kSq/Yurb35N7tDQ== your_email@example.com<br></code></pre></td></tr></table></figure><p>全给复制下来！</p><h3 id="42-将公钥添加到-github-账户"><a class="markdownIt-Anchor" href="#42-将公钥添加到-github-账户"></a> 4.2 将公钥添加到 github 账户</h3><p>然后去 gihub：</p><ul><li>右上角下拉面板选择 <strong>Settings</strong>；</li><li>左侧选择 <strong>SSH and GPG keys</strong>；</li><li>点击 <strong>New SSH key</strong>；</li><li>随便起一个 title；</li><li>把公钥粘贴到下面。</li></ul><p>可能会输入密码，添加完成！</p><h2 id="5-测试-ssh-连接"><a class="markdownIt-Anchor" href="#5-测试-ssh-连接"></a> 5 测试 ssh 连接</h2><p>在终端中输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ ssh -T git@github.com<br></code></pre></td></tr></table></figure><p>可能看到如下警告：</p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vbnet">The authenticity <span class="hljs-keyword">of</span> host <span class="hljs-comment">&#x27;github.com (20.205.243.166)&#x27; can&#x27;t be established.</span><br>ECDSA <span class="hljs-keyword">key</span> fingerprint <span class="hljs-built_in">is</span> SHA256:p2QAMXNIC1TJYWeIOttrVc98/R1BUFWu3/LiyKgUfQM.<br>Are you sure you want <span class="hljs-keyword">to</span> <span class="hljs-keyword">continue</span> connecting (yes/no/[fingerprint])?<br></code></pre></td></tr></table></figure><p>输入 yes：</p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vbnet"><span class="hljs-symbol">Warning:</span> Permanently added <span class="hljs-comment">&#x27;github.com,20.205.243.166&#x27; (ECDSA) to the list of known hosts.</span><br>Hi xxxxxx You<span class="hljs-comment">&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span><br></code></pre></td></tr></table></figure><p>如果 xxxxxx 是你的 github 用户名，说明成功。</p><h2 id="6-配置-git-使用-ssh-密钥登录"><a class="markdownIt-Anchor" href="#6-配置-git-使用-ssh-密钥登录"></a> 6 配置 git 使用 ssh 密钥登录</h2><p>首先将你的仓库 clone 下来到一个位置。然后进入你的仓库。</p><h3 id="61-检查当前的-remote-url"><a class="markdownIt-Anchor" href="#61-检查当前的-remote-url"></a> 6.1 检查当前的 remote url</h3><p>在仓库下输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git remote -v<br></code></pre></td></tr></table></figure><p>看到输出：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">origin  https:<span class="hljs-regexp">//</span>xxxxx.git (fetch)<br>origin  https:<span class="hljs-regexp">//</span>xxxxx.git (push)<br></code></pre></td></tr></table></figure><p>说明当前使用的还是 https 协议，如果以 git 开头表示 git 协议。</p><h3 id="62-修改-remote-url-为-git-协议"><a class="markdownIt-Anchor" href="#62-修改-remote-url-为-git-协议"></a> 6.2 修改 remote url 为 git 协议</h3><p>上 github 仓库，点 <strong>Code</strong>，选择 <strong>SSH</strong>，复制链接：</p><p><img src="/img/SSH%E8%BF%9E%E6%8E%A5git.assets/image-20220417121125160.png" alt="" /></p><p>在终端输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git remote set-url origin git@github.com:xxxxx.git<br></code></pre></td></tr></table></figure><p>再检查 git 协议：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git remote -v<br></code></pre></td></tr></table></figure><p>出现：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs perl">origin  git@xxxxx.git (fetch)<br>origin  git@xxxxx.git (<span class="hljs-keyword">push</span>)<br></code></pre></td></tr></table></figure><p>成功！</p><p>接下来可以快乐 push&amp;pull 了。</p><hr /><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>参考自：<a href="https://www.jianshu.com/p/9a36ba848d4d">使用SSH连接到GitHub - 简书 (jianshu.com)</a> 和 <a href="https://www.cnblogs.com/wyzhou/p/9835927.html">配置github SSH公钥登录 - 苦咖啡~~ - 博客园 (cnblogs.com)</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span>来自《百度百科》<a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>教程系列</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ssh</tag>
      
      <tag>git</tag>
      
      <tag>Github</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一文看懂C语言I/O</title>
    <link href="/2022/03/25/%E4%B8%80%E6%96%87%E7%9C%8B%E6%87%82C%E8%AF%AD%E8%A8%80I-O/"/>
    <url>/2022/03/25/%E4%B8%80%E6%96%87%E7%9C%8B%E6%87%82C%E8%AF%AD%E8%A8%80I-O/</url>
    
    <content type="html"><![CDATA[<h1 id="一文看懂-c-语言-io"><a class="markdownIt-Anchor" href="#一文看懂-c-语言-io"></a> 一文看懂 C 语言 I/O</h1><blockquote><p>再会吧，这宝贵的片刻和短暂的时机限制了我在情义上的真挚表示，也不能容我们畅叙衷曲，这本来是亲友重逢所应有的机缘；愿上帝赐给我们美好的未来，好让我们开怀畅谈！再一次告别；勇敢作战吧，祝你胜利！——威廉•莎士比亚《查理三世》</p></blockquote><h2 id="0-说在前面"><a class="markdownIt-Anchor" href="#0-说在前面"></a> 0 说在前面</h2><p>当你看到这篇文章时，不妨回想一下你当初第一次用 C 语言“Hello World!”时是什么样的心情。那是你第一次成功使用神秘代码完成了和计算机的交流。尽管展示信息的黑框框让你可能不大习惯这样一种沟通方式，但这难道不也有点电影里黑客那感觉了~？</p><p>不知不觉半年过去了，你为了数据结构作业绞尽脑汁，敲下最后一个分号，鼠标轻点”编译运行“。黑色高级框框跳出来，尴尬而不失礼貌地对你说：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs TEXT"><br>--------------------------------<br>Process exited after 4.511 seconds with return value 3221225477<br>请按任意键继续. . .<br></code></pre></td></tr></table></figure><p>你质问：</p><p>”你怎么了，为什么要这样对我……呜呜~“</p><p>是啊，你认识了这个框框那么久，它早已熟悉你写 bug 的习惯，而你却摸不清它的性情。你是时候应该了解一下它了。</p><h2 id="1-标准输入输出"><a class="markdownIt-Anchor" href="#1-标准输入输出"></a> 1 标准输入输出</h2><p>”你好，我叫<strong>终端</strong>，也叫<strong>控制台</strong>，英文名是 Terminal，也叫 Console，很高兴成为你的朋友。“</p><p>”你不记得我啦？我就是你每次运行程序的时候跳出来跟你聊天的那位。请看——“</p><p><img src="/img/%E4%B8%80%E6%96%87%E7%9C%8B%E6%87%82C%E8%AF%AD%E8%A8%80IO.assets/o_220325115223_Terminal.png" alt="" /></p><p>“其实我并不是你的程序本体，你的程序躲在电脑里面，是它派我来跟你说话的，”</p><p>“当你在键盘上敲敲的时候，我会帮你把你输入的字符显示出来，这样你就知道你输入的对不对了，”</p><p>“然后你一行输完，按下回车，我帮你把整行字符串都传给你的程序，你的程序就会对一行字符串进行解析，如果有 scanf 函数的话还会逐个解析出里面的数字、字符等等，”</p><p>“当你的程序算完之后，会把输出的信息告诉我，我来显示到屏幕上。”</p><hr /><p>所谓 I/O，就是 Input/Output，即输入输出。通过<strong>终端</strong>读入和显示的就是“标准输入输出”，由于终端也是从键盘获取信息，并把信息显示在屏幕上。所以：</p><ul><li><strong>标准输入</strong>也叫<strong>键盘输入</strong></li><li><strong>标准输出</strong>也叫<strong>屏幕输出</strong></li></ul><p>标准输入输出的英文是 Standard Input and Output，缩写就是“stdio”，觉不觉得眼熟hhh~</p><hr /><p>——“你用的 scanf、gets、getchar 函数都是解析标准输入的，printf、puts、putchar 都是标准输出。现在知道我是干什么的了吧”</p><p>——“哦，原来是这样。但是你好丑。”</p><p>——“？？？那我走”</p><h2 id="2-输出输出重定向"><a class="markdownIt-Anchor" href="#2-输出输出重定向"></a> 2 输出输出重定向</h2><p>终端走了——你万念俱灰，把你的代码提交给希冀的评测姬。她说：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs TEXT">得分0.00   最后一次提交时间:2022-03-25 19:29:50<br><br>共有测试数据:5<br>平均占用内存:1.401K    平均CPU时间:0.00578S    平均墙钟时间:0.00576S<br><br>测试数据评判结果<br>测试数据1运行错误<br>测试数据2运行错误<br>测试数据3运行错误<br>测试数据4运行错误<br>测试数据5运行错误<br></code></pre></td></tr></table></figure><p>——“求求你在本地测好再交给我 OK？我每天判那么多代码很累了啦！”</p><p>——“emm……我好奇你怎么知道我们的代码对不对的，也是用终端吗？”</p><p>——“终端？那不是低级的 PC 才会用的东西？我们服务器不需要这个。I/O 重定向一下就行了”</p><hr /><p>现在你可以试试这样一个操作，写好一份 C 语言代码，里面有标准输入输出函数，然后添加两行这样的语句：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-comment">// 一些额外的头文件和宏定义</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    freopen(<span class="hljs-string">&quot;a.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, <span class="hljs-built_in">stdin</span>);<br>    freopen(<span class="hljs-string">&quot;a.out&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, <span class="hljs-built_in">stdout</span>);   <span class="hljs-comment">// 额外添加这两句 :)</span><br>    ...<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后在你的 C 程序的<strong>同一文件夹</strong>下新建文本文档，命名为 “<a href="http://a.in">a.in</a>”（注意这一步之前要确保你的电脑<strong>显示了文件后缀</strong><sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="打开“此电脑”，在上面一栏找到“查看”按钮，点进去，找到“文件后缀名”，看是否打勾，如果没有请务必打上。">[1]</span></a></sup>）。然后在 “<a href="http://a.in">a.in</a>” 里面写上你要输入的数据，Ctrl+S 保存。</p><p>编译运行你的代码，你会发现程序直接结束，黑框框没有其它输出了。</p><p>然后你在代码所在的文件夹里发现了一个名为 “a.out” 的文本文档，里面正是你要的答案。</p><p>当然 “<a href="http://a.in">a.in</a>” 和 “a.out” 可以改成你喜欢的任何名字，文本文档<strong>对后缀不敏感</strong>，跟 “.txt” 是一样的。</p><p>当然你可以像我一样玩（用编辑器打开输入文件分屏出去，调试的时候不用每次在控制台输入，多是一件美事）：</p><p><img src="img/%E4%B8%80%E6%96%87%E7%9C%8B%E6%87%82C%E8%AF%AD%E8%A8%80IO.assets/o_220325124330_image.png" alt="" /></p><hr /><p>回过头来我们看看这两句是什么意思：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c">freopen(<span class="hljs-string">&quot;a.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, <span class="hljs-built_in">stdin</span>);<br>freopen(<span class="hljs-string">&quot;a.out&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, <span class="hljs-built_in">stdout</span>);<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * freopen: f    表示 “file (文件)”</span><br><span class="hljs-comment"> *          re   表示 “重新”</span><br><span class="hljs-comment"> *          open 表示 “打开”</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * &quot;a.in&quot; / &quot;a.out&quot; 表示重定向的文件名</span><br><span class="hljs-comment"> * &quot;r&quot; / &quot;w&quot; 表示文件的打开模式：&quot;r&quot; 意味着“读”，&quot;w&quot; 意味着写</span><br><span class="hljs-comment"> * stdin / stdout 表示被替换的 I/O 方式</span><br><span class="hljs-comment"> *                分别是标准输入(standard input)和标准输出(standart output)</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><p>翻译成人话就是：</p><ul><li>我要用“只读方式”打开文件 “<a href="http://a.in">a.in</a>”，并用其<strong>替换标准输入</strong>；</li><li>我要以“只写方式”打开文件 “a.out”，并用其<strong>替换标准输出</strong>。<ul><li>顺便说一句，只写模式 “w” 下，如果找不到文件，程序会帮你创建一个~</li></ul></li></ul><hr /><p>评测姬说：</p><p>“现在你懂了？在我拿到你的程序时，会自动帮你加上 freopen 将标准 I/O 重定向为文件 I/O，再在我的 CPU 里跑程序，跑完再对比一下你的输出和标准答案一不一样就行了。”</p><h2 id="3-文件-io"><a class="markdownIt-Anchor" href="#3-文件-io"></a> 3 文件 I/O</h2><p>此时晏老师：“多出点文件 I/O 的题，难死这帮小崽子~”</p><p>理论上来说，你会 I/O 重定向之后就可以做所有文件 I/O 的题了，大不了都用 scanf 和 gets 呗。</p><p>但是有时候让你既从标准输入读入又从文件读入~文件 I/O 也不能不会是吧。</p><p>废话了这么多，终于可以讲讲你们不大清楚的 I/O 函数的用法了：</p><h3 id="31-文件指针"><a class="markdownIt-Anchor" href="#31-文件指针"></a> 3.1 文件指针</h3><p>要熟练使用文件 I/O，要过的第一关就是<strong>文件指针</strong>，它相当于给你的文件贴一个标签，让后当你需要调用函数的时候要把文件指针作为输入变量传进去，这样才能对你的文件进行操作：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs C">FILE * file_in = fopen(<span class="hljs-string">&quot;in.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>);<br>FILE * file_out = fopen(<span class="hljs-string">&quot;out.txt&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>);<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * FILE * 是一个变量类型，代表文件的指针</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 后面的 file_in 和 file_out 是你自己起的变量名</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * fopen(&quot;...&quot;, &quot;r/w&quot;); 是打开文件的函数，前面的文件名，后面是打开模式读或写</span><br><span class="hljs-comment"> *                      表示将一个文件以某种方式打开，返回该文件的指针</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 以后你就可以把 file_in 或 file_out 传进其它函数里了</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><h3 id="32-io-函数"><a class="markdownIt-Anchor" href="#32-io-函数"></a> 3.2 I/O 函数</h3><h4 id="321-输入函数"><a class="markdownIt-Anchor" href="#321-输入函数"></a> 3.2.1 输入函数：</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;...&quot;</span>, ...);<br><span class="hljs-built_in">fscanf</span>(file, <span class="hljs-string">&quot;...&quot;</span>, ...); <span class="hljs-comment">// file 是前面用 &quot;r&quot; 模式打开的文件指针</span><br></code></pre></td></tr></table></figure><p>在以下两个条件下，这两个函数是我最推荐大家使用的。</p><ul><li>需要从输入中获取数字（直接 %d 或 %lf）</li><li>需要逐词对字符串处理（不含空格）</li></ul><p>如果题不是要求类似于“读入若干行，<strong>行内有空格</strong>，对每行输出一个balabala……”这种，真心不建议用 gets 和fgets。因为 gets 很可能会产生莫名其妙的 bug（我曾解释过），fgets 不好记也不好用。</p><p>所以比如“单词统计”等等这类题，只要不怕空格，还请选择 scanf/fscanf</p><hr /><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;...&quot;</span>, ...);<br><span class="hljs-built_in">fprintf</span>(file, <span class="hljs-string">&quot;...&quot;</span>, ...);<br></code></pre></td></tr></table></figure><p>这俩大家应该挺熟了，后面那个 fprintf 就是把输出目标换成 “w” 模式的文件指针就行了。</p><p>介绍两个新朋友：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c">len = fread(str, <span class="hljs-keyword">sizeof</span>(str[<span class="hljs-number">0</span>]), MAX, file);<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 这个函数的作用是从 &quot;r&quot; 模式的 file 文件里把整个文件一股脑读到 str 里</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * str  是要接受的字符串，尽量开大点，一定要初始化为全 0，这个函数不保证在字符串末尾补 &#x27;\0&#x27;</span><br><span class="hljs-comment"> * sizeof(str[0]) 实际上就是一个字符的大小，表示读的单位大小</span><br><span class="hljs-comment"> * MAX  读的最大长度，尽量跟 str[] 的容量一样大，要大于所给数据范围</span><br><span class="hljs-comment"> *      如果读到文件末尾还不到 MAX 则返回 str 的长度</span><br><span class="hljs-comment"> *      如果读到 MAX 则返回 MAX</span><br><span class="hljs-comment"> * file 文件指针</span><br><span class="hljs-comment"> */</span><br><br>fwrite(str, <span class="hljs-keyword">sizeof</span>(str[<span class="hljs-number">0</span>]), len, file);<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 这个函数的作用是把 str 一股脑写进 &quot;w&quot; 模式的 file 里</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * str  是要写的字符串</span><br><span class="hljs-comment"> * sizeof(str[0]) 解释同上</span><br><span class="hljs-comment"> * len  是想写的长度，也就是 str 的长度</span><br><span class="hljs-comment"> * file 想写的文件指针</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><p>文件加密一题中，需要读取一整段文本，这种情况下，用这两个函数是最好的选择。</p><hr /><p>剩下的不太常用我大概说一下。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c">gets(str);              <span class="hljs-comment">// 读到换行就停止，读进来的字符串不含换行，可能引起神秘 bug</span><br>fgets(str, MAX, file);  <span class="hljs-comment">/* 读到换行 / 文件末尾 / 超过 MAX - 1 时停止读入</span><br><span class="hljs-comment">                         * 特性：str 中保留读到的换行并自动在末尾添加 &#x27;\0&#x27; */</span><br></code></pre></td></tr></table></figure><p>上面这俩函数如果想用的话还是建议好好研究一下特性小心一点使用，挺容易出 bug 的。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c">ch = getchar();         <span class="hljs-comment">// 从标准输入读入单个字符，毒瘤，别用</span><br>                        <span class="hljs-comment">// 建议想用的时候用 scanf(&quot;%s&quot;, str); 读字符串来避免 bug</span><br><br>ch = fgetc(file)        <span class="hljs-comment">// 从文件中读单个字符，注意的一点是:</span><br>                        <span class="hljs-comment">// 请把 ch 定义成 int 类型，因为它读到文件末尾会返回 EOF</span><br>                        <span class="hljs-comment">// 而 char 类型不能储存 -1 导致无法识别文件末尾</span><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">putchar</span>(ch);            <span class="hljs-comment">// 向标准输出写一个字符，等同于 printf(&quot;%c&quot;, ch);</span><br>fputc(ch, file);        <span class="hljs-comment">// 向文件写一个 ch，等同于 fprintf(file, &quot;%c&quot;, ch);</span><br></code></pre></td></tr></table></figure><hr /><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>打开“此电脑”，在上面一栏找到“查看”按钮，点进去，找到“文件后缀名”，看是否打勾，如果没有请务必打上。<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>教程系列</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C语言</tag>
      
      <tag>I/O</tag>
      
      <tag>BUAA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++算法板子积累</title>
    <link href="/2022/01/24/C-%E7%AE%97%E6%B3%95%E6%9D%BF%E5%AD%90%E7%A7%AF%E7%B4%AF/"/>
    <url>/2022/01/24/C-%E7%AE%97%E6%B3%95%E6%9D%BF%E5%AD%90%E7%A7%AF%E7%B4%AF/</url>
    
    <content type="html"><![CDATA[<h2 id="hello"><a class="markdownIt-Anchor" href="#hello"></a> Hello</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cctype&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stack&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;Hello world!&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="标准库"><a class="markdownIt-Anchor" href="#标准库"></a> 标准库</h2><h3 id="algorithm"><a class="markdownIt-Anchor" href="#algorithm"></a> &lt;algorithm&gt;</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-built_in">__gcd</span>(<span class="hljs-selector-tag">a</span>, b)                    <span class="hljs-comment">// 求两个数的最大公因数</span><br><span class="hljs-built_in">__builtin_popcount</span>(a)        <span class="hljs-comment">// 求 int 的二进制里多少个 1</span><br><br><span class="hljs-function"><span class="hljs-title">is_sorted</span><span class="hljs-params">(a, a + n)</span></span>        <span class="hljs-comment">// 是否升序</span><br><span class="hljs-function"><span class="hljs-title">is_sorted_until</span><span class="hljs-params">(a, a + n)</span></span><span class="hljs-comment">// 到哪里是升序</span><br><span class="hljs-function"><span class="hljs-title">sort</span><span class="hljs-params">(a, a + n)</span></span>    <span class="hljs-comment">// 不稳定排序(默认升序)</span><br><span class="hljs-function"><span class="hljs-title">sort</span><span class="hljs-params">(a, a + n, greater&lt;int&gt;()</span></span>)<span class="hljs-comment">// 降序排序</span><br><span class="hljs-function"><span class="hljs-title">stable_sort</span><span class="hljs-params">(a, a + n)</span></span><span class="hljs-comment">// 稳定排序</span><br><span class="hljs-function"><span class="hljs-title">nth_element</span><span class="hljs-params">(a, a + k, a + n)</span></span><span class="hljs-comment">// 将第 k 大元素放到 a[k]</span><br><span class="hljs-function"><span class="hljs-title">unique</span><span class="hljs-params">(begin, end)</span></span>    <span class="hljs-comment">// 对有序数组去重，返回末尾地址</span><br><br><span class="hljs-function"><span class="hljs-title">max</span><span class="hljs-params">(a, b)</span></span>        <span class="hljs-comment">// 返回较大值</span><br><span class="hljs-function"><span class="hljs-title">min</span><span class="hljs-params">(a, b)</span></span>        <span class="hljs-comment">// 返回较小值</span><br><span class="hljs-function"><span class="hljs-title">max_element</span><span class="hljs-params">(a, a + n)</span></span><span class="hljs-comment">// 返回最大值位置</span><br><span class="hljs-function"><span class="hljs-title">min_element</span><span class="hljs-params">(a, a + n)</span></span><span class="hljs-comment">// 返回最小值位置</span><br><br><span class="hljs-function"><span class="hljs-title">lower_bound</span><span class="hljs-params">(a, a + n, key)</span></span><span class="hljs-comment">// 返回第一个不小于 key 的元素的位置</span><br><span class="hljs-function"><span class="hljs-title">upper_bound</span><span class="hljs-params">(a, a + n, key)</span></span><span class="hljs-comment">// 返回第一个大于 key 的元素的位置</span><br><span class="hljs-function"><span class="hljs-title">binary_search</span><span class="hljs-params">(a, a + n, key)</span></span><span class="hljs-comment">// 二分查找是否存在</span><br><br><span class="hljs-function"><span class="hljs-title">is_heap</span><span class="hljs-params">(a, a + n)</span></span>    <span class="hljs-comment">// 判断是否为大顶堆</span><br><span class="hljs-function"><span class="hljs-title">is_heap_until</span><span class="hljs-params">(a, a + n)</span></span>    <span class="hljs-comment">// 到哪里是大顶堆</span><br><span class="hljs-function"><span class="hljs-title">make_heap</span><span class="hljs-params">(a, a + n)</span></span><span class="hljs-comment">// 区间建堆</span><br><span class="hljs-function"><span class="hljs-title">push_heap</span><span class="hljs-params">(a, a + n)</span></span><span class="hljs-comment">// 末尾元素入堆并调整，与 push_back() 配合</span><br><span class="hljs-function"><span class="hljs-title">pop_heap</span><span class="hljs-params">(a, a + n)</span></span>    <span class="hljs-comment">// 堆顶移到末尾并调整，与 pop_back() 配合</span><br><span class="hljs-function"><span class="hljs-title">sort_heap</span><span class="hljs-params">(a, a + n)</span></span><span class="hljs-comment">// 升序堆排序</span><br><br><span class="hljs-function"><span class="hljs-title">is_permutation</span><span class="hljs-params">()</span></span>    <span class="hljs-comment">// 两个序列是否互为另一个的排序</span><br><span class="hljs-function"><span class="hljs-title">next_permutation</span><span class="hljs-params">()</span></span>    <span class="hljs-comment">// 下一个排序</span><br><span class="hljs-function"><span class="hljs-title">prev_permutation</span><span class="hljs-params">()</span></span>    <span class="hljs-comment">// 上一个排序</span><br> <br><span class="hljs-function"><span class="hljs-title">fill</span><span class="hljs-params">(a, a + n, val)</span></span><span class="hljs-comment">// 批量赋值</span><br><span class="hljs-function"><span class="hljs-title">reverse</span><span class="hljs-params">(a, a + n)</span></span>    <span class="hljs-comment">// 数组翻转</span><br></code></pre></td></tr></table></figure><h3 id="vector"><a class="markdownIt-Anchor" href="#vector"></a> &lt;vector&gt;</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs awk">v.at(k)<span class="hljs-regexp">//</span> 访问 v[k]<br>v.front()<span class="hljs-regexp">//</span> 首元素<br>v.back()<span class="hljs-regexp">//</span> 末元素<br>v.begin()<span class="hljs-regexp">//</span> 首地址(迭代器)<br>v.end()<span class="hljs-regexp">//</span> 末地址(迭代器)<br>v.empty()<span class="hljs-regexp">//</span> 是否空<br>v.size()<span class="hljs-regexp">//</span> 大小<br>v.max_size()<span class="hljs-regexp">//</span> 最大空间<br>v.clear()<span class="hljs-regexp">//</span> 清除<br>v.insert(pos, item) <span class="hljs-regexp">//</span> 在 pos(迭代器) 位置插入 item<br>v.eraze(pos)<span class="hljs-regexp">//</span> 擦除 pos(迭代器) 位置的元素<br>v.push_back(item)<span class="hljs-regexp">//</span> 末尾插入<br>v.pop_back()<span class="hljs-regexp">//</span> 末尾删除<br></code></pre></td></tr></table></figure><h3 id="queue"><a class="markdownIt-Anchor" href="#queue"></a> &lt;queue&gt;</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">/*----- queue -----*/</span><br><span class="hljs-selector-tag">q</span><span class="hljs-selector-class">.front</span>()<span class="hljs-comment">// 访问队头</span><br><span class="hljs-selector-tag">q</span><span class="hljs-selector-class">.back</span>()<span class="hljs-comment">// 访问队尾</span><br><span class="hljs-selector-tag">q</span><span class="hljs-selector-class">.empty</span>()<span class="hljs-comment">// 是否空</span><br><span class="hljs-selector-tag">q</span><span class="hljs-selector-class">.size</span>()<span class="hljs-comment">// 大小</span><br><span class="hljs-selector-tag">q</span><span class="hljs-selector-class">.push</span>(item)<span class="hljs-comment">// item 入队</span><br><span class="hljs-selector-tag">q</span><span class="hljs-selector-class">.emplace</span>(item)<span class="hljs-comment">// item 替换队尾</span><br><span class="hljs-selector-tag">q</span><span class="hljs-selector-class">.pop</span>()<span class="hljs-comment">// 出队</span><br><span class="hljs-comment">/*----- priority_queue -----*/</span><br>priority_queue&lt;int, vector&lt;int&gt;, greater&lt;int&gt;&gt; pq<br>pq<span class="hljs-selector-class">.top</span>()<span class="hljs-comment">// 访问队首</span><br>pq<span class="hljs-selector-class">.empty</span>()<span class="hljs-comment">// 优先队列是否空</span><br>pq<span class="hljs-selector-class">.size</span>()<span class="hljs-comment">// 大小</span><br>pq<span class="hljs-selector-class">.push</span>(item)<span class="hljs-comment">// 插入 item</span><br>pq<span class="hljs-selector-class">.pop</span>()<span class="hljs-comment">// 出队</span><br></code></pre></td></tr></table></figure><h3 id="stack"><a class="markdownIt-Anchor" href="#stack"></a> &lt;stack&gt;</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk">s.top()<span class="hljs-regexp">//</span> 访问栈顶<br>s.empty()<span class="hljs-regexp">//</span> 栈是否空<br>s.size()<span class="hljs-regexp">//</span> 大小<br>s.push(item)<span class="hljs-regexp">//</span> item 入栈<br>s.emplace(item)<span class="hljs-regexp">//</span> item 替换栈顶<br>s.pop()<span class="hljs-regexp">//</span> 出栈<br></code></pre></td></tr></table></figure><h3 id="set"><a class="markdownIt-Anchor" href="#set"></a> &lt;set&gt;</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-comment">/*----- set -----*/</span><br>s<span class="hljs-selector-class">.size</span>()<span class="hljs-comment">// 大小</span><br>s<span class="hljs-selector-class">.empty</span>()<span class="hljs-comment">// 是否空</span><br>s<span class="hljs-selector-class">.clear</span>()<span class="hljs-comment">// 清除</span><br>s<span class="hljs-selector-class">.insert</span>(key)<span class="hljs-comment">// 插入</span><br>s<span class="hljs-selector-class">.erase</span>(pos/key)<span class="hljs-comment">// 删除</span><br>s<span class="hljs-selector-class">.count</span>(key)<span class="hljs-comment">// 是否存在</span><br>s<span class="hljs-selector-class">.find</span>(key)<span class="hljs-comment">// 查找，成功返回位置，失败返回 s.end()</span><br><span class="hljs-comment">/*----- multiset -----*/</span><br>ms<span class="hljs-selector-class">.size</span>()<span class="hljs-comment">// 大小</span><br>ms<span class="hljs-selector-class">.empty</span>()<span class="hljs-comment">// 是否空</span><br>ms<span class="hljs-selector-class">.clear</span>()<span class="hljs-comment">// 清除</span><br>ms<span class="hljs-selector-class">.insert</span>(key)<span class="hljs-comment">// 插入</span><br>ms<span class="hljs-selector-class">.erase</span>(pos/key)<span class="hljs-comment">// 删除</span><br>ms<span class="hljs-selector-class">.count</span>(key)<span class="hljs-comment">// 计数</span><br>ms<span class="hljs-selector-class">.find</span>(key)<span class="hljs-comment">// 查找，成功返回位置，失败返回 s.end()</span><br></code></pre></td></tr></table></figure><h3 id="map"><a class="markdownIt-Anchor" href="#map"></a> &lt;map&gt;</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/*----- map -----*/</span><br><span class="hljs-regexp">/*----- mulmap -----*/</span><br></code></pre></td></tr></table></figure><h3 id="unordered_set"><a class="markdownIt-Anchor" href="#unordered_set"></a> &lt;unordered_set&gt;</h3><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">/*<span class="hljs-params">-----</span> unordered_<span class="hljs-keyword">set</span> <span class="hljs-params">-----</span>*/<br>/*<span class="hljs-params">-----</span> unordered_multiset <span class="hljs-params">-----</span>*/<br></code></pre></td></tr></table></figure><h3 id="unordered_map"><a class="markdownIt-Anchor" href="#unordered_map"></a> &lt;unordered_map&gt;</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/*----- unordered_map -----*/</span><br><span class="hljs-regexp">/*----- unordered_multimap -----*/</span><br></code></pre></td></tr></table></figure><h2 id="分治"><a class="markdownIt-Anchor" href="#分治"></a> 分治</h2><h3 id="逆序对计数"><a class="markdownIt-Anchor" href="#逆序对计数"></a> 逆序对计数</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-type">int</span> temp[<span class="hljs-number">200005</span>];<br><br><span class="hljs-function">ll <span class="hljs-title">solve</span><span class="hljs-params">(<span class="hljs-type">int</span> a[], <span class="hljs-type">int</span> left, <span class="hljs-type">int</span> right)</span></span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-type">int</span> a[<span class="hljs-number">200005</span>] = &#123;&#125;;<br>    cin &gt;&gt; n;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>        cin &gt;&gt; a[i];<br>    cout &lt;&lt; <span class="hljs-built_in">solve</span>(a, <span class="hljs-number">0</span>, n - <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-function">ll <span class="hljs-title">solve</span><span class="hljs-params">(<span class="hljs-type">int</span> a[], <span class="hljs-type">int</span> left, <span class="hljs-type">int</span> right)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (left == right)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-type">int</span> mid = (right - left) / <span class="hljs-number">2</span> + left;<br>        ll s1 = <span class="hljs-built_in">solve</span>(a, left, mid);<br>        ll s2 = <span class="hljs-built_in">solve</span>(a, mid + <span class="hljs-number">1</span>, right);<br>        ll s3 = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> i = left, j = mid + <span class="hljs-number">1</span>, k = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= right) &#123;<br>            <span class="hljs-keyword">if</span> (a[i] &lt;= a[j]) &#123;<br>                temp[left + k] = a[i];<br>                k++;<br>                i++;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                temp[left + k] = a[j];<br>                s3 += (mid - i + <span class="hljs-number">1</span>);<br>                k++;<br>                j++;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i &lt;= mid)<br>            <span class="hljs-keyword">while</span> (i &lt;= mid) &#123;<br>                temp[k + left] = a[i];<br>                k++;<br>                i++;<br>            &#125;<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-keyword">while</span> (j &lt;= right) &#123;<br>                temp[k + left] = a[j];<br>                k++;<br>                j++;<br>            &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> l = left; l &lt;= right; l++)<br>            a[l] = temp[l];<br>        <span class="hljs-keyword">return</span> s1 + s2 + s3;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="动态规划"><a class="markdownIt-Anchor" href="#动态规划"></a> 动态规划</h2><h3 id="01-背包"><a class="markdownIt-Anchor" href="#01-背包"></a> 01 背包</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs Cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX_NUM 1005   <span class="hljs-comment">//物品数量</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX_CAP 100005 <span class="hljs-comment">//最大容量</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br>ll dp[MAX_CAP];<br><span class="hljs-type">int</span> v[MAX_NUM];<br><span class="hljs-type">int</span> w[MAX_NUM];<br><br><span class="hljs-function">ll <span class="hljs-title">backBag</span><span class="hljs-params">(ll Bag[], <span class="hljs-type">int</span> *value, <span class="hljs-type">int</span> *weight, <span class="hljs-type">int</span> num, <span class="hljs-type">int</span> cap)</span> </span>&#123;<br>    <span class="hljs-comment">// dp数组，价值，重量，容量</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= cap; i++)<br>        Bag[i] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= num; i++)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = cap; j &gt;= weight[i]; j--) <span class="hljs-comment">//倒着dp</span><br>            Bag[j] = <span class="hljs-built_in">max</span>(Bag[j - weight[i]] + value[i], Bag[j]);<br>    <span class="hljs-keyword">return</span> Bag[cap];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n, k;<br>    cin &gt;&gt; n &gt;&gt; k;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        cin &gt;&gt; v[i] &gt;&gt; w[i];<br>    cout &lt;&lt; <span class="hljs-built_in">backBag</span>(dp, v, w, n, k);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="完全背包"><a class="markdownIt-Anchor" href="#完全背包"></a> 完全背包</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs Cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX_NUM 10005    <span class="hljs-comment">//物品数量</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX_CAP 10000005 <span class="hljs-comment">//最大容量</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br>ll dp[MAX_CAP];<br><span class="hljs-type">int</span> v[MAX_NUM];<br><span class="hljs-type">int</span> w[MAX_NUM];<br><br><span class="hljs-function">ll <span class="hljs-title">backBag</span><span class="hljs-params">(ll Bag[], <span class="hljs-type">int</span> *value, <span class="hljs-type">int</span> *weight, <span class="hljs-type">int</span> num, <span class="hljs-type">int</span> cap)</span> </span>&#123;<br>    <span class="hljs-comment">// dp数组，价值，重量，容量</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= cap; i++)<br>        Bag[i] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= num; i++)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = weight[i]; j &lt;= cap; j++) <span class="hljs-comment">//正着dp</span><br>            Bag[j] = <span class="hljs-built_in">max</span>(Bag[j - weight[i]] + value[i], Bag[j]);<br>    <span class="hljs-keyword">return</span> Bag[cap];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n, k;<br>    cin &gt;&gt; k &gt;&gt; n;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        cin &gt;&gt; w[i] &gt;&gt; v[i];<br>    cout &lt;&lt; <span class="hljs-built_in">backBag</span>(dp, v, w, n, k);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="分组背包"><a class="markdownIt-Anchor" href="#分组背包"></a> 分组背包</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs Cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MAX = <span class="hljs-number">1005</span>;<br><br><span class="hljs-keyword">struct</span> &#123;<br>    <span class="hljs-type">int</span> cnt;<br>    ll ID[MAX];<br>&#125; group[MAX];   <span class="hljs-comment">//用一个结构体来存储每一组的物品编号</span><br><br>ll dp[MAX];<br>ll val[MAX];<br>ll weight[MAX];<br><br><span class="hljs-function">ll <span class="hljs-title">group_bag</span><span class="hljs-params">(<span class="hljs-type">int</span> cap, <span class="hljs-type">int</span> max_group)</span></span>;<br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">//    freopen(&quot;a.in&quot;, &quot;r&quot;, stdin);</span><br><span class="hljs-comment">//    freopen(&quot;a.out&quot;, &quot;w&quot;, stdout);</span><br>    <span class="hljs-type">int</span> n, m;<br>    cin &gt;&gt; m &gt;&gt; n;<br>    <span class="hljs-type">int</span> a, b, k, max_group = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        cin &gt;&gt; a &gt;&gt; b &gt;&gt; k;<br>        weight[i] = a;<br>        val[i] = b;<br>        group[k].ID[group[k].cnt++] = i;<br>        max_group = <span class="hljs-built_in">max</span>(max_group, k);<br>    &#125;<br>    cout &lt;&lt; <span class="hljs-built_in">group_bag</span>(m, max_group);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function">ll <span class="hljs-title">group_bag</span><span class="hljs-params">(<span class="hljs-type">int</span> cap, <span class="hljs-type">int</span> max_group)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= max_group; i++)            <span class="hljs-comment">// 第一层组循环</span><br>        <span class="hljs-keyword">for</span> (ll j = cap; j &gt;= <span class="hljs-number">0</span>; j--)               <span class="hljs-comment">// 第二层容量倒着循环</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; group[i].cnt; k++)  <span class="hljs-comment">// 第三层组内循环</span><br>                <span class="hljs-keyword">if</span> (j &gt;= weight[group[i].ID[k]])<br>                    dp[j] = <span class="hljs-built_in">max</span>(dp[j],<br>                                dp[j - weight[group[i].ID[k]]] + val[group[i].ID[k]]);<br>    <span class="hljs-keyword">return</span> dp[cap];<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="最大子列和"><a class="markdownIt-Anchor" href="#最大子列和"></a> 最大子列和</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs Cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX 1000005</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ll long long</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> a[MAX];<br><br><span class="hljs-function">ll <span class="hljs-title">maxSubArray</span><span class="hljs-params">(<span class="hljs-type">int</span> *array, <span class="hljs-type">int</span> n)</span> </span>&#123;<br>    ll Max = <span class="hljs-number">-0x3f3f3f3f3f3f3f3f</span>;<br>    ll sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = n - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>        <span class="hljs-keyword">if</span> (sum &lt;= <span class="hljs-number">0</span>)<br>            sum = array[i];<br>        <span class="hljs-keyword">else</span><br>            sum += array[i];<br>        Max = <span class="hljs-built_in">max</span>(sum, Max);<br>    &#125;<br>    <span class="hljs-keyword">return</span> Max;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>        cin &gt;&gt; a[i];<br>    cout &lt;&lt; <span class="hljs-built_in">maxSubArray</span>(a, n);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="lcs-最长公共子序列"><a class="markdownIt-Anchor" href="#lcs-最长公共子序列"></a> LCS 最长公共子序列</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs Cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX 1005</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Tab</span>&#123;<br>    <span class="hljs-type">int</span> x, y;<br>&#125; trac[MAX][MAX];<br><br><span class="hljs-type">int</span> lcs[MAX][MAX];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print_lcs</span><span class="hljs-params">(string str, <span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span></span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> k;<br>    cin &gt;&gt; k;<br>    string sa, sb;<br>    cin &gt;&gt; sa &gt;&gt; sb;<br>    <span class="hljs-type">int</span> la = (<span class="hljs-type">int</span>)sa.<span class="hljs-built_in">length</span>();<br>    <span class="hljs-type">int</span> lb = (<span class="hljs-type">int</span>)sb.<span class="hljs-built_in">length</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= la; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= lb; j++) &#123;<br>            <span class="hljs-keyword">if</span> (sa[i - <span class="hljs-number">1</span>] == sb[j - <span class="hljs-number">1</span>]) &#123;<br>                lcs[i][j] = lcs[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>] + <span class="hljs-number">1</span>;<br>                trac[i][j] = &#123;i - <span class="hljs-number">1</span>, j - <span class="hljs-number">1</span>&#125;;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (lcs[i - <span class="hljs-number">1</span>][j] &gt;= lcs[i][j - <span class="hljs-number">1</span>]) &#123;<br>                lcs[i][j] = lcs[i - <span class="hljs-number">1</span>][j];<br>                trac[i][j] = &#123;i - <span class="hljs-number">1</span>, j&#125;;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                lcs[i][j] = lcs[i][j - <span class="hljs-number">1</span>];<br>                trac[i][j] = &#123;i, j - <span class="hljs-number">1</span>&#125;;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(k == <span class="hljs-number">0</span>)<br>        cout &lt;&lt; lcs[la][lb];<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-built_in">print_lcs</span>(sa, la, lb);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print_lcs</span><span class="hljs-params">(string str, <span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(i == <span class="hljs-number">0</span> || j == <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> ;<br>    <span class="hljs-keyword">if</span>(trac[i][j].x == i - <span class="hljs-number">1</span> &amp;&amp; trac[i][j].y == j - <span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-built_in">print_lcs</span>(str, i - <span class="hljs-number">1</span>, j - <span class="hljs-number">1</span>);<br>        cout &lt;&lt; str[i - <span class="hljs-number">1</span>];<br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(trac[i][j].x == i - <span class="hljs-number">1</span> &amp;&amp; trac[i][j].y == j)<br>        <span class="hljs-built_in">print_lcs</span>(str, i - <span class="hljs-number">1</span>, j);<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-built_in">print_lcs</span>(str, i, j - <span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="最小编辑距离"><a class="markdownIt-Anchor" href="#最小编辑距离"></a> 最小编辑距离</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs Cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX 2005</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">min3</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span> c)</span> </span>&#123;<br>    <span class="hljs-type">int</span> m = a;<br>    <span class="hljs-keyword">if</span> (b &lt; m)<br>        m = b;<br>    <span class="hljs-keyword">if</span> (c &lt; m)<br>        <span class="hljs-keyword">return</span> c;<br>    <span class="hljs-keyword">return</span> m;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">minDistance</span><span class="hljs-params">(string word1, string word2)</span> </span>&#123;<br>    <span class="hljs-type">int</span> dp[<span class="hljs-number">2</span>][MAX] = &#123;&#125;;<br>    <span class="hljs-type">int</span> l1 = word1.<span class="hljs-built_in">length</span>();<br>    <span class="hljs-type">int</span> l2 = word2.<span class="hljs-built_in">length</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt;= l2; j++)<br>        dp[<span class="hljs-number">0</span>][j] = j;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= l1; i++) &#123;<br>        dp[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>] = i;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= l2; j++)<br>            <span class="hljs-keyword">if</span> (word1[i - <span class="hljs-number">1</span>] == word2[j - <span class="hljs-number">1</span>])<br>                dp[<span class="hljs-number">1</span>][j] = dp[<span class="hljs-number">0</span>][j - <span class="hljs-number">1</span>];<br>            <span class="hljs-keyword">else</span><br>                dp[<span class="hljs-number">1</span>][j] = <span class="hljs-built_in">min3</span>(dp[<span class="hljs-number">0</span>][j - <span class="hljs-number">1</span>], dp[<span class="hljs-number">0</span>][j], dp[<span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>]) + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt;= l2; j++)<br>            dp[<span class="hljs-number">0</span>][j] = dp[<span class="hljs-number">1</span>][j];<br>    &#125;<br>    <span class="hljs-keyword">return</span> dp[<span class="hljs-number">0</span>][l2];<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    string a;<br>    string b;<br>    cin &gt;&gt; a &gt;&gt; b;<br>    cout &lt;&lt; <span class="hljs-built_in">minDistance</span>(a, b);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="最长单调子序列"><a class="markdownIt-Anchor" href="#最长单调子序列"></a> 最长单调子序列</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 严格单调递增子列的长度</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">lsrsa</span><span class="hljs-params">(<span class="hljs-type">const</span> vector&lt;<span class="hljs-type">int</span>&gt; &amp;a)</span> </span>&#123;<br>    vector&lt;<span class="hljs-type">int</span>&gt; sa;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> x: a) &#123;<br>        <span class="hljs-keyword">if</span> (sa.<span class="hljs-built_in">empty</span>() || x &gt; sa.<span class="hljs-built_in">back</span>())<br>            sa.<span class="hljs-built_in">push_back</span>(x);<br>        <span class="hljs-keyword">else</span><br>            *<span class="hljs-built_in">lower_bound</span>(sa.<span class="hljs-built_in">begin</span>(), sa.<span class="hljs-built_in">end</span>(), x) = x;<br>    &#125;<br>    <span class="hljs-keyword">return</span> (<span class="hljs-type">int</span>) sa.<span class="hljs-built_in">size</span>();<br>&#125;<br><span class="hljs-comment">// 单调不减子列的长度</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">lrsa</span><span class="hljs-params">(<span class="hljs-type">const</span> vector&lt;<span class="hljs-type">int</span>&gt; &amp;a)</span> </span>&#123;<br>    vector&lt;<span class="hljs-type">int</span>&gt; sa;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> x: a) &#123;<br>        <span class="hljs-keyword">if</span> (sa.<span class="hljs-built_in">empty</span>() || x &gt;= sa.<span class="hljs-built_in">back</span>())<br>            sa.<span class="hljs-built_in">push_back</span>(x);<br>        <span class="hljs-keyword">else</span><br>            *<span class="hljs-built_in">upper_bound</span>(sa.<span class="hljs-built_in">begin</span>(), sa.<span class="hljs-built_in">end</span>(), x) = x;<br>    &#125;<br>    <span class="hljs-keyword">return</span> (<span class="hljs-type">int</span>) sa.<span class="hljs-built_in">size</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="图算法"><a class="markdownIt-Anchor" href="#图算法"></a> 图算法</h2><h3 id="链式前向星"><a class="markdownIt-Anchor" href="#链式前向星"></a> 链式前向星</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Cpp"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Edge</span>&#123;<br>    <span class="hljs-type">int</span> to, w, next;<span class="hljs-comment">//终点，权值，前驱</span><br>&#125; e[E_MAX];<br><br><span class="hljs-type">int</span> cnt_E = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> head[V_MAX];<span class="hljs-comment">//需要先初始化为-1</span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">intList</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span>&#123;<br>    <span class="hljs-built_in">memset</span>(head, <span class="hljs-number">-1</span>, <span class="hljs-built_in">sizeof</span>(head));<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">addEdge</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y, <span class="hljs-type">int</span> w)</span></span>&#123;<br>    e[cnt_E].to = y;                  <span class="hljs-comment">//保存终点</span><br>    e[cnt_E].next = head[x];         <span class="hljs-comment">//添加链接</span><br>    head[x] = cnt++;<span class="hljs-comment">//更新表头</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="dijkstra-最短路标准版"><a class="markdownIt-Anchor" href="#dijkstra-最短路标准版"></a> Dijkstra 最短路（标准版）</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs Cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> V_MAX 100005</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> INF 0x3f3f3f3f3f3f3f3f</span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Edge</span> &#123;<br>    <span class="hljs-type">int</span> to;<br>    ll weight;<br>&#125;;<br><br>vector&lt;Edge&gt; e[V_MAX];<br>ll dis[V_MAX];<br><span class="hljs-type">bool</span> vis[V_MAX];<br><span class="hljs-type">int</span> n, m;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">addEdge</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> v, ll w)</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dijkstra</span><span class="hljs-params">(<span class="hljs-type">int</span> s)</span></span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> s;<br>    cin &gt;&gt; n &gt;&gt; m &gt;&gt; s;<br>    <span class="hljs-type">int</span> x, y;<br>    ll w;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; ++i) &#123;<br>        cin &gt;&gt; x &gt;&gt; y &gt;&gt; w;<br>        <span class="hljs-built_in">addEdge</span>(x, y, w);<br>    &#125;<br>    <span class="hljs-built_in">dijkstra</span>(s);<br>    <span class="hljs-comment">// 最短路保存在 dis 中</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        <span class="hljs-keyword">if</span> (dis[i] == INF)<br>            cout &lt;&lt; <span class="hljs-number">-1</span> &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>        <span class="hljs-keyword">else</span><br>            cout &lt;&lt; dis[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">addEdge</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> v, ll w)</span> </span>&#123;<br>    e[u].<span class="hljs-built_in">push_back</span>(&#123;v, w&#125;);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dijkstra</span><span class="hljs-params">(<span class="hljs-type">int</span> s)</span> </span>&#123;<br>    <span class="hljs-built_in">memset</span>(dis, <span class="hljs-number">0x3f</span>, <span class="hljs-built_in">sizeof</span>(dis));<br>    dis[s] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        <span class="hljs-type">int</span> u = <span class="hljs-number">0</span>;<br>        ll mind = INF;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j++)<br>            <span class="hljs-keyword">if</span> (!vis[j] &amp;&amp; dis[j] &lt; mind) &#123;<br>                u = j;<br>                mind = dis[j];<br>            &#125;<br>        vis[u] = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> ed: e[u]) &#123;<br>            <span class="hljs-type">int</span> v = ed.to;<br>            ll w = ed.weight;<br>            <span class="hljs-keyword">if</span> (dis[v] &gt; dis[u] + w)<br>                dis[v] = dis[u] + w;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="dijkstra-最短路堆优化"><a class="markdownIt-Anchor" href="#dijkstra-最短路堆优化"></a> Dijkstra 最短路（堆优化）</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span>  V_MAX 100005</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> INF 0x3f3f3f3f3f3f3f3f</span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Edge</span> &#123;<br>    <span class="hljs-type">int</span> to;<br>    ll w;<br>&#125;;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Node</span> &#123;<br>    ll dis;<br>    <span class="hljs-type">int</span> u;<br>    <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>&gt;(<span class="hljs-type">const</span> Node &amp;b) <span class="hljs-type">const</span> &#123;<span class="hljs-keyword">return</span> dis &gt; b.dis; &#125;<br>&#125;;<br><br>vector&lt;Edge&gt; e[V_MAX];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">addEdge</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> v, ll w)</span> </span>&#123;<br>    e[u].<span class="hljs-built_in">push_back</span>(&#123;v, w&#125;);<br>&#125;<br><br><span class="hljs-function">vector&lt;ll&gt; <span class="hljs-title">dijkstra</span><span class="hljs-params">(<span class="hljs-type">int</span> s)</span> </span>&#123;<br>    priority_queue&lt;Node, vector&lt;Node&gt;, greater&lt;Node&gt;&gt; q;<br>    <span class="hljs-function">vector&lt;ll&gt; <span class="hljs-title">dis</span><span class="hljs-params">(V_MAX)</span></span>;<br>    <span class="hljs-built_in">fill</span>(dis.<span class="hljs-built_in">begin</span>(),  dis.<span class="hljs-built_in">end</span>(), INF);<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">bool</span>&gt; <span class="hljs-title">vis</span><span class="hljs-params">(V_MAX)</span></span>;<br>    dis[s] = <span class="hljs-number">0</span>;<br>    q.<span class="hljs-built_in">push</span>(&#123;<span class="hljs-number">0</span>, s&#125;);<br>    <span class="hljs-keyword">while</span> (!q.<span class="hljs-built_in">empty</span>())&#123;<br>        <span class="hljs-type">int</span> u = q.<span class="hljs-built_in">top</span>().u;<br>        q.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-keyword">if</span>(vis[u])<span class="hljs-keyword">continue</span>;<br>        vis[u] = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> ed : e[u])&#123;<br>            <span class="hljs-type">int</span> v = ed.to;<br>            ll w = ed.w;<br>            <span class="hljs-keyword">if</span>(dis[v] &gt; dis[u] + w)&#123;<br>                dis[v] = dis[u] + w;<br>                q.<span class="hljs-built_in">push</span>(&#123;dis[v], v&#125;);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> dis;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n, m;<br>    <span class="hljs-type">int</span> s;<br>    cin &gt;&gt; n &gt;&gt; m &gt;&gt; s;<br>    <span class="hljs-type">int</span> x, y, w;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++) &#123;<br>        cin &gt;&gt; x &gt;&gt; y &gt;&gt; w;<br>        <span class="hljs-built_in">addEdge</span>(x, y, w);<br>    &#125;<br>    vector&lt;ll&gt; dis = <span class="hljs-built_in">dijkstra</span>(s);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        cout &lt;&lt; dis[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="floyd-最短路"><a class="markdownIt-Anchor" href="#floyd-最短路"></a> Floyd 最短路</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs Cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> V_MAX 510<span class="hljs-comment">// 结点数</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> INF 0x3f3f3f3f3f3f3f3f</span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br>ll f[V_MAX][V_MAX];<span class="hljs-comment">// 邻接矩阵存图</span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n, m, p;<br>    ll x, y, w;<br>    cin &gt;&gt; n &gt;&gt; m &gt;&gt; p;<br>    <span class="hljs-keyword">for</span> (x = <span class="hljs-number">1</span>; x &lt;= n; x++)<br>        <span class="hljs-keyword">for</span> (y = <span class="hljs-number">1</span>; y &lt;= n; y++)<br>            f[x][y] = INF;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        f[i][i] = <span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-comment">/*-----初始化部分-----*/</span><br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++) &#123;<br>        cin &gt;&gt; x &gt;&gt; y &gt;&gt; w;<br>        <span class="hljs-keyword">if</span> (w &lt; f[x][y])<span class="hljs-comment">// 考虑重边的情况</span><br>            f[x][y] = w;<br>    &#125;<br>    <br>    <span class="hljs-comment">/*-----读入-----*/</span><br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">1</span>; k &lt;= n; k++)<br>        <span class="hljs-keyword">for</span> (x = <span class="hljs-number">1</span>; x &lt;= n; x++)<br>            <span class="hljs-keyword">for</span> (y = <span class="hljs-number">1</span>; y &lt;= n; y++)<br>                f[x][y] = <span class="hljs-built_in">min</span>(f[x][y], f[x][k] + f[k][y]);<br>    <br>    <span class="hljs-comment">/*----- Floyd -----*/</span><br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; p; i++) &#123;<br>        cin &gt;&gt; x &gt;&gt; y;<br>        <span class="hljs-keyword">if</span> (f[x][y] != INF)<br>            cout &lt;&lt; f[x][y] &lt;&lt; endl;<br>        <span class="hljs-keyword">else</span><br>            cout &lt;&lt; <span class="hljs-string">&quot;-1&quot;</span> &lt;&lt; endl;<br>    &#125;<br>    <br>    <span class="hljs-comment">/*-----输出-----*/</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="kruskal-最小生成树"><a class="markdownIt-Anchor" href="#kruskal-最小生成树"></a> Kruskal 最小生成树</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs Cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> V_MAX 300005</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> E_MAX 500005</span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Edge</span> &#123;<br>    <span class="hljs-type">int</span> x, y, w;<br>    <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-type">const</span> Edge &amp;b) <span class="hljs-type">const</span> &#123; <span class="hljs-keyword">return</span> w &lt; b.w; &#125;<br>&#125; e[E_MAX];<br><br><span class="hljs-type">int</span> v[V_MAX];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span>;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isUnion</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Union</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span></span>;<span class="hljs-comment">//合并</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">makeSet</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span>;<span class="hljs-comment">//初始化并查集</span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n, m;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-built_in">makeSet</span>(n);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++)<br>        cin &gt;&gt; e[i].x &gt;&gt; e[i].y &gt;&gt; e[i].w;<br>    <span class="hljs-built_in">sort</span>(e, e + m);<br>    <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br>    ll sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; cnt &lt; n - <span class="hljs-number">1</span>; i++)&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">isUnion</span>(e[i].x, e[i].y))<br>            <span class="hljs-keyword">continue</span>;<br>        cnt++;<br>        sum += e[i].w;<br>        <span class="hljs-built_in">Union</span>(e[i].x, e[i].y);<br>    &#125;<br>    cout &lt;&lt; sum;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">makeSet</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        v[i] = i;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (v[x] == x)<br>        <span class="hljs-keyword">return</span> x;<br>    <span class="hljs-keyword">return</span> v[x] = <span class="hljs-built_in">Find</span>(v[x]);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isUnion</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-built_in">Find</span>(x) == <span class="hljs-built_in">Find</span>(y); &#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Union</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> </span>&#123; v[<span class="hljs-built_in">Find</span>(y)] = <span class="hljs-built_in">Find</span>(x); &#125;<br></code></pre></td></tr></table></figure><h3 id="kahn-拓扑排序"><a class="markdownIt-Anchor" href="#kahn-拓扑排序"></a> Kahn 拓扑排序</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs Cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> E_MAX 400005</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> V_MAX 100005</span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Edge</span> &#123;<span class="hljs-comment">//链式前向星，存边的起点、终点、和前驱</span><br>    <span class="hljs-type">int</span> x, y, next;<br>&#125; e[E_MAX];<br><br><span class="hljs-type">int</span> head[V_MAX]; <span class="hljs-comment">//下标是起点的表头，存第一个边的编号，初始化为 -1</span><br><span class="hljs-type">int</span> id[V_MAX];<span class="hljs-comment">//每个点的入度</span><br><span class="hljs-type">int</span> cnt;<span class="hljs-comment">//存储的边数</span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">addEdge</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span></span>;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Kahn</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n, m, x, y;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <br>    <span class="hljs-built_in">fill</span>(head + <span class="hljs-number">1</span>, head + <span class="hljs-number">1</span> + n, <span class="hljs-number">-1</span>);<br>   <br>    <span class="hljs-comment">/*----- 初始化 -----*/</span><br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++) &#123;<br>        cin &gt;&gt; x &gt;&gt; y;<br>        <span class="hljs-built_in">addEdge</span>(x, y);<br>    &#125;<br>    <br>    <span class="hljs-comment">/*----- 读入边 -----*/</span><br>    <br>    <span class="hljs-built_in">Kahn</span>(n);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">addEdge</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> </span>&#123;<br>    e[cnt].x = x;          <span class="hljs-comment">//起点</span><br>    e[cnt].y = y;          <span class="hljs-comment">//终点</span><br>    e[cnt].next = head[x]; <span class="hljs-comment">//添加</span><br>    id[y]++;<br>    head[x] = cnt++;<span class="hljs-comment">//更新表头</span><br>&#125;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Kahn</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> </span>&#123;<br>    priority_queue&lt;<span class="hljs-type">int</span>&gt; q;<span class="hljs-comment">//优先队列</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        <span class="hljs-keyword">if</span> (id[i] == <span class="hljs-number">0</span>)<br>            q.<span class="hljs-built_in">push</span>(i);<span class="hljs-comment">//把入度为0的点入队</span><br>    &#125;<br>    vector&lt;<span class="hljs-type">int</span>&gt; ans;<span class="hljs-comment">//数组保存结果</span><br>    <span class="hljs-keyword">while</span> (!q.<span class="hljs-built_in">empty</span>()) &#123;<br>        <span class="hljs-type">int</span> x = q.<span class="hljs-built_in">top</span>();<span class="hljs-comment">//出队</span><br>        q.<span class="hljs-built_in">pop</span>();<br>        ans.<span class="hljs-built_in">push_back</span>(x);<br>        <span class="hljs-type">int</span> edge = head[x];<br>        <span class="hljs-keyword">while</span> (edge != <span class="hljs-number">-1</span>) &#123;<br>            id[e[edge].y]--;<span class="hljs-comment">//删除边</span><br>            <span class="hljs-keyword">if</span> (id[e[edge].y] == <span class="hljs-number">0</span>)<br>                q.<span class="hljs-built_in">push</span>(e[edge].y);<br>            edge = e[edge].next;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (ans.<span class="hljs-built_in">size</span>() == n) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> an : ans)<br>            cout &lt;&lt; an &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <br>    <span class="hljs-comment">/*----- 无环则输出并返回真 -----*/</span><br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="dinic-最大流"><a class="markdownIt-Anchor" href="#dinic-最大流"></a> Dinic 最大流</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><code class="hljs Cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> V_MAX = <span class="hljs-number">205</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> E_MAX = <span class="hljs-number">5005</span>;<br><span class="hljs-type">const</span> ll LL_INF = <span class="hljs-number">0x3f3f3f3f3f3f3f3f</span>;<br><br>ll max_stream = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> cnt_E = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> n, m, s, t;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Edge</span> &#123;<br>    <span class="hljs-type">int</span> to;<br>    <span class="hljs-type">int</span> nxt;<br>    ll val;<br>&#125; e[E_MAX * <span class="hljs-number">2</span>];<br><br><span class="hljs-type">int</span> head[V_MAX];<br><span class="hljs-type">int</span> depth[V_MAX];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">addEdge</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y, <span class="hljs-type">int</span> w)</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">read</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">bfs</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function">ll <span class="hljs-title">Dinic</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin &gt;&gt; n &gt;&gt; m &gt;&gt; s &gt;&gt; t;<br>    <br>    <span class="hljs-built_in">fill</span>(head + <span class="hljs-number">1</span>, head + <span class="hljs-number">1</span> + n, <span class="hljs-number">-1</span>);<br>    <br>    <span class="hljs-comment">/*----- 读入并初始化 -----*/</span><br>    <br>    <span class="hljs-built_in">read</span>();<br>    cout &lt;&lt; <span class="hljs-built_in">Dinic</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">addEdge</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y, <span class="hljs-type">int</span> w)</span> </span>&#123;<br>    e[cnt_E].to = y;<br>    e[cnt_E].val = w;<br>    e[cnt_E].nxt = head[x];<br>    head[x] = cnt_E++;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">read</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> u, v, w;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++) &#123;<br>        cin &gt;&gt; u &gt;&gt; v &gt;&gt; w;<br>        <span class="hljs-built_in">addEdge</span>(u, v, w);<br>        <span class="hljs-built_in">addEdge</span>(v, u, <span class="hljs-number">0</span>);<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">bfs</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">memset</span>(depth, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(depth));<br>    depth[s] = <span class="hljs-number">1</span>;<br>    queue&lt;<span class="hljs-type">int</span>&gt; q;<br>    q.<span class="hljs-built_in">push</span>(s);<br>    <span class="hljs-keyword">while</span> (!q.<span class="hljs-built_in">empty</span>()) &#123;<br>        <span class="hljs-type">int</span> u = q.<span class="hljs-built_in">front</span>();<br>        q.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = head[u]; i &gt; <span class="hljs-number">-1</span>; i = e[i].nxt) &#123;<br>            <span class="hljs-type">int</span> v = e[i].to;<br>            <span class="hljs-keyword">if</span> (e[i].val &amp;&amp; !depth[v]) &#123;<br>                depth[v] = depth[u] + <span class="hljs-number">1</span>;<br>                q.<span class="hljs-built_in">push</span>(v);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (depth[t] != <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-function">ll <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> pos, ll in)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (pos == t)<br>        <span class="hljs-keyword">return</span> in;<br>    ll out = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> u = head[pos]; u &gt; <span class="hljs-number">-1</span> &amp;&amp; in; u = e[u].nxt) &#123;<br>        <span class="hljs-type">int</span> v = e[u].to;<br>        <span class="hljs-keyword">if</span> (e[u].val &amp;&amp; depth[v] == depth[pos] + <span class="hljs-number">1</span>) &#123;<br>            ll res = <span class="hljs-built_in">dfs</span>(v, <span class="hljs-built_in">min</span>(e[u].val, in));<br>            e[u].val -= res;<br>            e[u ^ <span class="hljs-number">1</span>].val += res;<br>            in -= res;<br>            out += res;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (out == <span class="hljs-number">0</span>)<br>        depth[pos] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> out;<br>&#125;<br><span class="hljs-function">ll <span class="hljs-title">Dinic</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">bfs</span>())<br>        max_stream += <span class="hljs-built_in">dfs</span>(s, LL_INF);<br>    <span class="hljs-keyword">return</span> max_stream;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="二分图匹配"><a class="markdownIt-Anchor" href="#二分图匹配"></a> 二分图匹配</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs Cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cmath&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">pos</span> &#123;<br>    <span class="hljs-type">int</span> x, y;<br>&#125;;<br><br>vector&lt;pos&gt; left;<br>vector&lt;pos&gt; right;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">augment_path</span> &#123;<br>    <span class="hljs-comment">// 结点编号从 0 开始</span><br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; g;<br>    vector&lt;<span class="hljs-type">int</span>&gt; pa;<br>    vector&lt;<span class="hljs-type">int</span>&gt; pb;<br>    vector&lt;<span class="hljs-type">int</span>&gt; vis;<br>    <span class="hljs-type">int</span> n, m;<br>    <span class="hljs-type">int</span> dfn;<br>    <span class="hljs-type">int</span> res;<br><br>    <span class="hljs-built_in">augment_path</span>(<span class="hljs-type">int</span> _n, <span class="hljs-type">int</span> _m) : <span class="hljs-built_in">n</span>(_n), <span class="hljs-built_in">m</span>(_m) &#123;<br>        pa = <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(n, <span class="hljs-number">-1</span>);<br>        pb = <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(m, <span class="hljs-number">-1</span>);<br>        vis = <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(n);<br>        g.<span class="hljs-built_in">resize</span>(n);<br>        res = dfn = <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> from, <span class="hljs-type">int</span> to)</span> </span>&#123;<br>        g[from].<span class="hljs-built_in">push_back</span>(to);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> v)</span> </span>&#123;<br>        vis[v] = dfn;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> u: g[v])<br>            <span class="hljs-keyword">if</span> (pb[u] == <span class="hljs-number">-1</span>) &#123;<br>                pb[u] = v;<br>                pa[v] = u;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> u: g[v])<br>            <span class="hljs-keyword">if</span> (vis[pb[u]] != dfn &amp;&amp; <span class="hljs-built_in">dfs</span>(pb[u])) &#123;<br>                pa[v] = u;<br>                pb[u] = v;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            dfn++;<br>            <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>                <span class="hljs-keyword">if</span> (pa[i] == <span class="hljs-number">-1</span> &amp;&amp; <span class="hljs-built_in">dfs</span>(i))<br>                    cnt++;<br>            <span class="hljs-keyword">if</span> (cnt == <span class="hljs-number">0</span>)<br>                <span class="hljs-keyword">break</span>;<br>            res += cnt;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n, m, e;<br>    cin &gt;&gt; n &gt;&gt; m &gt;&gt; e;<br>    <span class="hljs-function">augment_path <span class="hljs-title">solver</span><span class="hljs-params">(n, m)</span></span>;<br>    <span class="hljs-type">int</span> u, v;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; e; i++)&#123;<br>        cin &gt;&gt; u &gt;&gt; v;<br>        solver.<span class="hljs-built_in">add</span>(u - <span class="hljs-number">1</span>, v - <span class="hljs-number">1</span>);<br>    &#125;<br>    cout &lt;&lt; solver.<span class="hljs-built_in">solve</span>() &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="计算几何"><a class="markdownIt-Anchor" href="#计算几何"></a> 计算几何</h2><h3 id="线段相交计数"><a class="markdownIt-Anchor" href="#线段相交计数"></a> 线段相交计数</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs Cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Point</span> &#123;<br>    <span class="hljs-type">int</span> x, y;<br><br>    Point <span class="hljs-keyword">operator</span>+(<span class="hljs-type">const</span> Point &amp;b) <span class="hljs-type">const</span> &#123;<br>        <span class="hljs-keyword">return</span> &#123;x + b.x, y + b.y&#125;;<br>    &#125;<br><br>    Point <span class="hljs-keyword">operator</span>-(<span class="hljs-type">const</span> Point &amp;b) <span class="hljs-type">const</span> &#123;<br>        <span class="hljs-keyword">return</span> &#123;x - b.x, y - b.y&#125;;<br>    &#125;<br><br>    Point <span class="hljs-keyword">operator</span>*(<span class="hljs-type">const</span> <span class="hljs-type">int</span> &amp;b) <span class="hljs-type">const</span> &#123;<br>        <span class="hljs-keyword">return</span> &#123;x * b, y * b&#125;;<br>    &#125;<br><br>    <span class="hljs-type">int</span> <span class="hljs-keyword">operator</span>^(<span class="hljs-type">const</span> Point &amp;b) <span class="hljs-type">const</span> &#123;<br>        <span class="hljs-keyword">return</span> x * b.y - y * b.x;<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Line</span> &#123;<br>    Point p;<br>    Point q;<br>&#125;;<br><br>vector&lt;Line&gt; lines;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">intersect</span><span class="hljs-params">(Line l1, Line l2)</span></span>;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">onSegment</span><span class="hljs-params">(Point point, Line line)</span></span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n, cnt = <span class="hljs-number">0</span>;<br>    cin &gt;&gt; n;<br>    <span class="hljs-type">int</span> x1, y1, x2, y2;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        cin &gt;&gt; x1 &gt;&gt; y1 &gt;&gt; x2 &gt;&gt; y2;<br>        lines.<span class="hljs-built_in">push_back</span>(&#123;&#123;x1, y1&#125;,<br>                         &#123;x2, y2&#125;&#125;);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; i; j++)<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">intersect</span>(lines[i], lines[j]))<br>                cnt++;<br>    cout &lt;&lt; cnt;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">intersect</span><span class="hljs-params">(Line l1, Line l2)</span> </span>&#123;<br>    <span class="hljs-type">int</span> d1 = (l1.q - l1.p) ^ (l2.p - l1.p);<br>    <span class="hljs-type">int</span> d2 = (l1.q - l1.p) ^ (l2.q - l1.p);<br>    <span class="hljs-type">int</span> d3 = (l2.q - l2.p) ^ (l1.p - l2.p);<br>    <span class="hljs-type">int</span> d4 = (l2.q - l2.p) ^ (l1.q - l2.p);<br>    <span class="hljs-keyword">if</span> (d1 * d2 &lt; <span class="hljs-number">0</span> &amp;&amp; d3 * d4 &lt; <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">if</span> (d1 == <span class="hljs-number">0</span> &amp;&amp; <span class="hljs-built_in">onSegment</span>(l2.p, l1))<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">if</span> (d2 == <span class="hljs-number">0</span> &amp;&amp; <span class="hljs-built_in">onSegment</span>(l2.q, l1))<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">if</span> (d3 == <span class="hljs-number">0</span> &amp;&amp; <span class="hljs-built_in">onSegment</span>(l1.p, l2))<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">if</span> (d4 == <span class="hljs-number">0</span> &amp;&amp; <span class="hljs-built_in">onSegment</span>(l1.q, l2))<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">onSegment</span><span class="hljs-params">(Point point, Line line)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (point.x &gt;= <span class="hljs-built_in">min</span>(line.p.x, line.q.x) &amp;&amp;<br>        point.x &lt;= <span class="hljs-built_in">max</span>(line.p.x, line.q.x) &amp;&amp;<br>        point.y &gt;= <span class="hljs-built_in">min</span>(line.p.y, line.q.y) &amp;&amp;<br>        point.y &lt;= <span class="hljs-built_in">max</span>(line.p.y, line.q.y))<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="graham-凸包-旋转卡壳"><a class="markdownIt-Anchor" href="#graham-凸包-旋转卡壳"></a> Graham 凸包 + 旋转卡壳</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><code class="hljs Cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MAX = <span class="hljs-number">200005</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">double</span> eps = <span class="hljs-number">1e-7</span>;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Point</span> &#123;<br>    <span class="hljs-type">double</span> x, y;<br><br>    Point <span class="hljs-keyword">operator</span>+(<span class="hljs-type">const</span> Point &amp;b) <span class="hljs-type">const</span> &#123;<br>        <span class="hljs-keyword">return</span> &#123;x + b.x, y + b.y&#125;;<br>    &#125;<br><br>    Point <span class="hljs-keyword">operator</span>-(<span class="hljs-type">const</span> Point &amp;b) <span class="hljs-type">const</span> &#123;<br>        <span class="hljs-keyword">return</span> &#123;x - b.x, y - b.y&#125;;<br>    &#125;<br><br>    <span class="hljs-type">double</span> <span class="hljs-keyword">operator</span>^(<span class="hljs-type">const</span> Point &amp;b) <span class="hljs-type">const</span> &#123;<br>        <span class="hljs-keyword">return</span> x * b.y - y * b.x;<br>    &#125;<br><br>    <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-type">const</span> Point &amp;b) <span class="hljs-type">const</span> &#123;<br>        <span class="hljs-keyword">if</span> (x != b.x)<br>            <span class="hljs-keyword">return</span> x &lt; b.x;<br>        <span class="hljs-keyword">return</span> y &lt; b.y;<br>    &#125;<br>&#125;;<br><br>Point p[MAX];<br>Point s[MAX];<br><span class="hljs-type">int</span> top;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">selMin</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">cmp</span><span class="hljs-params">(Point a, Point b)</span></span>;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">equal</span><span class="hljs-params">(<span class="hljs-type">double</span> a, <span class="hljs-type">double</span> b)</span></span>;<br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">dis</span><span class="hljs-params">(Point a, Point b)</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">graham</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span>;<br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">s_sqr</span><span class="hljs-params">(Point a, Point b, Point c)</span></span>;<br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">diameter</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>        cin &gt;&gt; p[i].x &gt;&gt; p[i].y;<br>    <span class="hljs-built_in">selMin</span>(n);<br>    <span class="hljs-built_in">sort</span>(p + <span class="hljs-number">1</span>, p + n, cmp);<br>    <span class="hljs-built_in">graham</span>(n);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.6f&quot;</span>, <span class="hljs-built_in">sqrt</span>(<span class="hljs-built_in">diameter</span>())) ;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">selMin</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> </span>&#123;<br>    Point Min = p[<span class="hljs-number">0</span>];<br>    <span class="hljs-type">int</span> IDMin = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>        <span class="hljs-keyword">if</span> (p[i] &lt; Min) &#123;<br>            Min = p[i];<br>            IDMin = i;<br>        &#125;<br>    <span class="hljs-built_in">swap</span>(p[<span class="hljs-number">0</span>], p[IDMin]);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">cmp</span><span class="hljs-params">(Point a, Point b)</span> </span>&#123;<br>    <span class="hljs-type">double</span> x = (a - p[<span class="hljs-number">0</span>]) ^ (b - p[<span class="hljs-number">0</span>]);<br>    <span class="hljs-keyword">if</span> (x &gt; <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">equal</span>(x, <span class="hljs-number">0</span>) &amp;&amp; (<span class="hljs-built_in">dis</span>(a, p[<span class="hljs-number">0</span>]) &lt; <span class="hljs-built_in">dis</span>(b, p[<span class="hljs-number">0</span>])))<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">dis</span><span class="hljs-params">(Point a, Point b)</span> </span>&#123;<br>    <span class="hljs-type">double</span> x = a.x - b.x;<br>    <span class="hljs-type">double</span> y = a.y - b.y;<br>    <span class="hljs-keyword">return</span> x * x + y * y;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">graham</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> </span>&#123;<br>    top = <span class="hljs-number">1</span>;<br>    s[<span class="hljs-number">0</span>] = p[<span class="hljs-number">0</span>];<br>    s[<span class="hljs-number">1</span>] = p[<span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt; n; i++) &#123;<br>        <span class="hljs-keyword">while</span> (top &gt; <span class="hljs-number">1</span> &amp;&amp; ((p[i] - s[top]) ^ (s[top - <span class="hljs-number">1</span>] - s[top])) &lt;= <span class="hljs-number">0</span>)<br>            top--;<br>        s[++top] = p[i];<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">s_sqr</span><span class="hljs-params">(Point a, Point b, Point c)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">fabs</span>((a - b) ^ (c - b));<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">diameter</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">double</span> diam = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> j = <span class="hljs-number">2</span>;<br>    s[++top] = s[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">if</span> (top &lt; <span class="hljs-number">3</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">dis</span>(s[<span class="hljs-number">0</span>], s[<span class="hljs-number">1</span>]);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; top - <span class="hljs-number">1</span>; i++) &#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-built_in">s_sqr</span>(s[i], s[i + <span class="hljs-number">1</span>], s[j]) &lt;<br>               <span class="hljs-built_in">s_sqr</span>(s[i], s[i + <span class="hljs-number">1</span>], s[(j + <span class="hljs-number">1</span>) % top]))<br>            j = (j + <span class="hljs-number">1</span>) % top;<br>        diam = <span class="hljs-built_in">max</span>(diam, <span class="hljs-built_in">max</span>(<span class="hljs-built_in">dis</span>(s[i], s[j]), <span class="hljs-built_in">dis</span>(s[i + <span class="hljs-number">1</span>], s[j])));<br>    &#125;<br>    <span class="hljs-keyword">return</span> diam;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">equal</span><span class="hljs-params">(<span class="hljs-type">double</span> a, <span class="hljs-type">double</span> b)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">fabs</span>(a - b) &lt; eps;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="其他算法"><a class="markdownIt-Anchor" href="#其他算法"></a> 其他算法</h2><h3 id="多项式乘法-fft"><a class="markdownIt-Anchor" href="#多项式乘法-fft"></a> 多项式乘法-FFT</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs Cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cmath&gt;</span></span><br><br><span class="hljs-type">const</span> <span class="hljs-type">double</span> Pi = <span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MAX = <span class="hljs-number">4000005</span>;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Complex</span> &#123;<br>    <span class="hljs-type">double</span> x, y;<br><br>    Complex <span class="hljs-keyword">operator</span>+(<span class="hljs-type">const</span> Complex &amp;b) <span class="hljs-type">const</span> &#123;<br>        <span class="hljs-keyword">return</span> &#123;x + b.x, y + b.y&#125;;<br>    &#125;<br><br>    Complex <span class="hljs-keyword">operator</span>-(<span class="hljs-type">const</span> Complex &amp;b) <span class="hljs-type">const</span> &#123;<br>        <span class="hljs-keyword">return</span> &#123;x - b.x, y - b.y&#125;;<br>    &#125;<br><br>    Complex <span class="hljs-keyword">operator</span>*(<span class="hljs-type">const</span> Complex &amp;b) <span class="hljs-type">const</span> &#123;<br>        <span class="hljs-keyword">return</span> &#123;x * b.x - y * b.y, x * b.y + y * b.x&#125;;<br>    &#125;<br>&#125; f[MAX], p[MAX], sav[MAX];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dft</span><span class="hljs-params">(Complex *f, <span class="hljs-type">int</span> len)</span></span>;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">idft</span><span class="hljs-params">(Complex *f, <span class="hljs-type">int</span> len)</span></span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n, m;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= n; i++)<br>        cin &gt;&gt; f[i].x;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= m; i++)<br>        cin &gt;&gt; p[i].x;<br>    <span class="hljs-keyword">for</span> (m += n, n = <span class="hljs-number">1</span>; n &lt;= m; n &lt;&lt;= <span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">dft</span>(f, n);<br>    <span class="hljs-built_in">dft</span>(p, n);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>        f[i] = f[i] * p[i];<br>    <span class="hljs-built_in">idft</span>(f, n);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= m; i++)<br>        cout &lt;&lt; (<span class="hljs-type">int</span>) (f[i].x / n + <span class="hljs-number">0.49</span>) &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dft</span><span class="hljs-params">(Complex *f, <span class="hljs-type">int</span> len)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (len == <span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">return</span>;<br>    Complex *fl = f, *fr = f + len / <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; len; k++)<br>        sav[k] = f[k];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; len / <span class="hljs-number">2</span>; k++) &#123;<br>        fl[k] = sav[k &lt;&lt; <span class="hljs-number">1</span>];<br>        fr[k] = sav[k &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>];<br>    &#125;<br>    <span class="hljs-built_in">dft</span>(fl, len / <span class="hljs-number">2</span>);<br>    <span class="hljs-built_in">dft</span>(fr, len / <span class="hljs-number">2</span>);<br>    Complex tG = &#123;<span class="hljs-built_in">cos</span>(<span class="hljs-number">2</span> * Pi / len), <span class="hljs-built_in">sin</span>(<span class="hljs-number">2</span> * Pi / len)&#125;;<br>    Complex buf = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; len / <span class="hljs-number">2</span>; k++) &#123;<br>        sav[k] = fl[k] + buf * fr[k];<br>        sav[k + len / <span class="hljs-number">2</span>] = fl[k] - buf * fr[k];<br>        buf = buf * tG;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; len; k++)<br>        f[k] = sav[k];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">idft</span><span class="hljs-params">(Complex *f, <span class="hljs-type">int</span> len)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (len == <span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">return</span>;<br>    Complex *fl = f, *fr = f + len / <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; len; k++)<br>        sav[k] = f[k];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; len / <span class="hljs-number">2</span>; k++) &#123;<br>        fl[k] = sav[k &lt;&lt; <span class="hljs-number">1</span>];<br>        fr[k] = sav[k &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>];<br>    &#125;<br>    <span class="hljs-built_in">idft</span>(fl, len / <span class="hljs-number">2</span>);<br>    <span class="hljs-built_in">idft</span>(fr, len / <span class="hljs-number">2</span>);<br>    Complex tG = &#123;<span class="hljs-built_in">cos</span>(<span class="hljs-number">2</span> * Pi / len), -<span class="hljs-built_in">sin</span>(<span class="hljs-number">2</span> * Pi / len)&#125;;<br>    Complex buf = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; len / <span class="hljs-number">2</span>; k++) &#123;<br>        sav[k] = fl[k] + buf * fr[k];<br>        sav[k + len / <span class="hljs-number">2</span>] = fl[k] - buf * fr[k];<br>        buf = buf * tG;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; len; k++)<br>        f[k] = sav[k];<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="高精度乘法-fft"><a class="markdownIt-Anchor" href="#高精度乘法-fft"></a> 高精度乘法-FFT</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><code class="hljs Cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><br><span class="hljs-type">const</span> <span class="hljs-type">double</span> Pi = <span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MAX = <span class="hljs-number">4000005</span>;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Complex</span> &#123;<br>    <span class="hljs-type">double</span> x, y;<br><br>    Complex <span class="hljs-keyword">operator</span>+(<span class="hljs-type">const</span> Complex &amp;b) <span class="hljs-type">const</span> &#123;<br>        <span class="hljs-keyword">return</span> &#123;x + b.x, y + b.y&#125;;<br>    &#125;<br><br>    Complex <span class="hljs-keyword">operator</span>-(<span class="hljs-type">const</span> Complex &amp;b) <span class="hljs-type">const</span> &#123;<br>        <span class="hljs-keyword">return</span> &#123;x - b.x, y - b.y&#125;;<br>    &#125;<br><br>    Complex <span class="hljs-keyword">operator</span>*(<span class="hljs-type">const</span> Complex &amp;b) <span class="hljs-type">const</span> &#123;<br>        <span class="hljs-keyword">return</span> &#123;x * b.x - y * b.y, x * b.y + y * b.x&#125;;<br>    &#125;<br>&#125; f[MAX], p[MAX], sav[MAX];<br><br>ll ans[MAX];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dft</span><span class="hljs-params">(Complex *f, <span class="hljs-type">int</span> len)</span></span>;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">idft</span><span class="hljs-params">(Complex *f, <span class="hljs-type">int</span> len)</span></span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">char</span> a[MAX], b[MAX];<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s%s&quot;</span>, a, b);<br>    <span class="hljs-type">int</span> n = <span class="hljs-built_in">strlen</span>(a);<br>    <span class="hljs-type">int</span> m = <span class="hljs-built_in">strlen</span>(b);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>        f[i].x = a[n - i - <span class="hljs-number">1</span>] - <span class="hljs-string">&#x27;0&#x27;</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++)<br>        p[i].x = b[m - i - <span class="hljs-number">1</span>] - <span class="hljs-string">&#x27;0&#x27;</span>;<br>    <span class="hljs-keyword">for</span> (m += n, n = <span class="hljs-number">1</span>; n &lt;= m; n &lt;&lt;= <span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">dft</span>(f, n);<br>    <span class="hljs-built_in">dft</span>(p, n);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>        f[i] = f[i] * p[i];<br>    <span class="hljs-built_in">idft</span>(f, n);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= m; i++)<br>        ans[i] = (ll) (f[i].x / n + <span class="hljs-number">0.49</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; MAX; i++)&#123;<br>        ans[i + <span class="hljs-number">1</span>] += (ans[i] / <span class="hljs-number">10</span>);<br>        ans[i] %= <span class="hljs-number">10</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> t = MAX - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (ans[t] == <span class="hljs-number">0</span>)<br>        t--;<br>    <span class="hljs-keyword">while</span> (t &gt;= <span class="hljs-number">0</span>)<br>        cout &lt;&lt; ans[t--];<br>    cout &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dft</span><span class="hljs-params">(Complex *f, <span class="hljs-type">int</span> len)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (len == <span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">return</span>;<br>    Complex *fl = f, *fr = f + len / <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; len; k++)<br>        sav[k] = f[k];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; len / <span class="hljs-number">2</span>; k++) &#123;<br>        fl[k] = sav[k &lt;&lt; <span class="hljs-number">1</span>];<br>        fr[k] = sav[k &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>];<br>    &#125;<br>    <span class="hljs-built_in">dft</span>(fl, len / <span class="hljs-number">2</span>);<br>    <span class="hljs-built_in">dft</span>(fr, len / <span class="hljs-number">2</span>);<br>    Complex tG = &#123;<span class="hljs-built_in">cos</span>(<span class="hljs-number">2</span> * Pi / len), <span class="hljs-built_in">sin</span>(<span class="hljs-number">2</span> * Pi / len)&#125;;<br>    Complex buf = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; len / <span class="hljs-number">2</span>; k++) &#123;<br>        sav[k] = fl[k] + buf * fr[k];<br>        sav[k + len / <span class="hljs-number">2</span>] = fl[k] - buf * fr[k];<br>        buf = buf * tG;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; len; k++)<br>        f[k] = sav[k];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">idft</span><span class="hljs-params">(Complex *f, <span class="hljs-type">int</span> len)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (len == <span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">return</span>;<br>    Complex *fl = f, *fr = f + len / <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; len; k++)<br>        sav[k] = f[k];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; len / <span class="hljs-number">2</span>; k++) &#123;<br>        fl[k] = sav[k &lt;&lt; <span class="hljs-number">1</span>];<br>        fr[k] = sav[k &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>];<br>    &#125;<br>    <span class="hljs-built_in">idft</span>(fl, len / <span class="hljs-number">2</span>);<br>    <span class="hljs-built_in">idft</span>(fr, len / <span class="hljs-number">2</span>);<br>    Complex tG = &#123;<span class="hljs-built_in">cos</span>(<span class="hljs-number">2</span> * Pi / len), -<span class="hljs-built_in">sin</span>(<span class="hljs-number">2</span> * Pi / len)&#125;;<br>    Complex buf = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; len / <span class="hljs-number">2</span>; k++) &#123;<br>        sav[k] = fl[k] + buf * fr[k];<br>        sav[k + len / <span class="hljs-number">2</span>] = fl[k] - buf * fr[k];<br>        buf = buf * tG;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; len; k++)<br>        f[k] = sav[k];<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="kmp-字符串匹配"><a class="markdownIt-Anchor" href="#kmp-字符串匹配"></a> KMP 字符串匹配</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">prefix</span><span class="hljs-params">(string str)</span></span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    string text;<br>    string key;<br>    cin &gt;&gt; text;<br>    cin &gt;&gt; key;<br>    <span class="hljs-type">int</span> kl = key.<span class="hljs-built_in">length</span>();<br>    vector&lt;<span class="hljs-type">int</span>&gt; kmp = <span class="hljs-built_in">prefix</span>(key);<br>    <span class="hljs-type">int</span> k = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; text.<span class="hljs-built_in">length</span>(); i++)&#123;<br>        <span class="hljs-keyword">while</span> (k &amp;&amp; key[k] != text[i])<br>            k = kmp[k - <span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">if</span>(text[i] == key[k])<br>            k++;<br>        <span class="hljs-keyword">if</span>(k == kl)<br>            cout &lt;&lt; i - k + <span class="hljs-number">2</span> &lt;&lt; endl;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> x: kmp)<br>        cout &lt;&lt; x &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">prefix</span><span class="hljs-params">(string str)</span></span>&#123;<br>    <span class="hljs-type">int</span> l = (<span class="hljs-type">int</span>) str.<span class="hljs-built_in">length</span>();<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">pre</span><span class="hljs-params">(l)</span></span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; l; i++)&#123;<br>        <span class="hljs-type">int</span> j = pre[i - <span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">while</span> (j &amp;&amp; str[j] != str[i])<br>            j = pre[j - <span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">if</span>(str[j] == str[i])<br>            j++;<br>        pre[i] = j;<br>    &#125;<br>    <span class="hljs-keyword">return</span> pre;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="其它"><a class="markdownIt-Anchor" href="#其它"></a> 其它</h2><h3 id="快速幂取余"><a class="markdownIt-Anchor" href="#快速幂取余"></a> 快速幂取余</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Cpp"><span class="hljs-function">ll <span class="hljs-title">fast_pow_mod</span><span class="hljs-params">(ll a, ll b, ll m)</span></span>&#123;<br>    a %= m;<br>    ll res = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (b &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">if</span> (b &amp; <span class="hljs-number">1</span>) res = res * a % m;<br>        a = a * a % m;<br>        b &gt;&gt;= <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="快速打质数表"><a class="markdownIt-Anchor" href="#快速打质数表"></a> 快速打质数表</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs Cpp"><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">generate_prime_list</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (n &lt;= <span class="hljs-number">2</span>)<br>        <span class="hljs-keyword">return</span> vector&lt;<span class="hljs-type">int</span>&gt;&#123;<span class="hljs-number">2</span>&#125;;<br>    <span class="hljs-keyword">if</span> (n &lt;= <span class="hljs-number">3</span>)<br>        <span class="hljs-keyword">return</span> vector&lt;<span class="hljs-type">int</span>&gt;&#123;<span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;;<br>    <span class="hljs-keyword">if</span> (n &lt;= <span class="hljs-number">5</span>)<br>        <span class="hljs-keyword">return</span> vector&lt;<span class="hljs-type">int</span>&gt;&#123;<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>&#125;;<br>    vector&lt;<span class="hljs-type">int</span>&gt; prime_list = &#123;<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>&#125;;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> x;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>        x = <span class="hljs-number">6</span> * i + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (x &gt; n)<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">is_prime</span>(x, prime_list))<br>            prime_list.<span class="hljs-built_in">push_back</span>(x);<br>        x = <span class="hljs-number">6</span> * i + <span class="hljs-number">5</span>;<br>        <span class="hljs-keyword">if</span> (x &gt; n)<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">is_prime</span>(x, prime_list))<br>            prime_list.<span class="hljs-built_in">push_back</span>(x);<br>        i++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> prime_list;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">is_prime</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">const</span> vector&lt;<span class="hljs-type">int</span>&gt; &amp;prime_list)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> u: prime_list)&#123;<br>        <span class="hljs-keyword">if</span>(x % u == <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">if</span>(u * u &gt; x)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="鸣谢"><a class="markdownIt-Anchor" href="#鸣谢"></a> 鸣谢</h2><ul><li>首先感谢能看到这里的读者，若您能从本篇文章获得或多或少的帮助都将是作者的荣幸</li><li>还要感谢我的算法老师黄坚、罗川老师，他们生动的课堂让我在疲惫的早八仍然能保持良好的睡眠质量，为我的算法练习养精蓄锐</li><li>另外感谢拼命捞我的宋友老师、Marvolo助教和Matrix53助教，在他们的帮助下我才能取得大学以来首个满分</li><li>感谢所有负责出题、讲题的算法助教，在他们的帮助下我的代码水平才能在练习和学习中提高</li><li>感谢教我过做题的xjc、pyy、wyq同学，简单的一句话便能点醒我的思路</li><li>感谢所有我看过的教程博客：<ul><li><a href="https://www.runoob.com/cplusplus/cpp-tutorial.html">https://www.runoob.com/cplusplus/cpp-tutorial.html</a></li><li><a href="https://zh.cppreference.com/w/%E9%A6%96%E9%A1%B5">https://zh.cppreference.com/w/首页</a></li><li><a href="https://oi-wiki.org/">https://oi-wiki.org/</a></li><li><a href="https://www.luogu.com.cn/blog/hkr04/wang-lao-liu-dinic">https://www.luogu.com.cn/blog/hkr04/wang-lao-liu-dinic</a></li><li><a href="https://blog.csdn.net/sugarbliss/article/details/86495945">https://blog.csdn.net/sugarbliss/article/details/86495945</a></li><li><a href="https://www.cnblogs.com/LiGuanlin1124/category/1399603.html">https://www.cnblogs.com/LiGuanlin1124/category/1399603.html</a></li><li><a href="https://www.luogu.com.cn/blog/command-block/fft-xue-xi-bi-ji">https://www.luogu.com.cn/blog/command-block/fft-xue-xi-bi-ji</a></li><li><a href="https://www.luogu.com.cn/problem/solution/P3375">https://www.luogu.com.cn/problem/solution/P3375</a></li><li><a href="https://www.luogu.com.cn/problem/solution/P1226">https://www.luogu.com.cn/problem/solution/P1226</a></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>期末复习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>BUAA</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>聊聊链表</title>
    <link href="/2022/01/20/%E8%81%8A%E8%81%8A%E9%93%BE%E8%A1%A8/"/>
    <url>/2022/01/20/%E8%81%8A%E8%81%8A%E9%93%BE%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="数据结构聊聊链表"><a class="markdownIt-Anchor" href="#数据结构聊聊链表"></a> 数据结构：聊聊链表</h1><blockquote><p>幸福穿着节日的盛装欢迎你。——威廉•莎士比亚《罗密欧与朱丽叶》</p></blockquote><h2 id="1-说在前面"><a class="markdownIt-Anchor" href="#1-说在前面"></a> 1. 说在前面</h2><p>大家在学数组的时候小脑瓜里有没有这样的疑惑：为什么数组必须是定长的？为什么数组开太长会编译错误？数组越界为什么不报错？</p><p>其实开数组的时候你的电脑的内存里是这样的：</p><p><img src="/img/%E8%81%8A%E8%81%8A%E9%93%BE%E8%A1%A8.assets/array.png" alt="" /></p><p>当声明数组大小之后，内存里会往下数相应的空间，然后从下到上依次为数组分配空间，所以你访问 a[5] 实际是访问已使用部分的内存。这又说明，数组占用的是一片<strong>连续的空间</strong>，而你若是开 a[1000000000] 那么大的数组，计算机很难保证有那么大的连续空间，所以编译器出于一种保护的目的，禁止开那么大的空间。不过有的小伙伴可能发现有时候太大的数组在自己的电脑开不出来，但是在 OJ 上能 AC，这是因为 OJ 的服务器没有这样一种编译时的保护机制，不过当你的程序运行时使用内存过大会强制终止，并返回 MLE。</p><p>所以为了克服数组只能定长的弊端，科学家们给出了一些可行的方案，比如变长数组、链表等等。</p><p>变长数组顾名思义：长度可变的数组，在定义后可以自动改变长度。满了会自动加长，也就是另外找一片更长的连续空间，然后把自己整个 copy 过去；如果里面的元素太少，自己还会缩短，也就是把自己用不到的部分给释放出去。</p><p>这里给出变长数组的代码大家可以留着，<strong>大作业</strong>或许有用，只能让数组伸长并没有实现缩短：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 定义结构体 struct Vector，其指针重命名为 VecPtr</span><br><span class="hljs-comment"> * length   : 数组已使用的长度</span><br><span class="hljs-comment"> * capacity : 数组的容量</span><br><span class="hljs-comment"> * array    ：用于存放数据的区域</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Vector</span> &#123;</span><br>    <span class="hljs-type">int</span> length;<br>    <span class="hljs-type">int</span> capacity;<br>    <span class="hljs-type">int</span> *<span class="hljs-built_in">array</span>;<br>&#125; *VecPtr;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 创建一个空的变长数组，初始容量为 5，返回变长数组的指针</span><br><span class="hljs-comment"> */</span><br>VecPtr <span class="hljs-title function_">create_vector</span><span class="hljs-params">()</span> &#123;<br>    VecPtr vec = (VecPtr) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> Vector));<br>    vec-&gt;<span class="hljs-built_in">array</span> = (<span class="hljs-type">int</span> *) <span class="hljs-built_in">malloc</span>(<span class="hljs-number">5</span> * <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>));<br>    vec-&gt;capacity = <span class="hljs-number">5</span>;<br>    vec-&gt;length = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> vec;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 这个函数可以在数组的尾部插入元素，当数组满了自动扩大一倍</span><br><span class="hljs-comment"> * vec  : 变长数组的指针</span><br><span class="hljs-comment"> * item : 要插入的元素</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">push_back</span><span class="hljs-params">(VecPtr vec, <span class="hljs-type">int</span> item)</span> &#123;<br>    vec-&gt;<span class="hljs-built_in">array</span>[vec-&gt;length] = item;<br>    vec-&gt;length++;<br>    <span class="hljs-keyword">if</span> (vec-&gt;length == vec-&gt;capacity)<br>        vec-&gt;<span class="hljs-built_in">array</span> = (<span class="hljs-type">int</span> *) <span class="hljs-built_in">realloc</span>(vec-&gt;<span class="hljs-built_in">array</span>, <span class="hljs-number">2</span> * vec-&gt;capacity * <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>));<br>&#125;<br><br></code></pre></td></tr></table></figure><p>2333是不是有很多你们看不懂的东西？这里我说明一下相关语法：</p><ul><li><code>typedef struct Vector &#123;...&#125; *VecPtr;</code>：<code>typedef</code>是 type define 的缩写，就是类型名字重定义，这里的用法是将这句话和定义结构体写到一起去了，最后的 <code>*VecPtr</code>，意思是让<code>Vecptr</code>成为<code>struct Vector</code>的<strong>指针</strong>类型</li></ul><blockquote><p>题外话：在 C++ 里有现成的变长数组可以使用，名字就叫<code>vector</code>，vector 是向量的意思，大家线性代数都学过高维向量吧，你懂的。<code>VecPtr</code>是 vector pointer 的缩写，即“数组指针”。</p></blockquote><ul><li><code>-&gt;</code> 运算符是 C 语言中结构体的一种操作，表示“给一个结构体<strong>指针</strong>，找到那个结构体并访问其元素”。例如 <code>vec-&gt;length</code> 就等于 <code>&amp;vec.length</code>，但是用<code>-&gt;</code>显得更生动形象也更推荐。</li><li><code>VecPtr vec = (VecPtr) malloc(sizeof(struct Vector));</code>：<code>malloc()</code>函数是 memory allocate 的缩写，即“内存分配”，括号里的参数是内存的大小，一般写作 <code>n * sizeof(...)</code>，表示分配那么多空间，返回那片空间的起始地址（空指针<code>void *</code>类型），函数前面的 <code>(VecPtr)</code>是强制类型转换，将 <code>void *</code>指针转换为 <code>VecPtr</code>类型才能给参数赋值。后面的 <code>(int *)</code>同理。<code>malloc()</code>函数需要<strong>头文件</strong><code>&lt;stdlib.h&gt;</code>！！！</li><li><code>realloc</code>顾名思义，是内存重新分配，有两个参数，第一个参数是旧地址，第二个参数是新空间的大小。就是开辟一块新空间，然后把旧地址里的东西整个 copy 过去并释放旧空间，最后返回新空间的起始地址，记得加上类型转换！</li></ul><p>可能看到上述写法你们会有点不适应，但是在以后的学习中，尤其是最重要的链表和树，<strong>结构体指针</strong>是必须要熟练掌握的！</p><h2 id="2-初识链表linked-list"><a class="markdownIt-Anchor" href="#2-初识链表linked-list"></a> 2. 初识链表(Linked List)</h2><p>变长数组还是有个缺点，当你的内存紧张的时候，找不到一块足够大小的连续空间，那么数组的加长就会失败。为了能榨干计算机的每一处内存，科学家就想出了这个“恶毒”的方案。数据的存储并不连续，每插入一个数据就在内存中寻找一小块内存用掉，直到内存被完全用光为止。</p><p>链表画出来大概是这样的：</p><p>![](/img/聊聊链表.assets/Linked List.png)</p><p>链表的每一个方块被称为<strong>结点(Node)</strong>，除了最后一个以外，每一个结点都连接着后一个结点，所以只要有链表的头部结点，就可以往后一个一个找以访问到所有结点。但是这种方式有一个缺点：不能像数组一样快速访问第某个节点（这种被称作随机访问），想访问第 k 个结点就必须从头结点开始一个一个数，数到 k 才行，因此链表的随机访问的平均时间复杂度是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span>，而数组是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span>。</p><h2 id="3-操作和实现"><a class="markdownIt-Anchor" href="#3-操作和实现"></a> 3. 操作和实现</h2><h3 id="1-链表的定义"><a class="markdownIt-Anchor" href="#1-链表的定义"></a> 1. 链表的定义</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> &#123;</span><br>    <span class="hljs-type">int</span> val;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> * <span class="hljs-title">next</span>;</span><br>&#125; *List;<br></code></pre></td></tr></table></figure><p>以上是定义链表结构体的代码</p><ul><li><code>int val</code>：链表存放数据的值，就是图里的 data 块，其实是可以根据需要灵活多变的；</li><li><code>struct Node * next</code> ：这是定义一个 <code>next</code> 元素，类型是链表的指针，用来保存下一个结点的地址，末尾结点的 <code>next</code> 是空的（即NULL），在图里用“\and” 符号表示。（你问我为啥不用<code>List</code>？<code>List</code>是在后面定义的，在前面就用它也过不去编译啊）</li><li>最后将这个结构体的指针重命名为 <code>List</code>。</li></ul><h3 id="2-链表的构造"><a class="markdownIt-Anchor" href="#2-链表的构造"></a> 2. 链表的构造</h3><p>这里举这样一种情况为例：把一个长度为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 的数组转化为链表。这里有两个问题需要我们来解决：</p><ul><li>当链表是空的时候我们需要无中生有造出一个表头来；</li><li>从第二个元素开始，构造的过程就是一个一个往后插入元素。</li></ul><p>大家看图：</p><p><img src="/img/%E8%81%8A%E8%81%8A%E9%93%BE%E8%A1%A8.assets/create.png" alt="" /></p><p>代码实现：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * a[] 是数组，n 是数组的长度</span><br><span class="hljs-comment"> * 函数构造链表并返回表头的指针</span><br><span class="hljs-comment"> * p 和 r 是临时的指针，命名的学问：</span><br><span class="hljs-comment"> *p 可以看作是 pointer 的缩写，所以常常用 p 来命名指针，就跟用 a(array 的缩写) 来命名数组一个道理。</span><br><span class="hljs-comment"> *那 p 之后的变量为啥不叫 q 直接叫 r 了呢？因为 r 可以看做 rear (尾部)的缩写</span><br><span class="hljs-comment"> */</span><br>List <span class="hljs-title function_">createList</span><span class="hljs-params">(<span class="hljs-type">int</span> a[], <span class="hljs-type">int</span> n)</span> &#123;<br>    List L = <span class="hljs-literal">NULL</span>, p = <span class="hljs-literal">NULL</span>, r = <span class="hljs-literal">NULL</span>;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        p = (List) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span> (<span class="hljs-keyword">struct</span> Node));<br>        p-&gt;val = a[i];<br>        p-&gt;next = <span class="hljs-literal">NULL</span>;<br><br>        <span class="hljs-keyword">if</span> (L == <span class="hljs-literal">NULL</span>)<br>            L = p;<br>        <span class="hljs-keyword">else</span><br>            r-&gt;next = p;<br>        r = p;<br>    &#125;<br>    <span class="hljs-keyword">return</span> L;<br>&#125;<br></code></pre></td></tr></table></figure><p>以上代码墙裂建议<strong>充分理解并熟练掌握</strong>。</p><h3 id="3-链表的遍历-随机访问和查找"><a class="markdownIt-Anchor" href="#3-链表的遍历-随机访问和查找"></a> 3. 链表的遍历、随机访问和查找</h3><p>y1s1 这都没啥难的，就是大概看看熟悉熟悉。</p><h4 id="1-遍历打印链表"><a class="markdownIt-Anchor" href="#1-遍历打印链表"></a> 1. 遍历：打印链表</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">void</span> <span class="hljs-title function_">printList</span><span class="hljs-params">(List L)</span> &#123;<br>    <span class="hljs-keyword">while</span> (L != <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, L-&gt;val);<br>        L = L-&gt;next;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-随机访问链表第-k-个元素从-0-开始计数"><a class="markdownIt-Anchor" href="#2-随机访问链表第-k-个元素从-0-开始计数"></a> 2. 随机访问：链表第 k 个元素（从 0 开始计数）</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> <span class="hljs-title function_">atList</span><span class="hljs-params">(List L, <span class="hljs-type">int</span> k)</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; k; i++) &#123;<br>        L = L-&gt;next;<br>        <span class="hljs-keyword">if</span> (L == <span class="hljs-literal">NULL</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> L-&gt;val;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意 k 大于等于链表长度时返回 -1。</p><h4 id="3-查找并返回找到结点的指针"><a class="markdownIt-Anchor" href="#3-查找并返回找到结点的指针"></a> 3. 查找并返回找到结点的指针</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C">List <span class="hljs-title function_">searchList</span><span class="hljs-params">(List L, <span class="hljs-type">int</span> key)</span> &#123;<br>    <span class="hljs-keyword">while</span> (L != <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">if</span> (L-&gt;val == key)<br>            <span class="hljs-keyword">return</span> L;<br>        L = L-&gt;next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-链表的插入"><a class="markdownIt-Anchor" href="#4-链表的插入"></a> 4. 链表的插入</h3><p>给定链表的某结点 p，要在 p 的后面插入元素 item，如何操作？看图：</p><p><img src="/img/%E8%81%8A%E8%81%8A%E9%93%BE%E8%A1%A8.assets/insert.png" alt="" /></p><p>需要注意的是：一定是<strong>先让 q 指 p-&gt;next 再让 p 指 q</strong>。顺序颠倒的话 p 后面的结点就丢了！</p><p>重要的就是把图记下来，代码很容易写：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">void</span> <span class="hljs-title function_">insertList</span><span class="hljs-params">(List p, <span class="hljs-type">int</span> item)</span> &#123;<br>    List q = (List) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span> (<span class="hljs-keyword">struct</span> Node));<br>    q-&gt;val = item;<br>    q-&gt;next = p-&gt;next;  <span class="hljs-comment">// 让 q 指 p 的下一个结点</span><br>    p-&gt;next = q;        <span class="hljs-comment">// 让 p-&gt;next 变成 q</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-链表的删除"><a class="markdownIt-Anchor" href="#5-链表的删除"></a> 5. 链表的删除</h3><p>注意链表在删除时不能直接删除要删除的结点，而要给出它的<strong>前一个</strong>结点才能操作。</p><p><img src="/img/%E8%81%8A%E8%81%8A%E9%93%BE%E8%A1%A8.assets/delete.png" alt="" /></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> <span class="hljs-title function_">deleteList</span><span class="hljs-params">(List p)</span> &#123;<br>    <span class="hljs-keyword">if</span> (p-&gt;next == <span class="hljs-literal">NULL</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    List q = p-&gt;next;<br>    p-&gt;next = q-&gt;next;<br>    <span class="hljs-built_in">free</span>(q);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>当 p 是链表尾时无法删除，返回-1，删除成功则返回 0。</p><p><code>free()</code>函数接收一个指针，并将指针所指的空间释放掉留给以后使用。如果我们只写<code>p-&gt;next = p-&gt;next-&gt;next</code>虽然也能删除，但是吧……这是既浪费空间又不很道德的~如果你的程序跑在长期运行的服务器上，就可能会发生“内存泄漏”，明明没有存多少东西，内存就满了，所以我们要养成好习惯，合理利用内存哈。</p><h2 id="4-总结"><a class="markdownIt-Anchor" href="#4-总结"></a> 4. 总结</h2><p>当给定要插入删除的位置时，链表可以在 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span> 的时间复杂度内完成插入删除操作。而数组想插入删除，就不得不咣咣咣移动后面的所有元素腾出地方或者往前缩，时间复杂度为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span>。</p><p>但是由于数组是连续空间，支持快速下标访问，所以可以在有序数组上进行二分查找。（数组扳回一局）</p><p>以后学到的树和图都是以链表为基础，所以熟练掌握链表的写法是非常重要的！！！</p><p>可以看到我写的代码都是已经封装好的函数，我建议大家养成好习惯，把一些细节的代码都封装成函数，并且起一个<strong>清楚的名字</strong>，在<code>main()</code>函数里反复根据需求调用函数，这样做好处很多：</p><ul><li>函数具有可移植性，以后用的时候（包括用自己的电脑考试）可以直接 copy；</li><li>你的程序逻辑非常清晰，助教读了之后非常乐意帮你改 bug；</li><li>你自己写出来也觉得很有成就感。</li></ul><p>建议大家反复研究示例代码，深刻理解指针的用法，记住插入和删除的流程。</p><p>由于链表大量使用指针，所以初学者写程序的时候很可能会犯<strong>野指针</strong>的错误，当你发现你的程序跑着跑着就死了。DEV C++ 或 CLion 的<strong>断点调试</strong>功能能很快帮你找到问题所在哦。</p><p>另外单纯的链表在做题中较少使用，但是将链表的尾部连到头部，就成了<strong>循环链表</strong>，如果给链表定义<code>left</code>和<code>right</code>两个指针就成了<strong>双向链表</strong>，它们有更丰富的功能等着你们去探索呢~</p><p>那么……祝大家享受编程的乐趣，成绩更上一层楼！</p>]]></content>
    
    
    <categories>
      
      <category>朴素的 C 语言教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C语言</tag>
      
      <tag>BUAA</tag>
      
      <tag>数据结构</tag>
      
      <tag>链表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CLion入门教程</title>
    <link href="/2022/01/17/CLion%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"/>
    <url>/2022/01/17/CLion%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="clion入门教程"><a class="markdownIt-Anchor" href="#clion入门教程"></a> CLion入门教程</h1><h2 id="1-说点什么"><a class="markdownIt-Anchor" href="#1-说点什么"></a> 1. 说点什么</h2><p>以下我将介绍地表最强（可能是之一，别打我） C/C++ 开发 IDE——CLion，以及如何使用它来<strong>快乐刷题</strong>。</p><p>工欲善其事，必先利其器。一个好的编程工具对写代码或是做题来说格外重要，尤其是考场上<strong>拼手速</strong>和<strong>debug</strong>的时候。</p><p>首先是各种工具的对比：</p><ul><li><p>DEV C++：大伙用的最多的，很方便啊是吧，但是也很朴素……没有代码补全是不是有点难受？</p></li><li><p>小熊猫 DEV：我后来用的是这个，增添了代码补全，也是比较流畅，但毕竟是魔改版而且跟原来的 DEV 不能同时用，不放心就给卸了；</p></li><li><p>Visual Studio：没怎么深入体验过，那大 10 个 G 看了还是……呵呵</p></li><li><p>VSCode：可以说编程工具里的瑞士军刀，什么都能写，体验也还不错，美中不足的就是……安装配置 C 语言真的<strong>很麻烦</strong>。</p></li><li><p>CLion：安装好之后应该在 1G 左右，收费（北航邮箱可以免费使用教育版），有一定的学习成本，但是让我最欣赏的是它真的特别<strong>人性化</strong>，写起代码相当便捷流畅。而且学校机房是可以使用 CLion 的（VSCode和小熊猫用不了，万一到机房考试还是一夜回到解放前）。</p></li></ul><p>关于我自己的经历：</p><p>那是一次算法上机考试，结束后一同学让我帮 debug。我先是打开了原始的 DEV C++ 看代码，emm……也没啥问题，样例都对，但是交上去总有几个点 WA。我就反复找错改改怎么还是 WA，后来我把代码 copy 到 CLion 上，发现了这么一段：</p><p><img src="/img/Clion%E6%95%99%E7%A8%8B.assets%5Cimage-20220117155009474.png" alt="" /></p><p>浮点数的快速排序，写一个 cmp 函数，乍一看可能没问题，但是 CLion 给我一个警告，翻译过来是“类型转换范围缩小”，我恍然大悟（不明白的同学请速速面壁）。从此我成了 CLion 的忠实信徒233。</p><p><img src="/img/Clion%E6%95%99%E7%A8%8B.assets%5Cimage-20220117152906351.png" alt="" /></p><p>以上是我的代码工作页面，采用输入输出重定位实现输入输出分离，不像控制台一样又丑又不方便哈~</p><h2 id="2-操作步骤"><a class="markdownIt-Anchor" href="#2-操作步骤"></a> 2. 操作步骤</h2><h3 id="1-注册北航邮箱"><a class="markdownIt-Anchor" href="#1-注册北航邮箱"></a> 1. 注册北航邮箱</h3><p>注意你们的 accoding 账号本身只是一个账号，不能用来收发邮件，还要单独申请邮箱，不过你的邮箱名字不一定非得是学号哈，可以个性化的：</p><p><a href="https://mail.buaa.edu.cn/register/cmcu_addon/beihang/buaaregister.jsp">北京航空航天大学-邮箱注册页面 (buaa.edu.cn)</a></p><p>按照步骤自己来哈~</p><h3 id="2-下载以及安装-clion"><a class="markdownIt-Anchor" href="#2-下载以及安装-clion"></a> 2. 下载以及安装 CLion</h3><p><a href="https://www.jetbrains.com/zh-cn/clion/download/#section=windows">下载 CLion：适用于 C 和 C++ 的智能跨平台 IDE (jetbrains.com)</a></p><p>这里直接点下载 .exe 就好，稍等片刻。</p><p>不好意思我懒了<sub>其实是我不能在重装一遍，找到别人的博客大家看看叭</sub><a href="https://blog.csdn.net/qq_29629083/article/details/118103011">CLion安装配置与学生认证</a></p><p>注意最后创建工程的时候改成 C 可执行文件而不是 C++。</p><h3 id="3-舒适写代码"><a class="markdownIt-Anchor" href="#3-舒适写代码"></a> 3. 舒适写代码</h3><p>小问题要提一下下，CLion 每写一份代码是要重新建一个项目 Project，而 Project 里有大量看不懂乱七八糟的东西，所以为了免去频繁新建 Project 的麻烦，我推荐每次做完一道题把代码整个复制粘贴保存到一个新的 .c 文件里（可以用 DEV C++ 或是记事本打开，这也是我CLion 和 DEV 双持的原因）。然后把 CLion 里的代码删掉。</p><p>不过还有一个小问题就是——CLion 无法不定行读入，也就是不能按 Ctrl+Z 来停止读入。这里我推荐文件I/O （文件读写）：</p><ol><li>右键 <code>cmake-build-debug</code> 文件夹，新建 -&gt; 文件，命名为 <code>a.in</code>，再新建一个命名 <code>a.out</code>。</li></ol><p><img src="/img/Clion%E6%95%99%E7%A8%8B.assets%5Cimage-20220117161708926.png" alt="" /></p><ol start="2"><li>把这两个文本打开然后拆分右移等一系列操作：</li></ol><p><img src="/img/Clion%E6%95%99%E7%A8%8B.assets%5Cimage-20220117162747504.png" alt="" /></p><p>最后效果如图 <img src="/img/Clion%E6%95%99%E7%A8%8B.assets%5Cimage-20220117152906351-16486963546781.png" alt="" /></p><p>记得交题的时候把 <code>freopen</code> 注释掉喂！（快捷键 Ctrl+/）</p><h2 id="额外注意"><a class="markdownIt-Anchor" href="#额外注意"></a> 额外注意：</h2><ul><li>CLion 与其他工具不同，程序里打开文件（例如 <code>freopen</code>）<strong>不是在同一目录下</strong>，而是在 <code>cmake-build-debug</code> 文件夹！</li><li>任何时候按下 Ctrl+Alt+L，会触发代码自动美化，就是一键整理；</li><li>CLion 对警告特别敏感，注意读一些警告信息（英文）会<strong>避免很多很多潜在的小 bug</strong>；</li><li>有些时候在警告处按 Alt+Enter，会给你自动修改。</li><li><strong>永远要注意英文的提示信息，最好弄明白到底出了什么问题</strong>，比如（Narrowing conversion）。</li><li>打上一条和上上条的脸：<code>scanf</code> 语句的警告大概意思是 “<code>scanf</code>本身有安全问题”，一般问题不大可以忽略；</li><li>有时候警告的意思是你的代码太丑了，虽说不影响运行但是还是最好让它帮你改一下，培养优雅的码风。</li></ul><hr /><p>以上，还有问题联系请我~</p>]]></content>
    
    
    <categories>
      
      <category>教程系列</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Clion</tag>
      
      <tag>C语言</tag>
      
      <tag>C++</tag>
      
      <tag>开发工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>输出全排列</title>
    <link href="/2022/01/17/%E8%BE%93%E5%87%BA%E5%85%A8%E6%8E%92%E5%88%97/"/>
    <url>/2022/01/17/%E8%BE%93%E5%87%BA%E5%85%A8%E6%8E%92%E5%88%97/</url>
    
    <content type="html"><![CDATA[<h1 id="输出全排列"><a class="markdownIt-Anchor" href="#输出全排列"></a> 输出全排列</h1><p>输入一个数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>，输出 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>∼</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">1\sim n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 的所有全排列，每个排列占一行，每个字符保留 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>5</mn></mrow><annotation encoding="application/x-tex">5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">5</span></span></span></span> 个场宽。<s>勤奋的同学一定已经开始打表了是吧</s>。</p><p>说是能做肯定不是骗大家，那怎么做呢~</p><p>其实回溯法本质还是递归，回想我们做过的小兔子（青蛙）跳台阶的那题，只是需要算出总的方案数就可以，但是这个让你来输出具体的排列，这就需要你来保留每一层递归的状态，所以我们用一个全局数组来完成这一工作（暂且命名为<code>stack</code>，大家可以查一查这个单词什么意思）。</p><p>以 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>=</mo><mn>3</mn></mrow><annotation encoding="application/x-tex">n=3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span></span></span></span> 为例，一开始<code>stack</code> 是空的，我们需要枚举从 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 到 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 这几个数字，填充到 <code>stack[0]</code> 里：</p><table><thead><tr><th style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>⇓</mo></mrow><annotation encoding="application/x-tex">\Downarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mrel">⇓</span></span></span></span></th><th style="text-align:center"></th><th style="text-align:center"></th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center"></td><td style="text-align:center"></td></tr></tbody></table><p>OK 放进去了，然后考虑后面一个数字，还是从 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 到 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>=</mo><mn>3</mn></mrow><annotation encoding="application/x-tex">n=3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span></span></span></span> 枚举：</p><table><thead><tr><th style="text-align:center"></th><th style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>⇓</mo></mrow><annotation encoding="application/x-tex">\Downarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mrel">⇓</span></span></span></span></th><th style="text-align:center"></th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center"></td></tr></tbody></table><p>大家觉得这样行吗？</p><p>——你这都跟前面重复了肯定不行啊！</p><p>不行是吧，那就换一个 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn></mrow><annotation encoding="application/x-tex">2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span></span></span></span>：</p><table><thead><tr><th style="text-align:center"></th><th style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>⇓</mo></mrow><annotation encoding="application/x-tex">\Downarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mrel">⇓</span></span></span></span></th><th style="text-align:center"></th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">2</td><td style="text-align:center"></td></tr></tbody></table><p>OK 舒服了，再看下一个（我已经试过了，放 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 不行，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn></mrow><annotation encoding="application/x-tex">2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span></span></span></span> 也不行，那就放 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>3</mn></mrow><annotation encoding="application/x-tex">3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span></span></span></span>）：</p><table><thead><tr><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>⇓</mo></mrow><annotation encoding="application/x-tex">\Downarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mrel">⇓</span></span></span></span></th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">2</td><td style="text-align:center">3</td></tr></tbody></table><p>好的，看看下一个……哎呦怎么满了，那就输出一下叭：</p><p>此时你的控制台输出：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">1    2    3<br><br></code></pre></td></tr></table></figure><p>好的我们把 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>3</mn></mrow><annotation encoding="application/x-tex">3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span></span></span></span> 拿掉，往回退一层：</p><table><thead><tr><th style="text-align:center"></th><th style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>⇓</mo></mrow><annotation encoding="application/x-tex">\Downarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mrel">⇓</span></span></span></span></th><th style="text-align:center"></th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">2</td><td style="text-align:center"></td></tr></tbody></table><p>这个 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn></mrow><annotation encoding="application/x-tex">2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span></span></span></span> 不是从 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 枚举过来的吗，那还没有枚举完，就还要继续枚举下去：</p><table><thead><tr><th style="text-align:center"></th><th style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>⇓</mo></mrow><annotation encoding="application/x-tex">\Downarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mrel">⇓</span></span></span></span></th><th style="text-align:center"></th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">3</td><td style="text-align:center"></td></tr></tbody></table><p>好的进入下一层从  <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 开始枚举：</p><table><thead><tr><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>⇓</mo></mrow><annotation encoding="application/x-tex">\Downarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mrel">⇓</span></span></span></span></th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">3</td><td style="text-align:center">1</td></tr></tbody></table><p>不行，跟前面重复了，换 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn></mrow><annotation encoding="application/x-tex">2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span></span></span></span> 试试：</p><table><thead><tr><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>⇓</mo></mrow><annotation encoding="application/x-tex">\Downarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mrel">⇓</span></span></span></span></th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">3</td><td style="text-align:center">2</td></tr></tbody></table><p>好像可以，<code>stack</code> 又满了诶，输出一下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs text">1    2    3<br>1    3    2<br><br></code></pre></td></tr></table></figure><p>再把最后一个元素试图换一下 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>3</mn></mrow><annotation encoding="application/x-tex">3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span></span></span></span>：</p><table><thead><tr><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>⇓</mo></mrow><annotation encoding="application/x-tex">\Downarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mrel">⇓</span></span></span></span></th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">3</td><td style="text-align:center">3</td></tr></tbody></table><p>不行，死心了，往回退：</p><table><thead><tr><th style="text-align:center"></th><th style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>⇓</mo></mrow><annotation encoding="application/x-tex">\Downarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mrel">⇓</span></span></span></span></th><th style="text-align:center"></th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">3</td><td style="text-align:center"></td></tr></tbody></table><p>呃，第二个元素也举到 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>3</mn></mrow><annotation encoding="application/x-tex">3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span></span></span></span> 了，不能继续举了，只能再退一层，把 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 换成 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn></mrow><annotation encoding="application/x-tex">2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span></span></span></span> 试试：</p><table><thead><tr><th style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>⇓</mo></mrow><annotation encoding="application/x-tex">\Downarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mrel">⇓</span></span></span></span></th><th style="text-align:center"></th><th style="text-align:center"></th></tr></thead><tbody><tr><td style="text-align:center">2</td><td style="text-align:center"></td><td style="text-align:center"></td></tr></tbody></table><p>没啥问题，再放下一个，从 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 开始枚举：</p><table><thead><tr><th style="text-align:center"></th><th style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>⇓</mo></mrow><annotation encoding="application/x-tex">\Downarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mrel">⇓</span></span></span></span></th><th style="text-align:center"></th></tr></thead><tbody><tr><td style="text-align:center">2</td><td style="text-align:center">1</td><td style="text-align:center"></td></tr></tbody></table><p>也没有重复的，再下一个：</p><table><thead><tr><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>⇓</mo></mrow><annotation encoding="application/x-tex">\Downarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mrel">⇓</span></span></span></span></th></tr></thead><tbody><tr><td style="text-align:center">2</td><td style="text-align:center">1</td><td style="text-align:center">1</td></tr></tbody></table><p>最后一个放 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 行吗？不行，重复了。</p><table><thead><tr><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>⇓</mo></mrow><annotation encoding="application/x-tex">\Downarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mrel">⇓</span></span></span></span></th></tr></thead><tbody><tr><td style="text-align:center">2</td><td style="text-align:center">1</td><td style="text-align:center">2</td></tr></tbody></table><p>最后一个放 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn></mrow><annotation encoding="application/x-tex">2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span></span></span></span> 也重复了。</p><table><thead><tr><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>⇓</mo></mrow><annotation encoding="application/x-tex">\Downarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mrel">⇓</span></span></span></span></th></tr></thead><tbody><tr><td style="text-align:center">2</td><td style="text-align:center">1</td><td style="text-align:center">3</td></tr></tbody></table><p>那就放 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>3</mn></mrow><annotation encoding="application/x-tex">3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span></span></span></span>，一看可以，输出一下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs text">1    2    3<br>1    3    2<br>2    1    3<br><br></code></pre></td></tr></table></figure><p>接下来就是周而复始的过程，直到全部都枚举完，你的输出应该是这样的：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs text">1    2    3<br>1    3    2<br>2    1    3<br>2    3    1<br>3    1    2<br>3    2    1<br><br></code></pre></td></tr></table></figure><p>我们习惯上把上面的递归过程叫做 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>D</mi><mi>F</mi><mi>S</mi><mo stretchy="false">(</mo><mi>D</mi><mi>e</mi><mi>p</mi><mi>t</mi><mi>h</mi><mo>−</mo><mi>F</mi><mi>i</mi><mi>r</mi><mi>s</mi><mi>t</mi><mo>−</mo><mi>S</mi><mi>e</mi><mi>a</mi><mi>r</mi><mi>c</mi><mi>h</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">DFS(Depth-First-Search)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mord mathdefault">e</span><span class="mord mathdefault">p</span><span class="mord mathdefault">t</span><span class="mord mathdefault">h</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">s</span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault">e</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">c</span><span class="mord mathdefault">h</span><span class="mclose">)</span></span></span></span>，中文叫“深度优先搜索”，就是在一层递归里面有一个循环，每个循环还要跑一个递归，关于 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>D</mi><mi>F</mi><mi>S</mi></mrow><annotation encoding="application/x-tex">DFS</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span></span></span></span> 在数据结构的“图 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>G</mi><mi>r</mi><mi>a</mi><mi>p</mi><mi>h</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(Graph)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">G</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">a</span><span class="mord mathdefault">p</span><span class="mord mathdefault">h</span><span class="mclose">)</span></span></span></span>” 部分也会有讲。用“伪代码”（新词汇又来了hhh）描述这个递归是这样的：</p><ul><li>参数 <code>len</code> 是进入递归之前 <code>stack</code> 的有效长度，所以最开始调用的时候 <code>len</code> 应该是 0；</li><li><code>stack</code> 和 <code>n</code> 被定义为全局变量。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">void</span> <span class="hljs-title function_">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> len)</span> &#123;<br><span class="hljs-keyword">if</span> (len == n) &#123;<br>输出 <span class="hljs-built_in">stack</span>;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br><span class="hljs-keyword">if</span> (i 与 <span class="hljs-built_in">stack</span>[<span class="hljs-number">0</span>] 到 <span class="hljs-built_in">stack</span>[len - <span class="hljs-number">1</span>] 的元素都不重复) &#123;<br><span class="hljs-built_in">stack</span>[len] = i;<br>dfs(len + <span class="hljs-number">1</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>对于某一层递归，进入之前已经填充了 <code>len</code> 个，所以检查重复的时候只要从 <code>stack[0]</code> 检查到 <code>stack[len - 1]</code>。</p><p>可以想见在运行的时候这个 <code>stack</code> 应该是不断伸伸缩缩的，但是在退回上一层的时候并没有删除后面的元素（反正留在那也不影响，因为检查重复是到下标 <code>len - 1</code>，后面的不会被访问到）。</p><p>在 <code>main()</code> 函数里只需要这么写：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    dfs(<span class="hljs-number">0</span>);<br>    <span class="hljs-comment">// 没错我的代码可以很潇洒</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后再把**“输出 stack”**翻译一下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">void</span> <span class="hljs-title function_">print_stack</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%5d&quot;</span>, <span class="hljs-built_in">stack</span>[i]);<br>    &#125;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>翻译一下**“i 与 stack[0] 到 stack[len - 1] 的元素是否重复”**，顺序查找，找到了返回 1，找不到返回 0：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> <span class="hljs-title function_">find_in_stack</span><span class="hljs-params">(<span class="hljs-type">int</span> key, <span class="hljs-type">int</span> len)</span> &#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++) &#123;<br>        <span class="hljs-keyword">if</span> (key == <span class="hljs-built_in">stack</span>[i])<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>大功告成，奉上完整代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> n;<br><span class="hljs-type">int</span> <span class="hljs-built_in">stack</span>[<span class="hljs-number">10</span>];<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">print_stack</span><span class="hljs-params">()</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> len)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">find_in_stack</span><span class="hljs-params">(<span class="hljs-type">int</span> key, <span class="hljs-type">int</span> len)</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    dfs(<span class="hljs-number">0</span>);<br>    <span class="hljs-comment">// 没错我的代码可以很潇洒</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> len)</span> &#123;<br>    <span class="hljs-keyword">if</span> (len == n) &#123;<br>        print_stack();<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-keyword">if</span> (!find_in_stack(i, len)) &#123;<br>            <span class="hljs-built_in">stack</span>[len] = i;<br>            dfs(len + <span class="hljs-number">1</span>);<br>        &#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">print_stack</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%5d&quot;</span>, <span class="hljs-built_in">stack</span>[i]);<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">find_in_stack</span><span class="hljs-params">(<span class="hljs-type">int</span> key, <span class="hljs-type">int</span> len)</span> &#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++)<br>        <span class="hljs-keyword">if</span> (key == <span class="hljs-built_in">stack</span>[i])<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>朴素的 C 语言教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C语言</tag>
      
      <tag>BUAA</tag>
      
      <tag>数据结构</tag>
      
      <tag>全排列</tag>
      
      <tag>递归</tag>
      
      <tag>回溯法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>BUAA 2021-2022毛概复习资料</title>
    <link href="/2022/01/09/BUAA-2021-2022%E6%AF%9B%E6%A6%82%E5%A4%8D%E4%B9%A0%E8%B5%84%E6%96%99/"/>
    <url>/2022/01/09/BUAA-2021-2022%E6%AF%9B%E6%A6%82%E5%A4%8D%E4%B9%A0%E8%B5%84%E6%96%99/</url>
    
    <content type="html"><![CDATA[<p>2021-2022年毛概期末主观题复习范围，参考2022版教材和课程组官方PPT，原文太过敏感，所以贴出代码大家自己 run。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br> <br><span class="hljs-type">unsigned</span> article[<span class="hljs-number">2832</span>] = &#123;<br>        <span class="hljs-number">0xafe62023</span>, <span class="hljs-number">0x82a6e69b</span>, <span class="hljs-number">0xe69f9ce6</span>, <span class="hljs-number">0xa4e5ab9c</span>, <span class="hljs-number">0xa0b9e48d</span>, <span class="hljs-number">0x0a0d0a0d</span>, <span class="hljs-number">0xe4202323</span>, <span class="hljs-number">0xa2e993b8</span>, <span class="hljs-number">0x8cbae498</span>, <span class="hljs-number">0x82a6e520</span>,<br>        <span class="hljs-number">0xe795bde4</span>, <span class="hljs-number">0xa7e88690</span>, <span class="hljs-number">0x9bafe6a3</span>, <span class="hljs-number">0xe4bdb3e6</span>, <span class="hljs-number">0x80e69cb8</span>, <span class="hljs-number">0xb383e69d</span>, <span class="hljs-number">0x0a0d0a0d</span>, <span class="hljs-number">0x20232323</span>, <span class="hljs-number">0xe380b8e4</span>, <span class="hljs-number">0xafe68180</span>,<br>        <span class="hljs-number">0xbdb3e69b</span>, <span class="hljs-number">0xe69cb8e4</span>, <span class="hljs-number">0x83e69d80</span>, <span class="hljs-number">0x849ae7b3</span>, <span class="hljs-number">0xe6a2bde5</span>, <span class="hljs-number">0x92e59088</span>, <span class="hljs-number">0x918fe58c</span>, <span class="hljs-number">0x0d95b1e5</span>, <span class="hljs-number">0x230a0d0a</span>, <span class="hljs-number">0x20232323</span>,<br>        <span class="hljs-number">0xe6202e31</span>, <span class="hljs-number">0xb3e69baf</span>, <span class="hljs-number">0x9cb8e4bd</span>, <span class="hljs-number">0xe69d80e6</span>, <span class="hljs-number">0xbde5b383</span>, <span class="hljs-number">0x9088e6a2</span>, <span class="hljs-number">0xe5918fe5</span>, <span class="hljs-number">0x9ae795b1</span>, <span class="hljs-number">0x868ee584</span>, <span class="hljs-number">0xe6b28fe5</span>,<br>        <span class="hljs-number">0xbbe4a19d</span>, <span class="hljs-number">0x0d0a0db6</span>, <span class="hljs-number">0x202e310a</span>, <span class="hljs-number">0x37313931</span>, <span class="hljs-number">0x818de520</span>, <span class="hljs-number">0xe9889ce6</span>, <span class="hljs-number">0x91e5a99d</span>, <span class="hljs-number">0x99bbe7bd</span>, <span class="hljs-number">0xe5adb8e4</span>, <span class="hljs-number">0x80e9bd9b</span>,<br>        <span class="hljs-number">0xa59de681</span>, <span class="hljs-number">0xe5aca9e9</span>, <span class="hljs-number">0x80e68b85</span>, <span class="hljs-number">0x9788e59d</span>, <span class="hljs-number">0xe481aee5</span>, <span class="hljs-number">0xb9e4bbb8</span>, <span class="hljs-number">0x8cbcef89</span>, <span class="hljs-number">0xe5adb8e4</span>, <span class="hljs-number">0x9de9bd9b</span>, <span class="hljs-number">0xbd91e5a9</span>,<br>        <span class="hljs-number">0xe4899ce6</span>, <span class="hljs-number">0xa7e786ba</span>, <span class="hljs-number">0xa6ade591</span>, <span class="hljs-number">0xe6849ae7</span>, <span class="hljs-number">0xafe5878c</span>, <span class="hljs-number">0x9d80e6bc</span>, <span class="hljs-number">0xefb383e6</span>, <span class="hljs-number">0x0a0d9bbc</span>, <span class="hljs-number">0xe5202e32</span>, <span class="hljs-number">0x88e6b786</span>,<br>        <span class="hljs-number">0xb697e698</span>, <span class="hljs-number">0xe89f9ce6</span>, <span class="hljs-number">0x96e6bfa5</span>, <span class="hljs-number">0xbd9be5b9</span>, <span class="hljs-number">0xe5b6aee5</span>, <span class="hljs-number">0xb8e4b9af</span>, <span class="hljs-number">0xbd9be5ad</span>, <span class="hljs-number">0xe89eaee5</span>, <span class="hljs-number">0xb0e58ca1</span>, <span class="hljs-number">0x8194e981</span>,<br>        <span class="hljs-number">0xe881a6e7</span>, <span class="hljs-number">0x8fe590bf</span>, <span class="hljs-number">0x8c92e58a</span>, <span class="hljs-number">0xe6b3b9e5</span>, <span class="hljs-number">0x8fe594bc</span>, <span class="hljs-number">0x9bbcef98</span>, <span class="hljs-number">0x2e330a0d</span>, <span class="hljs-number">0xadb8e420</span>, <span class="hljs-number">0xe5bd9be5</span>, <span class="hljs-number">0xbae4b185</span>,<br>        <span class="hljs-number">0x9a85e5a7</span>, <span class="hljs-number">0xe586a2e9</span>, <span class="hljs-number">0xbae4bcaf</span>, <span class="hljs-number">0x91b0e6ba</span>, <span class="hljs-number">0xe89bbfe8</span>, <span class="hljs-number">0x9de98ca1</span>, <span class="hljs-number">0xbd91e5a9</span>, <span class="hljs-number">0xe58c92e5</span>, <span class="hljs-number">0xaee8babb</span>, <span class="hljs-number">0x849ae7be</span>,<br>        <span class="hljs-number">0x88e62a2a</span>, <span class="hljs-number">0x9f8ae590</span>, <span class="hljs-number">0xe89eaee5</span>, <span class="hljs-number">0x2a2ab5b7</span>, <span class="hljs-number">0xe6af98e6</span>, <span class="hljs-number">0xb3e69baf</span>, <span class="hljs-number">0x9cb8e4bd</span>, <span class="hljs-number">0xe69d80e6</span>, <span class="hljs-number">0xbde5b383</span>, <span class="hljs-number">0x9088e6a2</span>,<br>        <span class="hljs-number">0xe58c92e5</span>, <span class="hljs-number">0xb1e5918f</span>, <span class="hljs-number">0x849ae795</span>, <span class="hljs-number">0xaee52a2a</span>, <span class="hljs-number">0xb5b7e89e</span>, <span class="hljs-number">0xe7ba9fe5</span>, <span class="hljs-number">0x2a2a80a1</span>, <span class="hljs-number">0x0d8280e3</span>, <span class="hljs-number">0x230a0d0a</span>, <span class="hljs-number">0x20232323</span>,<br>        <span class="hljs-number">0xe6202e32</span>, <span class="hljs-number">0xb3e69baf</span>, <span class="hljs-number">0x9cb8e4bd</span>, <span class="hljs-number">0xe69d80e6</span>, <span class="hljs-number">0xbde5b383</span>, <span class="hljs-number">0x9088e6a2</span>, <span class="hljs-number">0xe5918fe5</span>, <span class="hljs-number">0x9ae795b1</span>, <span class="hljs-number">0x87bfe884</span>, <span class="hljs-number">0x0d8ba8e7</span>,<br>        <span class="hljs-number">0x310a0d0a</span>, <span class="hljs-number">0xbde5202e</span>, <span class="hljs-number">0x9088e6a2</span>, <span class="hljs-number">0xe59abcef</span>, <span class="hljs-number">0x9ce59f9c</span>, <span class="hljs-number">0xa99de9b0</span>, <span class="hljs-number">0xe6bd91e5</span>, <span class="hljs-number">0x9ce6b697</span>, <span class="hljs-number">0x8cbcef9f</span>, <span class="hljs-number">0xe5908fe6</span>,<br>        <span class="hljs-number">0x80e2ba87</span>, <span class="hljs-number">0x9c86e59c</span>, <span class="hljs-number">0xe5919de6</span>, <span class="hljs-number">0x9be5858c</span>, <span class="hljs-number">0x8e9fe5b4</span>, <span class="hljs-number">0xef82b8e5</span>, <span class="hljs-number">0xade68cbc</span>, <span class="hljs-number">0x85a3e8a6</span>, <span class="hljs-number">0xe5baa4e5</span>, <span class="hljs-number">0x94e6968f</span>,<br>        <span class="hljs-number">0x839de6bf</span>, <span class="hljs-number">0xe79d80e2</span>, <span class="hljs-number">0x80e6849a</span>, <span class="hljs-number">0xb383e69d</span>, <span class="hljs-number">0x0d9bbcef</span>, <span class="hljs-number">0x202e320a</span>, <span class="hljs-number">0xe79088e6</span>, <span class="hljs-number">0xbcef9f86</span>, <span class="hljs-number">0x978ae69a</span>, <span class="hljs-number">0xe6a597e6</span>,<br>        <span class="hljs-number">0xbae49888</span>, <span class="hljs-number">0xb697e689</span>, <span class="hljs-number">0xef9f9ce6</span>, <span class="hljs-number">0x2a2a8cbc</span>, <span class="hljs-number">0xe6b096e6</span>, <span class="hljs-number">0xb8e491b0</span>, <span class="hljs-number">0xbbb8e4bb</span>, <span class="hljs-number">0xe989b9e4</span>, <span class="hljs-number">0x91e5a99d</span>, <span class="hljs-number">0x8690e7bd</span>,<br>        <span class="hljs-number">0x2abaaee8</span>, <span class="hljs-number">0x849ae72a</span>, <span class="hljs-number">0xe7bbb3e7</span>, <span class="hljs-number">0x98e99fbb</span>, <span class="hljs-number">0xb0bfe890</span>, <span class="hljs-number">0xe58cbcef</span>, <span class="hljs-number">0x8ee79eae</span>, <span class="hljs-number">0x86bae4b0</span>, <span class="hljs-number">0xa9e92a2a</span>, <span class="hljs-number">0x8b85e5ac</span>,<br>        <span class="hljs-number">0xe49d80e6</span>, <span class="hljs-number">0xb9e4bbb8</span>, <span class="hljs-number">0x8eb8e489</span>, <span class="hljs-number">0xe5adb8e4</span>, <span class="hljs-number">0x9de9bd9b</span>, <span class="hljs-number">0xbd91e5a9</span>, <span class="hljs-number">0xe89eaee5</span>, <span class="hljs-number">0x9ae7b5b7</span>, <span class="hljs-number">0x93bbe784</span>, <span class="hljs-number">0x2a8890e5</span>,<br>        <span class="hljs-number">0x0d0a0d2a</span>, <span class="hljs-number">0x2020200a</span>, <span class="hljs-number">0x3931203e</span>, <span class="hljs-number">0xe5203534</span>, <span class="hljs-number">0xb8e4b4b9</span>, <span class="hljs-number">0xb185e5ad</span>, <span class="hljs-number">0xe583b8e4</span>, <span class="hljs-number">0xbcefa7a4</span>, <span class="hljs-number">0x9bafe68c</span>, <span class="hljs-number">0xe4bdb3e6</span>,<br>        <span class="hljs-number">0x80e69cb8</span>, <span class="hljs-number">0xb383e69d</span>, <span class="hljs-number">0xe59986e5</span>, <span class="hljs-number">0x85e5a585</span>, <span class="hljs-number">0xa0abe79a</span>, <span class="hljs-number">0x0d8280e3</span>, <span class="hljs-number">0x330a0d0a</span>, <span class="hljs-number">0xbbe7202e</span>, <span class="hljs-number">0xadbbe7a7</span>, <span class="hljs-number">0xe5918fe5</span>,<br>        <span class="hljs-number">0xbcef95b1</span>, <span class="hljs-number">0xa3a7e89a</span>, <span class="hljs-number">0xe6be94e6</span>, <span class="hljs-number">0xbae49888</span>, <span class="hljs-number">0xb697e689</span>, <span class="hljs-number">0xe59f9ce6</span>, <span class="hljs-number">0x96e68c92</span>, <span class="hljs-number">0xadb8e4b0</span>, <span class="hljs-number">0xe6bd9be5</span>, <span class="hljs-number">0xabe79088</span>,<br>        <span class="hljs-number">0x8e90e58b</span>, <span class="hljs-number">0xe79088e6</span>, <span class="hljs-number">0x85e5849a</span>, <span class="hljs-number">0x8ebae4b3</span>, <span class="hljs-number">0xa4e72a2a</span>, <span class="hljs-number">0x9abce4be</span>, <span class="hljs-number">0xe4bbb8e4</span>, <span class="hljs-number">0x9de989b9</span>, <span class="hljs-number">0xbd91e5a9</span>, <span class="hljs-number">0xe78c92e5</span>,<br>        <span class="hljs-number">0xbce4bea4</span>, <span class="hljs-number">0xbbb8e49a</span>, <span class="hljs-number">0xe589b9e4</span>, <span class="hljs-number">0xaee8babb</span>, <span class="hljs-number">0xe72a2abe</span>, <span class="hljs-number">0x87e9849a</span>, <span class="hljs-number">0x81a6e88d</span>, <span class="hljs-number">0xe69d80e6</span>, <span class="hljs-number">0x80e3b383</span>, <span class="hljs-number">0x0d0a0d82</span>,<br>        <span class="hljs-number">0x230a0d0a</span>, <span class="hljs-number">0xe4202323</span>, <span class="hljs-number">0x80e38cba</span>, <span class="hljs-number">0xbea4e781</span>, <span class="hljs-number">0xe49abce4</span>, <span class="hljs-number">0xb9e4bbb8</span>, <span class="hljs-number">0xbabbe589</span>, <span class="hljs-number">0xe9beaee8</span>, <span class="hljs-number">0xb7e89381</span>, <span class="hljs-number">0x9d88e5af</span>,<br>        <span class="hljs-number">0xe69f9ce6</span>, <span class="hljs-number">0xb4e7a28e</span>, <span class="hljs-number">0x849ae7a2</span>, <span class="hljs-number">0xe48f84e6</span>, <span class="hljs-number">0x92e589b9</span>, <span class="hljs-number">0x8fbbe78c</span>, <span class="hljs-number">0xe68caae9</span>, <span class="hljs-number">0xaee89995</span>, <span class="hljs-number">0x0d0a0dad</span>, <span class="hljs-number">0x2323230a</span>,<br>        <span class="hljs-number">0x2e312023</span>, <span class="hljs-number">0x9d88e520</span>, <span class="hljs-number">0xe6a5ade6</span>, <span class="hljs-number">0xb4e7a28e</span>, <span class="hljs-number">0x849ae7a2</span>, <span class="hljs-number">0xe48f84e6</span>, <span class="hljs-number">0x0a0d89b9</span>, <span class="hljs-number">0x2e310a0d</span>, <span class="hljs-number">0xa9b7e520</span>, <span class="hljs-number">0xe5ba9be5</span>,<br>        <span class="hljs-number">0xb1e5918f</span>, <span class="hljs-number">0x86bae495</span>, <span class="hljs-number">0xe59188e6</span>, <span class="hljs-number">0x9ae7bd9b</span>, <span class="hljs-number">0xbea4e784</span>, <span class="hljs-number">0xe49abce4</span>, <span class="hljs-number">0xb9e4bbb8</span>, <span class="hljs-number">0xb688e589</span>, <span class="hljs-number">0xefa6bae5</span>, <span class="hljs-number">0x0a0d9bbc</span>,<br>        <span class="hljs-number">0xe4202e32</span>, <span class="hljs-number">0xbce5bab8</span>, <span class="hljs-number">0x9b88e580</span>, <span class="hljs-number">0xe5adb8e4</span>, <span class="hljs-number">0x89e7bd9b</span>, <span class="hljs-number">0xb289e8b9</span>, <span class="hljs-number">0xe4bea4e7</span>, <span class="hljs-number">0xb8e49abc</span>, <span class="hljs-number">0x89b9e4bb</span>, <span class="hljs-number">0xe4908fe6</span>,<br>        <span class="hljs-number">0xbae49bbe</span>, <span class="hljs-number">0xe52a2a86</span>, <span class="hljs-number">0xb4e89dae</span>, <span class="hljs-number">0x8fbbe7b5</span>, <span class="hljs-number">0xe38caae9</span>, <span class="hljs-number">0x90e78180</span>, <span class="hljs-number">0xbaaee886</span>, <span class="hljs-number">0xe58687e5</span>, <span class="hljs-number">0x80e387a4</span>, <span class="hljs-number">0xa989e781</span>,<br>        <span class="hljs-number">0xe5a8b4e8</span>, <span class="hljs-number">0xa1e7ba9f</span>, <span class="hljs-number">0xef2a2a80</span>, <span class="hljs-number">0x0a0d9bbc</span>, <span class="hljs-number">0xe4202e33</span>, <span class="hljs-number">0xafe5b0b8</span>, <span class="hljs-number">0x86bae48c</span>, <span class="hljs-number">0xe591a7e7</span>, <span class="hljs-number">0xa4e7a6ad</span>, <span class="hljs-number">0x9abce4be</span>,<br>        <span class="hljs-number">0xe4bbb8e4</span>, <span class="hljs-number">0x9ae789b9</span>, <span class="hljs-number">0x8690e784</span>, <span class="hljs-number">0xe5baaee8</span>, <span class="hljs-number">0xb7e89eae</span>, <span class="hljs-number">0x8280e3b5</span>, <span class="hljs-number">0x0a0d0a0d</span>, <span class="hljs-number">0x23232323</span>, <span class="hljs-number">0x202e3220</span>, <span class="hljs-number">0xe69d88e5</span>,<br>        <span class="hljs-number">0x8ee6a5ad</span>, <span class="hljs-number">0xa2b4e7a2</span>, <span class="hljs-number">0xe7849ae7</span>, <span class="hljs-number">0xaae98fbb</span>, <span class="hljs-number">0x9995e68c</span>, <span class="hljs-number">0x0dadaee8</span>, <span class="hljs-number">0x310a0d0a</span>, <span class="hljs-number">0xbfe5202e</span>, <span class="hljs-number">0xbba1e985</span>, <span class="hljs-number">0xe98a8ae6</span>,<br>        <span class="hljs-number">0x85e5aca9</span>, <span class="hljs-number">0x9d80e68b</span>, <span class="hljs-number">0xe4bbb8e4</span>, <span class="hljs-number">0xb8e489b9</span>, <span class="hljs-number">0xadb8e48e</span>, <span class="hljs-number">0xe5bd9be5</span>, <span class="hljs-number">0x99e99eae</span>, <span class="hljs-number">0xb89be785</span>, <span class="hljs-number">0xe593bbe7</span>, <span class="hljs-number">0xbcef8890</span>,<br>        <span class="hljs-number">0xa28ee68c</span>, <span class="hljs-number">0xe7a2b4e7</span>, <span class="hljs-number">0x90e5a6ac</span>, <span class="hljs-number">0xadb8e488</span>, <span class="hljs-number">0xe7bd9be5</span>, <span class="hljs-number">0x82e7b989</span>, <span class="hljs-number">0x849ae7b9</span>, <span class="hljs-number">0xe4bea4e7</span>, <span class="hljs-number">0xb8e49abc</span>, <span class="hljs-number">0x89b9e4bb</span>,<br>        <span class="hljs-number">0xe89381e9</span>, <span class="hljs-number">0xbcefafb7</span>, <span class="hljs-number">0x320a0d9b</span>, <span class="hljs-number">0xbfe5202e</span>, <span class="hljs-number">0xbba1e985</span>, <span class="hljs-number">0xe7a3ade6</span>, <span class="hljs-number">0xaee8aea1</span>, <span class="hljs-number">0x86afe8a4</span>, <span class="hljs-number">0xe4bea4e7</span>, <span class="hljs-number">0xb8e49abc</span>,<br>        <span class="hljs-number">0x89b9e4bb</span>, <span class="hljs-number">0xe4bea4e7</span>, <span class="hljs-number">0x9ae79abc</span>, <span class="hljs-number">0xbbb8e484</span>, <span class="hljs-number">0xe781a6e8</span>, <span class="hljs-number">0x9be79b9f</span>, <span class="hljs-number">0x8c92e5be</span>, <span class="hljs-number">0xe6ba9fe5</span>, <span class="hljs-number">0xbbe4ac9c</span>, <span class="hljs-number">0xa18ae5bb</span>,<br>        <span class="hljs-number">0xe98cbcef</span>, <span class="hljs-number">0xb8e4869b</span>, <span class="hljs-number">0x9b8ae5ad</span>, <span class="hljs-number">0xe58f87e9</span>, <span class="hljs-number">0xb1e5918f</span>, <span class="hljs-number">0xbea4e795</span>, <span class="hljs-number">0xe49abce4</span>, <span class="hljs-number">0xb9e4bbb8</span>, <span class="hljs-number">0x9bbcef89</span>, <span class="hljs-number">0x2e330a0d</span>,<br>        <span class="hljs-number">0x85bfe520</span>, <span class="hljs-number">0xe4bba1e9</span>, <span class="hljs-number">0xaee58ebb</span>, <span class="hljs-number">0x8599e99e</span>, <span class="hljs-number">0xe5ba87e5</span>, <span class="hljs-number">0xbfe8918f</span>, <span class="hljs-number">0x8ca1e89b</span>, <span class="hljs-number">0xe4bea4e7</span>, <span class="hljs-number">0xb8e49abc</span>, <span class="hljs-number">0x89b9e4bb</span>,<br>        <span class="hljs-number">0xe8babbe5</span>, <span class="hljs-number">0xbcefbeae</span>, <span class="hljs-number">0xbabbe58c</span>, <span class="hljs-number">0xe8beaee8</span>, <span class="hljs-number">0xa8e684a7</span>, <span class="hljs-number">0x8c92e5a1</span>, <span class="hljs-number">0xe59f80e9</span>, <span class="hljs-number">0xa6e8a6ba</span>, <span class="hljs-number">0x8c92e581</span>, <span class="hljs-number">0xe5bd9be5</span>,<br>        <span class="hljs-number">0x9be79b8a</span>, <span class="hljs-number">0x8280e9b8</span>, <span class="hljs-number">0xef94bae5</span>, <span class="hljs-number">0xb8e48cbc</span>, <span class="hljs-number">0xbd83e88d</span>, <span class="hljs-number">0xe4a580e6</span>, <span class="hljs-number">0xb1e68eba</span>, <span class="hljs-number">0x9088e682</span>, <span class="hljs-number">0x0d9bbcef</span>, <span class="hljs-number">0x202e340a</span>,<br>        <span class="hljs-number">0xe985bfe5</span>, <span class="hljs-number">0x8fe5bba1</span>, <span class="hljs-number">0x95b1e591</span>, <span class="hljs-number">0xe4bea4e7</span>, <span class="hljs-number">0xb8e49abc</span>, <span class="hljs-number">0x89b9e4bb</span>, <span class="hljs-number">0xe491b0e6</span>, <span class="hljs-number">0xbcefbbb8</span>, <span class="hljs-number">0xa581e58c</span>, <span class="hljs-number">0xe7a885e5</span>,<br>        <span class="hljs-number">0xbce4bea4</span>, <span class="hljs-number">0xbbb8e49a</span>, <span class="hljs-number">0xe689b9e4</span>, <span class="hljs-number">0xb2e695b3</span>, <span class="hljs-number">0x9bbcefbb</span>, <span class="hljs-number">0x2e350a0d</span>, <span class="hljs-number">0x85bfe520</span>, <span class="hljs-number">0xe5bba1e9</span>, <span class="hljs-number">0x8ce69a9d</span>, <span class="hljs-number">0x9a85e581</span>,<br>        <span class="hljs-number">0xe6849ae7</span>, <span class="hljs-number">0xb8e491b0</span>, <span class="hljs-number">0x869be9bb</span>, <span class="hljs-number">0xe5adb8e4</span>, <span class="hljs-number">0x92e5b688</span>, <span class="hljs-number">0x869be98c</span>, <span class="hljs-number">0xe993bde4</span>, <span class="hljs-number">0xafe586a2</span>, <span class="hljs-number">0xb688e5bc</span>, <span class="hljs-number">0xefa6bae5</span>,<br>        <span class="hljs-number">0x8ae58cbc</span>, <span class="hljs-number">0xbabce5a0</span>, <span class="hljs-number">0xe6a789e6</span>, <span class="hljs-number">0x85e5bf94</span>, <span class="hljs-number">0xbabbe59a</span>, <span class="hljs-number">0xefbeaee8</span>, <span class="hljs-number">0x0a0d9bbc</span>, <span class="hljs-number">0xe5202e36</span>, <span class="hljs-number">0xa1e985bf</span>, <span class="hljs-number">0x9a9de5bb</span>,<br>        <span class="hljs-number">0xe5818ce6</span>, <span class="hljs-number">0xa4e5b9af</span>, <span class="hljs-number">0x80bce596</span>, <span class="hljs-number">0xefbe94e6</span>, <span class="hljs-number">0x80e58cbc</span>, <span class="hljs-number">0xb489e99f</span>, <span class="hljs-number">0xe58c92e5</span>, <span class="hljs-number">0x94e6b890</span>, <span class="hljs-number">0xbabae4b6</span>, <span class="hljs-number">0xe6bbb1e7</span>,<br>        <span class="hljs-number">0x98e68796</span>, <span class="hljs-number">0x9088e68e</span>, <span class="hljs-number">0xe59c9ee6</span>, <span class="hljs-number">0xaee8babb</span>, <span class="hljs-number">0xbea4e7be</span>, <span class="hljs-number">0xe49abce4</span>, <span class="hljs-number">0xb9e4bbb8</span>, <span class="hljs-number">0x8cbcef89</span>, <span class="hljs-number">0xe88db8e4</span>, <span class="hljs-number">0x85e5bd83</span>,<br>        <span class="hljs-number">0xb7b5e8b3</span>, <span class="hljs-number">0xe6a897e9</span>, <span class="hljs-number">0xbbe5a59d</span>, <span class="hljs-number">0xbeaee8ba</span>, <span class="hljs-number">0x0d8280e3</span>, <span class="hljs-number">0x230a0d0a</span>, <span class="hljs-number">0xb8e42023</span>, <span class="hljs-number">0x98a2e993</span>, <span class="hljs-number">0x209b9be5</span>, <span class="hljs-number">0xe482a6e5</span>,<br>        <span class="hljs-number">0x90e795bd</span>, <span class="hljs-number">0xa3a7e886</span>, <span class="hljs-number">0xe8a0b9e4</span>, <span class="hljs-number">0xb9e591bf</span>, <span class="hljs-number">0xb096e6b3</span>, <span class="hljs-number">0xe4b697e6</span>, <span class="hljs-number">0xb8e4a3bb</span>, <span class="hljs-number">0xbd9be5ad</span>, <span class="hljs-number">0xe8b989e7</span>, <span class="hljs-number">0xa4e7b289</span>,<br>        <span class="hljs-number">0x9abce4be</span>, <span class="hljs-number">0xe4bbb8e4</span>, <span class="hljs-number">0x80e689b9</span>, <span class="hljs-number">0xb383e69d</span>, <span class="hljs-number">0xe58a8fe5</span>, <span class="hljs-number">0x8ee5b685</span>, <span class="hljs-number">0xb28fe586</span>, <span class="hljs-number">0xe4b09ce5</span>, <span class="hljs-number">0x0a0d8dbd</span>, <span class="hljs-number">0x23230a0d</span>,<br>        <span class="hljs-number">0xb8e42023</span>, <span class="hljs-number">0x8180e380</span>, <span class="hljs-number">0xe8a0b9e4</span>, <span class="hljs-number">0xb9e591bf</span>, <span class="hljs-number">0xb096e6b3</span>, <span class="hljs-number">0xe4b697e6</span>, <span class="hljs-number">0xb8e4a3bb</span>, <span class="hljs-number">0xbd9be5ad</span>, <span class="hljs-number">0xe8b989e7</span>, <span class="hljs-number">0xa4e7b289</span>,<br>        <span class="hljs-number">0x9abce4be</span>, <span class="hljs-number">0xe4bbb8e4</span>, <span class="hljs-number">0x80e689b9</span>, <span class="hljs-number">0xb383e69d</span>, <span class="hljs-number">0xe79b88e5</span>, <span class="hljs-number">0x9ae78bab</span>, <span class="hljs-number">0xbea4e784</span>, <span class="hljs-number">0xe59abce4</span>, <span class="hljs-number">0x8fe5868e</span>, <span class="hljs-number">0xa19de6b2</span>,<br>        <span class="hljs-number">0x0db6bbe4</span>, <span class="hljs-number">0x230a0d0a</span>, <span class="hljs-number">0x20232323</span>, <span class="hljs-number">0xe4202e31</span>, <span class="hljs-number">0x9be5adb8</span>, <span class="hljs-number">0xb989e7bd</span>, <span class="hljs-number">0xe7b289e8</span>, <span class="hljs-number">0xbce4bea4</span>, <span class="hljs-number">0xbbb8e49a</span>, <span class="hljs-number">0xe889b9e4</span>,<br>        <span class="hljs-number">0x85e59bbf</span>, <span class="hljs-number">0xb096e6a5</span>, <span class="hljs-number">0xe4b697e6</span>, <span class="hljs-number">0x0a0da3bb</span>, <span class="hljs-number">0xade60a0d</span>, <span class="hljs-number">0xbaaee8a4</span>, <span class="hljs-number">0xe6ad96e6</span>, <span class="hljs-number">0x87e5908f</span>, <span class="hljs-number">0x8ebae4ba</span>, <span class="hljs-number">0x8de52a2a</span>,<br>        <span class="hljs-number">0x9db9e481</span>, <span class="hljs-number">0x2aa7a4e5</span>, <span class="hljs-number">0x0d0a0d2a</span>, <span class="hljs-number">0xe6202d0a</span>, <span class="hljs-number">0x94e6af98</span>, <span class="hljs-number">0xa99de9b9</span>, <span class="hljs-number">0xe680bce5</span>, <span class="hljs-number">0xbbe4be94</span>, <span class="hljs-number">0xa59de6a5</span>, <span class="hljs-number">0xe5b989e7</span>,<br>        <span class="hljs-number">0x98e6ab88</span>, <span class="hljs-number">0x818de5af</span>, <span class="hljs-number">0xe5ab85e5</span>, <span class="hljs-number">0xbbe4a7a4</span>, <span class="hljs-number">0xa59de6a5</span>, <span class="hljs-number">0xe59188e6</span>, <span class="hljs-number">0x8fe5bd9b</span>, <span class="hljs-number">0x97bee596</span>, <span class="hljs-number">0xe5849ae7</span>, <span class="hljs-number">0x8fe5868e</span>,<br>        <span class="hljs-number">0xa780e6b2</span>, <span class="hljs-number">0xe59088e6</span>, <span class="hljs-number">0x92e5b1b0</span>, <span class="hljs-number">0x918fe58c</span>, <span class="hljs-number">0xe79f94e7</span>, <span class="hljs-number">0x8ee5849a</span>, <span class="hljs-number">0xb28fe586</span>, <span class="hljs-number">0xe5a780e6</span>, <span class="hljs-number">0x9de9988f</span>, <span class="hljs-number">0x849ae7a9</span>,<br>        <span class="hljs-number">0xe785bfe5</span>, <span class="hljs-number">0xbbe7b684</span>, <span class="hljs-number">0x9c9ee693</span>, <span class="hljs-number">0x0d9bbcef</span>, <span class="hljs-number">0xe6202d0a</span>, <span class="hljs-number">0x88e6af98</span>, <span class="hljs-number">0xbd9be591</span>, <span class="hljs-number">0xe4bea4e7</span>, <span class="hljs-number">0xb8e49abc</span>, <span class="hljs-number">0x81a6e8bb</span>,<br>        <span class="hljs-number">0xe79b9fe7</span>, <span class="hljs-number">0xbde8be9b</span>, <span class="hljs-number">0x968ce5ac</span>, <span class="hljs-number">0xe5849ae7</span>, <span class="hljs-number">0x84e785bf</span>, <span class="hljs-number">0x93bbe7b6</span>, <span class="hljs-number">0xef9c9ee6</span>, <span class="hljs-number">0x0a0d9bbc</span>, <span class="hljs-number">0x85e5202d</span>, <span class="hljs-number">0x899ce6b7</span>,<br>        <span class="hljs-number">0xe5b0b8e4</span>, <span class="hljs-number">0x86e58caf</span>, <span class="hljs-number">0xb5b6e685</span>, <span class="hljs-number">0xe68c92e5</span>, <span class="hljs-number">0xbfe8b1b7</span>, <span class="hljs-number">0x8f84e69c</span>, <span class="hljs-number">0xefb495e8</span>, <span class="hljs-number">0x0a0d9bbc</span>, <span class="hljs-number">0x9ce5202d</span>, <span class="hljs-number">0xadb8e4a8</span>,<br>        <span class="hljs-number">0xe48e8de5</span>, <span class="hljs-number">0xb0e6baba</span>, <span class="hljs-number">0xb185e591</span>, <span class="hljs-number">0xe58c92e5</span>, <span class="hljs-number">0x8fe5bd9b</span>, <span class="hljs-number">0x95b1e591</span>, <span class="hljs-number">0xe3b28fe5</span>, <span class="hljs-number">0xb8e48180</span>, <span class="hljs-number">0x8e8de5ad</span>, <span class="hljs-number">0xe691b0e6</span>,<br>        <span class="hljs-number">0x8fe58f97</span>, <span class="hljs-number">0x95b1e591</span>, <span class="hljs-number">0xe3b28fe5</span>, <span class="hljs-number">0xb8e48180</span>, <span class="hljs-number">0x8c95e796</span>, <span class="hljs-number">0xe4bea4e7</span>, <span class="hljs-number">0xb8e49abc</span>, <span class="hljs-number">0x89b9e4bb</span>, <span class="hljs-number">0xe5918fe5</span>, <span class="hljs-number">0x8fe595b1</span>,<br>        <span class="hljs-number">0x8c92e5b2</span>, <span class="hljs-number">0xe7babae4</span>, <span class="hljs-number">0xa4e7bbb1</span>, <span class="hljs-number">0x9abce4be</span>, <span class="hljs-number">0xe5918fe5</span>, <span class="hljs-number">0x8fe595b1</span>, <span class="hljs-number">0xb785e5b2</span>, <span class="hljs-number">0xe9899ce6</span>, <span class="hljs-number">0xa4e58d87</span>, <span class="hljs-number">0x8f84e6a7</span>,<br>        <span class="hljs-number">0xe389b9e4</span>, <span class="hljs-number">0x0a0d8280</span>, <span class="hljs-number">0x23230a0d</span>, <span class="hljs-number">0x32202323</span>, <span class="hljs-number">0xb8e4202e</span>, <span class="hljs-number">0x8c95e796</span>, <span class="hljs-number">0xe7a3ade6</span>, <span class="hljs-number">0x8ee58fbb</span>, <span class="hljs-number">0xbe99e786</span>, <span class="hljs-number">0xe6b4b9e5</span>,<br>        <span class="hljs-number">0x9ce6aa9c</span>, <span class="hljs-number">0x8bb9e489</span>, <span class="hljs-number">0xe5a7a4e5</span>, <span class="hljs-number">0xb1e5988f</span>, <span class="hljs-number">0x0d0a0d80</span>, <span class="hljs-number">0xbbb8e40a</span>, <span class="hljs-number">0xe881a6e8</span>, <span class="hljs-number">0x8ee7a8a1</span>, <span class="hljs-number">0x9abcefb0</span>, <span class="hljs-number">0x0a0d0a0d</span>,<br>        <span class="hljs-number">0xe4202e31</span>, <span class="hljs-number">0x95e796b8</span>, <span class="hljs-number">0x8fbbe78c</span>, <span class="hljs-number">0xe78eb5e6</span>, <span class="hljs-number">0x9be58889</span>, <span class="hljs-number">0xb1b7e6be</span>, <span class="hljs-number">0xe5bb88e5</span>, <span class="hljs-number">0x8ce5988f</span>, <span class="hljs-number">0x8d89e596</span>, <span class="hljs-number">0xe68089e6</span>,<br>        <span class="hljs-number">0x9ce6aa9c</span>, <span class="hljs-number">0x8cbcef89</span>, <span class="hljs-number">0xe5b096e6</span>, <span class="hljs-number">0xbbe7b485</span>, <span class="hljs-number">0x8eb5e68f</span>, <span class="hljs-number">0xe593bde4</span>, <span class="hljs-number">0x8fe58c92</span>, <span class="hljs-number">0x95b1e591</span>, <span class="hljs-number">0xe5adb8e4</span>, <span class="hljs-number">0xaee5bd9b</span>,<br>        <span class="hljs-number">0xa89ce5b6</span>, <span class="hljs-number">0xe796b8e4</span>, <span class="hljs-number">0xbbe78c95</span>, <span class="hljs-number">0x8eb5e68f</span>, <span class="hljs-number">0xe6a08de5</span>, <span class="hljs-number">0xb6e8ae8d</span>, <span class="hljs-number">0xa59de68a</span>, <span class="hljs-number">0xe78ab6e8</span>, <span class="hljs-number">0x9ae7849a</span>, <span class="hljs-number">0xbdbbe484</span>,<br>        <span class="hljs-number">0xef9da2e9</span>, <span class="hljs-number">0xbbe78cbc</span>, <span class="hljs-number">0x8eb5e68f</span>, <span class="hljs-number">0xe5adb8e4</span>, <span class="hljs-number">0x80e283bf</span>, <span class="hljs-number">0xaa87e89c</span>, <span class="hljs-number">0xe5bfa5e8</span>, <span class="hljs-number">0xb8e49190</span>, <span class="hljs-number">0x9d80e29c</span>, <span class="hljs-number">0x0d9bbcef</span>,<br>        <span class="hljs-number">0x202e320a</span>, <span class="hljs-number">0xe4b096e6</span>, <span class="hljs-number">0xbde880b8</span>, <span class="hljs-number">0x91a7e7ae</span>, <span class="hljs-number">0xe9808ae6</span>, <span class="hljs-number">0x91e5a99d</span>, <span class="hljs-number">0x8c92e5bd</span>, <span class="hljs-number">0xe4a7bae4</span>, <span class="hljs-number">0x8fe59ab8</span>, <span class="hljs-number">0xa99de998</span>,<br>        <span class="hljs-number">0xe6a6b8e5</span>, <span class="hljs-number">0x9ae7a59d</span>, <span class="hljs-number">0xb096e684</span>, <span class="hljs-number">0xe48899e9</span>, <span class="hljs-number">0xb0e8a3bb</span>, <span class="hljs-number">0x8c92e5a2</span>, <span class="hljs-number">0xe780bfe6</span>, <span class="hljs-number">0xabe78883</span>, <span class="hljs-number">0x89bae49e</span>, <span class="hljs-number">0xe68d89e5</span>,<br>        <span class="hljs-number">0x9ce68089</span>, <span class="hljs-number">0x899ce6aa</span>, <span class="hljs-number">0x0d9bbcef</span>, <span class="hljs-number">0x202e330a</span>, <span class="hljs-number">0xe9bd9be5</span>, <span class="hljs-number">0x8ae58599</span>, <span class="hljs-number">0x8f87e99b</span>, <span class="hljs-number">0xe6b9afe5</span>, <span class="hljs-number">0x9ae794af</span>, <span class="hljs-number">0x988fe584</span>,<br>        <span class="hljs-number">0xe5968ce5</span>, <span class="hljs-number">0x89e68d89</span>, <span class="hljs-number">0xaa9ce680</span>, <span class="hljs-number">0xef899ce6</span>, <span class="hljs-number">0x8fe58cbc</span>, <span class="hljs-number">0xbebee891</span>, <span class="hljs-number">0xe5bd9be5</span>, <span class="hljs-number">0xaee5b6ae</span>, <span class="hljs-number">0x9b8ae59e</span>, <span class="hljs-number">0xe98bb8e4</span>,<br>        <span class="hljs-number">0xbcef8d99</span>, <span class="hljs-number">0x918fe58c</span>, <span class="hljs-number">0xe495b1e5</span>, <span class="hljs-number">0x9be5adb8</span>, <span class="hljs-number">0xb6aee5bd</span>, <span class="hljs-number">0xe89bb4e5</span>, <span class="hljs-number">0xbcefb7b5</span>, <span class="hljs-number">0x340a0d9b</span>, <span class="hljs-number">0x85e5202e</span>, <span class="hljs-number">0x8390e7a8</span>,<br>        <span class="hljs-number">0xe7bbb2e6</span>, <span class="hljs-number">0xbde48690</span>, <span class="hljs-number">0xbbb3e793</span>, <span class="hljs-number">0xe4849ae7</span>, <span class="hljs-number">0x80e98db8</span>, <span class="hljs-number">0x94bae582</span>, <span class="hljs-number">0xe48180e3</span>, <span class="hljs-number">0xafe58db8</span>, <span class="hljs-number">0xb0a7e7b9</span>, <span class="hljs-number">0xe68d89e5</span>,<br>        <span class="hljs-number">0x9ce68089</span>, <span class="hljs-number">0x899ce6aa</span>, <span class="hljs-number">0xe88cbcef</span>, <span class="hljs-number">0x96e6bfa5</span>, <span class="hljs-number">0xbd9be5b9</span>, <span class="hljs-number">0xe4b6aee5</span>, <span class="hljs-number">0xafe5bbb8</span>, <span class="hljs-number">0x849ae7bc</span>, <span class="hljs-number">0xe9bd9be5</span>, <span class="hljs-number">0x94e68599</span>,<br>        <span class="hljs-number">0xbbb2e6bf</span>, <span class="hljs-number">0xe68fbbe7</span>, <span class="hljs-number">0xa7e78eb5</span>, <span class="hljs-number">0x8fbae5a9</span>, <span class="hljs-number">0xe4be9ae9</span>, <span class="hljs-number">0xb8e4a5bb</span>, <span class="hljs-number">0xa7bbe7ba</span>, <span class="hljs-number">0xe58cbcef</span>, <span class="hljs-number">0xb1e5918f</span>, <span class="hljs-number">0xadb8e495</span>,<br>        <span class="hljs-number">0xe5bd9be5</span>, <span class="hljs-number">0x8fe5b6ae</span>, <span class="hljs-number">0x80a8e891</span>, <span class="hljs-number">0xe6839de6</span>, <span class="hljs-number">0xa4e5a989</span>, <span class="hljs-number">0x8cbcefa7</span>, <span class="hljs-number">0xe7a885e5</span>, <span class="hljs-number">0xb2e68390</span>, <span class="hljs-number">0x8690e7bb</span>, <span class="hljs-number">0xe68ab6e8</span>,<br>        <span class="hljs-number">0xb6e8a59d</span>, <span class="hljs-number">0xac85e58a</span>, <span class="hljs-number">0xe5b3b9e5</span>, <span class="hljs-number">0x90e78890</span>, <span class="hljs-number">0x9bbcef86</span>, <span class="hljs-number">0x2e350a0d</span>, <span class="hljs-number">0xbabae420</span>, <span class="hljs-number">0xe5bbb1e7</span>, <span class="hljs-number">0x80e98d89</span>, <span class="hljs-number">0xbd91e594</span>,<br>        <span class="hljs-number">0xe790bfe8</span>, <span class="hljs-number">0xbce4849a</span>, <span class="hljs-number">0x9a88e691</span>, <span class="hljs-number">0xe58eb8e4</span>, <span class="hljs-number">0x89e5b185</span>, <span class="hljs-number">0x8089e68d</span>, <span class="hljs-number">0xe6aa9ce6</span>, <span class="hljs-number">0x80e3899c</span>, <span class="hljs-number">0x0d0a0d82</span>, <span class="hljs-number">0x8c92e50a</span>,<br>        <span class="hljs-number">0xe4b3b9e5</span>, <span class="hljs-number">0x8fe58eb8</span>, <span class="hljs-number">0x95b1e591</span>, <span class="hljs-number">0xe68dbbe4</span>, <span class="hljs-number">0x97e6af98</span>, <span class="hljs-number">0xa3bbe4b6</span>, <span class="hljs-number">0xe9bbb8e4</span>, <span class="hljs-number">0xbcef98a2</span>, <span class="hljs-number">0x86bde48c</span>, <span class="hljs-number">0xe4af98e6</span>,<br>        <span class="hljs-number">0xa8e78db8</span>, <span class="hljs-number">0x9aaee5b3</span>, <span class="hljs-number">0xe4a780e6</span>, <span class="hljs-number">0xa1e78db8</span>, <span class="hljs-number">0x9aaee5ae</span>, <span class="hljs-number">0xe6a780e6</span>, <span class="hljs-number">0xb8e4b49b</span>, <span class="hljs-number">0x81aae7ba</span>, <span class="hljs-number">0xefba87e5</span>, <span class="hljs-number">0x0a0d9bbc</span>,<br>        <span class="hljs-number">0xb8e40a0d</span>, <span class="hljs-number">0xbd9be5ad</span>, <span class="hljs-number">0xe49088e6</span>, <span class="hljs-number">0xb8e4bab8</span>, <span class="hljs-number">0x8c95e796</span>, <span class="hljs-number">0xe5bca0e6</span>, <span class="hljs-number">0xbce680b1</span>, <span class="hljs-number">0x988fe594</span>, <span class="hljs-number">0xe4849ae7</span>, <span class="hljs-number">0xa6e8bbb8</span>,<br>        <span class="hljs-number">0xa88ee681</span>, <span class="hljs-number">0xe5a88ae5</span>, <span class="hljs-number">0x87e99b8a</span>, <span class="hljs-number">0x9bbcef8f</span>, <span class="hljs-number">0x0a0d0a0d</span>, <span class="hljs-number">0xe5a7a4e5</span>, <span class="hljs-number">0xb1e5988f</span>, <span class="hljs-number">0xa6b8e580</span>, <span class="hljs-number">0xe5a59de6</span>, <span class="hljs-number">0x8ce6a7a4</span>,<br>        <span class="hljs-number">0x9888e691</span>, <span class="hljs-number">0xe48cbcef</span>, <span class="hljs-number">0xb8e59fb9</span>, <span class="hljs-number">0xa59de6a6</span>, <span class="hljs-number">0xe6a7a4e5</span>, <span class="hljs-number">0x81e9ba9c</span>, <span class="hljs-number">0x8280e387</span>, <span class="hljs-number">0x0a0d0a0d</span>, <span class="hljs-number">0x23232323</span>, <span class="hljs-number">0x202e3320</span>,<br>        <span class="hljs-number">0xe5adb8e4</span>, <span class="hljs-number">0xb0e68e8d</span>, <span class="hljs-number">0x8f97e691</span>, <span class="hljs-number">0xe59fbce4</span>, <span class="hljs-number">0xa4e5a7a4</span>, <span class="hljs-number">0xb485e58d</span>, <span class="hljs-number">0xe5a3ade6</span>, <span class="hljs-number">0xbae484a4</span>, <span class="hljs-number">0xb385e58e</span>, <span class="hljs-number">0xe6ae94e9</span>,<br>        <span class="hljs-number">0x9ce6b697</span>, <span class="hljs-number">0x0d0a0d9f</span>, <span class="hljs-number">0x2323230a</span>, <span class="hljs-number">0x8cbae420</span>, <span class="hljs-number">0xe48180e3</span>, <span class="hljs-number">0xbfe8a0b9</span>, <span class="hljs-number">0xb3b9e591</span>, <span class="hljs-number">0xe6b096e6</span>, <span class="hljs-number">0xbbe4b697</span>, <span class="hljs-number">0xadb8e4a3</span>,<br>        <span class="hljs-number">0xe7bd9be5</span>, <span class="hljs-number">0x89e8b989</span>, <span class="hljs-number">0xbea4e7b2</span>, <span class="hljs-number">0xe49abce4</span>, <span class="hljs-number">0xb9e4bbb8</span>, <span class="hljs-number">0x9d80e689</span>, <span class="hljs-number">0xe7b383e6</span>, <span class="hljs-number">0x8ee5849a</span>, <span class="hljs-number">0xb28fe586</span>, <span class="hljs-number">0xe4b09ce5</span>,<br>        <span class="hljs-number">0x0a0d8dbd</span>, <span class="hljs-number">0x23230a0d</span>, <span class="hljs-number">0x31202323</span>, <span class="hljs-number">0xbde5202e</span>, <span class="hljs-number">0xa3bbe493</span>, <span class="hljs-number">0xe5aca9e9</span>, <span class="hljs-number">0x80e68b85</span>, <span class="hljs-number">0xbbb8e49d</span>, <span class="hljs-number">0xef89b9e4</span>, <span class="hljs-number">0x31328cbc</span>,<br>        <span class="hljs-number">0x96b8e420</span>, <span class="hljs-number">0xe9aabae7</span>, <span class="hljs-number">0x85e5aca9</span>, <span class="hljs-number">0x9d80e68b</span>, <span class="hljs-number">0xe4bbb8e4</span>, <span class="hljs-number">0x0a0d89b9</span>, <span class="hljs-number">0xa7e80a0d</span>, <span class="hljs-number">0x8a87e9a3</span>, <span class="hljs-number">0x0d9abcef</span>, <span class="hljs-number">0x2d0a0d0a</span>,<br>        <span class="hljs-number">0x9a9de520</span>, <span class="hljs-number">0xe9818ce6</span>, <span class="hljs-number">0x85e5aca9</span>, <span class="hljs-number">0x9d80e68b</span>, <span class="hljs-number">0xe4bbb8e4</span>, <span class="hljs-number">0xbcef89b9</span>, <span class="hljs-number">0xbeb8e48c</span>, <span class="hljs-number">0xe9b7b5e8</span>, <span class="hljs-number">0x85e5aca9</span>, <span class="hljs-number">0x9d80e68b</span>,<br>        <span class="hljs-number">0xe4bbb8e4</span>, <span class="hljs-number">0x9ae789b9</span>, <span class="hljs-number">0x8985e584</span>, <span class="hljs-number">0xe689bee8</span>, <span class="hljs-number">0xb8e59797</span>, <span class="hljs-number">0x9bbcef9c</span>, <span class="hljs-number">0x202d0a0d</span>, <span class="hljs-number">0xe68eb8e4</span>, <span class="hljs-number">0xbfe4b697</span>, <span class="hljs-number">0x9bbfe8b1</span>,<br>        <span class="hljs-number">0xe5918fe5</span>, <span class="hljs-number">0xa9e995b1</span>, <span class="hljs-number">0x8b85e5ac</span>, <span class="hljs-number">0xe49d80e6</span>, <span class="hljs-number">0xb9e4bbb8</span>, <span class="hljs-number">0x8cbcef89</span>, <span class="hljs-number">0xe880bce5</span>, <span class="hljs-number">0xbae49fbe</span>, <span class="hljs-number">0xaca9e986</span>, <span class="hljs-number">0xe68b85e5</span>,<br>        <span class="hljs-number">0xb8e49d80</span>, <span class="hljs-number">0x89b9e4bb</span>, <span class="hljs-number">0xe6849ae7</span>, <span class="hljs-number">0xa2e5b096</span>, <span class="hljs-number">0x8c95e783</span>, <span class="hljs-number">0x0d9bbcef</span>, <span class="hljs-number">0xe4202d0a</span>, <span class="hljs-number">0x85e5a5bb</span>, <span class="hljs-number">0xb096e6a8</span>, <span class="hljs-number">0xe986a7e8</span>,<br>        <span class="hljs-number">0xb7e68e87</span>, <span class="hljs-number">0x968ce5b1</span>, <span class="hljs-number">0xe586bae4</span>, <span class="hljs-number">0x85e5b9af</span>, <span class="hljs-number">0xa7bae4b1</span>, <span class="hljs-number">0xe69a85e5</span>, <span class="hljs-number">0x94e6a789</span>, <span class="hljs-number">0x84a7e8bf</span>, <span class="hljs-number">0xe38bbee5</span>, <span class="hljs-number">0xa4e78180</span>,<br>        <span class="hljs-number">0x9abce4be</span>, <span class="hljs-number">0xe4bbb8e4</span>, <span class="hljs-number">0xbbe589b9</span>, <span class="hljs-number">0xbeaee8ba</span>, <span class="hljs-number">0xe584a7e8</span>, <span class="hljs-number">0x92e58bbe</span>, <span class="hljs-number">0xbabae48c</span>, <span class="hljs-number">0xe7bbb1e7</span>, <span class="hljs-number">0xbce4bea4</span>, <span class="hljs-number">0x918fe59a</span>,<br>        <span class="hljs-number">0xe895b1e5</span>, <span class="hljs-number">0xbee584a7</span>, <span class="hljs-number">0x849ae78b</span>, <span class="hljs-number">0xe8a4aee8</span>, <span class="hljs-number">0xbcef86af</span>, <span class="hljs-number">0x8585e58c</span>, <span class="hljs-number">0xe58688e5</span>, <span class="hljs-number">0x98e6b0bd</span>, <span class="hljs-number">0x86bae4be</span>, <span class="hljs-number">0xe591a7e7</span>,<br>        <span class="hljs-number">0x90e7a6ad</span>, <span class="hljs-number">0xbaaee886</span>, <span class="hljs-number">0xe5849ae7</span>, <span class="hljs-number">0xa4e5babc</span>, <span class="hljs-number">0x9f94e7a7</span>, <span class="hljs-number">0xe5bd91e5</span>, <span class="hljs-number">0x92e59b8a</span>, <span class="hljs-number">0xb185e58c</span>, <span class="hljs-number">0xe5a7bae4</span>, <span class="hljs-number">0xbae49a85</span>,<br>        <span class="hljs-number">0x849ae7ba</span>, <span class="hljs-number">0xe99b88e5</span>, <span class="hljs-number">0x8ae5a080</span>, <span class="hljs-number">0x8cbcef9b</span>, <span class="hljs-number">0xe5af98e6</span>, <span class="hljs-number">0xbbe493bd</span>, <span class="hljs-number">0x809ce6a3</span>, <span class="hljs-number">0xe5b08ee7</span>, <span class="hljs-number">0x9ce69eae</span>, <span class="hljs-number">0x9cb2e980</span>,<br>        <span class="hljs-number">0xe7bbb4e6</span>, <span class="hljs-number">0xa9e9849a</span>, <span class="hljs-number">0x8b85e5ac</span>, <span class="hljs-number">0xe49d80e6</span>, <span class="hljs-number">0xb9e4bbb8</span>, <span class="hljs-number">0x8280e389</span>, <span class="hljs-number">0x0a0d0a0d</span>, <span class="hljs-number">0x23232323</span>, <span class="hljs-number">0x202e3220</span>, <span class="hljs-number">0xe79eaee5</span>,<br>        <span class="hljs-number">0xb8e4b08e</span>, <span class="hljs-number">0x8e8de5ad</span>, <span class="hljs-number">0xe691b0e6</span>, <span class="hljs-number">0xbce48f97</span>, <span class="hljs-number">0xa7a4e59f</span>, <span class="hljs-number">0xe58da4e5</span>, <span class="hljs-number">0x9ae7b485</span>, <span class="hljs-number">0x8ca1e884</span>, <span class="hljs-number">0xe6a88ae5</span>, <span class="hljs-number">0x8de5878c</span>,<br>        <span class="hljs-number">0x0d0a0d97</span>, <span class="hljs-number">0xe4202d0a</span>, <span class="hljs-number">0x96e6bab8</span>, <span class="hljs-number">0xb697e6b0</span>, <span class="hljs-number">0xe5a3bbe4</span>, <span class="hljs-number">0x8ce69a9d</span>, <span class="hljs-number">0x8c92e581</span>, <span class="hljs-number">0xe5918fe5</span>, <span class="hljs-number">0xb8e495b1</span>, <span class="hljs-number">0xbd9be5ad</span>,<br>        <span class="hljs-number">0xe8b989e7</span>, <span class="hljs-number">0xa4e7b289</span>, <span class="hljs-number">0x9abce4be</span>, <span class="hljs-number">0xe4bbb8e4</span>, <span class="hljs-number">0x8fe689b9</span>, <span class="hljs-number">0x9bbee490</span>, <span class="hljs-number">0xe686bae4</span>, <span class="hljs-number">0x9ce6b9a0</span>, <span class="hljs-number">0x878ce6ac</span>, <span class="hljs-number">0xef95bce5</span>,<br>        <span class="hljs-number">0x0a0d9bbc</span>, <span class="hljs-number">0xb8e4202d</span>, <span class="hljs-number">0xb096e6ba</span>, <span class="hljs-number">0xe4b697e6</span>, <span class="hljs-number">0xb2e6a3bb</span>, <span class="hljs-number">0xbd9be5bb</span>, <span class="hljs-number">0xe68690e7</span>, <span class="hljs-number">0x8fe6bf94</span>, <span class="hljs-number">0x9bbee490</span>, <span class="hljs-number">0xe586bae4</span>,<br>        <span class="hljs-number">0x9ce6ba9f</span>, <span class="hljs-number">0xb581e9ac</span>, <span class="hljs-number">0xefaabee5</span>, <span class="hljs-number">0x0a0d9bbc</span>, <span class="hljs-number">0xb8e4202d</span>, <span class="hljs-number">0xa885e5ba</span>, <span class="hljs-number">0xe4a29de9</span>, <span class="hljs-number">0xb8e48ebb</span>, <span class="hljs-number">0xbbb2e6a5</span>, <span class="hljs-number">0xe39a85e5</span>,<br>        <span class="hljs-number">0x8ae68180</span>, <span class="hljs-number">0x9a85e58a</span>, <span class="hljs-number">0xe8babbe5</span>, <span class="hljs-number">0x88e6beae</span>, <span class="hljs-number">0xbab8e490</span>, <span class="hljs-number">0xe5adb8e4</span>, <span class="hljs-number">0x89e7bd9b</span>, <span class="hljs-number">0xb289e8b9</span>, <span class="hljs-number">0xe4bea4e7</span>, <span class="hljs-number">0xb8e49abc</span>,<br>        <span class="hljs-number">0x89b9e4bb</span>, <span class="hljs-number">0xe48bbae4</span>, <span class="hljs-number">0x9ae79ab8</span>, <span class="hljs-number">0x9a9de584</span>, <span class="hljs-number">0xe9babce5</span>, <span class="hljs-number">0xafe586a2</span>, <span class="hljs-number">0xb8a0e6bc</span>, <span class="hljs-number">0xe683bfe5</span>, <span class="hljs-number">0xbee4908f</span>, <span class="hljs-number">0x86bae49b</span>,<br>        <span class="hljs-number">0xe5babce5</span>, <span class="hljs-number">0x80e6a7a4</span>, <span class="hljs-number">0xb383e69d</span>, <span class="hljs-number">0xe5a6ade6</span>, <span class="hljs-number">0x80e3a899</span>, <span class="hljs-number">0x0d0a0d82</span>, <span class="hljs-number">0x2323230a</span>, <span class="hljs-number">0x2e332023</span>, <span class="hljs-number">0xbabbe520</span>, <span class="hljs-number">0xe7beaee8</span>,<br>        <span class="hljs-number">0xa5e58ebe</span>, <span class="hljs-number">0x96b8e4bd</span>, <span class="hljs-number">0xe78c95e7</span>, <span class="hljs-number">0xb8e4849a</span>, <span class="hljs-number">0xbd9be5ad</span>, <span class="hljs-number">0xe6ba99e6</span>, <span class="hljs-number">0x92e5a785</span>, <span class="hljs-number">0xadb8e48c</span>, <span class="hljs-number">0xe6bd9be5</span>, <span class="hljs-number">0xa1e6b996</span>,<br>        <span class="hljs-number">0x0d0a0d88</span>, <span class="hljs-number">0x2023230a</span>, <span class="hljs-number">0xe993b8e4</span>, <span class="hljs-number">0x85e598a2</span>, <span class="hljs-number">0xa6e520ad</span>, <span class="hljs-number">0x95bde482</span>, <span class="hljs-number">0xe9a885e5</span>, <span class="hljs-number">0x8ee6a29d</span>, <span class="hljs-number">0x9bbfe8a8</span>, <span class="hljs-number">0xe49c80e2</span>,<br>        <span class="hljs-number">0xbde494ba</span>, <span class="hljs-number">0x80b8e48d</span>, <span class="hljs-number">0xe293bde4</span>, <span class="hljs-number">0x80e69d80</span>, <span class="hljs-number">0x93bde4bb</span>, <span class="hljs-number">0xe583b8e5</span>, <span class="hljs-number">0x0a0d80b1</span>, <span class="hljs-number">0x23230a0d</span>, <span class="hljs-number">0x20232323</span>, <span class="hljs-number">0xe494bae4</span>,<br>        <span class="hljs-number">0xb8e48dbd</span>, <span class="hljs-number">0x93bde480</span>, <span class="hljs-number">0x0d9abcef</span>, <span class="hljs-number">0xe70a0d0a</span>, <span class="hljs-number">0xb5e68fbb</span>, <span class="hljs-number">0x8180e38e</span>, <span class="hljs-number">0xe6bf94e6</span>, <span class="hljs-number">0x80e3bbb2</span>, <span class="hljs-number">0x8796e681</span>, <span class="hljs-number">0xe3968ce5</span>,<br>        <span class="hljs-number">0xa4e78180</span>, <span class="hljs-number">0x9abce4be</span>, <span class="hljs-number">0xe78180e3</span>, <span class="hljs-number">0x80e69f94</span>, <span class="hljs-number">0x8796e681</span>, <span class="hljs-number">0xe58e98e6</span>, <span class="hljs-number">0xaee8babb</span>, <span class="hljs-number">0x8280e3be</span>, <span class="hljs-number">0x0a0d0a0d</span>, <span class="hljs-number">0x20232323</span>,<br>        <span class="hljs-number">0xe380b8e4</span>, <span class="hljs-number">0x8fe58180</span>, <span class="hljs-number">0x95b1e591</span>, <span class="hljs-number">0xe4bea4e7</span>, <span class="hljs-number">0xb8e49abc</span>, <span class="hljs-number">0x89b9e4bb</span>, <span class="hljs-number">0xe491b0e6</span>, <span class="hljs-number">0x94e6bbb8</span>, <span class="hljs-number">0xbbb2e6bf</span>, <span class="hljs-number">0x0a0d0a0d</span>,<br>        <span class="hljs-number">0x23232323</span>, <span class="hljs-number">0x202e3120</span>, <span class="hljs-number">0xe69a9de5</span>, <span class="hljs-number">0xb5e8818c</span>, <span class="hljs-number">0xadb8e4b0</span>, <span class="hljs-number">0xe7bd9be5</span>, <span class="hljs-number">0x89e8b989</span>, <span class="hljs-number">0xbea4e7b2</span>, <span class="hljs-number">0xe49abce4</span>, <span class="hljs-number">0xb9e4bbb8</span>,<br>        <span class="hljs-number">0xbf94e689</span>, <span class="hljs-number">0xe5bbb2e6</span>, <span class="hljs-number">0xb1e5918f</span>, <span class="hljs-number">0x9381e995</span>, <span class="hljs-number">0x0dafb7e8</span>, <span class="hljs-number">0x310a0d0a</span>, <span class="hljs-number">0xbfe5202e</span>, <span class="hljs-number">0xbba1e985</span>, <span class="hljs-number">0xe69a9de5</span>, <span class="hljs-number">0x85e5818c</span>,<br>        <span class="hljs-number">0x849ae79a</span>, <span class="hljs-number">0xe586a2e9</span>, <span class="hljs-number">0x80e3bcaf</span>, <span class="hljs-number">0xbabae481</span>, <span class="hljs-number">0xe591b0e6</span>, <span class="hljs-number">0xaee593bd</span>, <span class="hljs-number">0x9cbde4b6</span>, <span class="hljs-number">0xe3bbb8e4</span>, <span class="hljs-number">0xbee48180</span>, <span class="hljs-number">0x95b3e69d</span>,<br>        <span class="hljs-number">0xe5bbb2e6</span>, <span class="hljs-number">0x9ce6bd9b</span>, <span class="hljs-number">0xba9ce689</span>, <span class="hljs-number">0xe49fbbe7</span>, <span class="hljs-number">0xbcef80b8</span>, <span class="hljs-number">0x320a0d9b</span>, <span class="hljs-number">0xbfe5202e</span>, <span class="hljs-number">0xbba1e985</span>, <span class="hljs-number">0xe69a9de5</span>, <span class="hljs-number">0xade6818c</span>,<br>        <span class="hljs-number">0xaea1e7a3</span>, <span class="hljs-number">0xe6849ae7</span>, <span class="hljs-number">0xb2e6bf94</span>, <span class="hljs-number">0xb996e6bb</span>, <span class="hljs-number">0x0d9190e5</span>, <span class="hljs-number">0x202e330a</span>, <span class="hljs-number">0xe985bfe5</span>, <span class="hljs-number">0xa7e7bba1</span>, <span class="hljs-number">0x819ee6af</span>, <span class="hljs-number">0xe5b3a8e7</span>,<br>        <span class="hljs-number">0x8ee6a5a6</span>, <span class="hljs-number">0x9bbfe8a8</span>, <span class="hljs-number">0xe6bf94e6</span>, <span class="hljs-number">0xbde4bbb2</span>, <span class="hljs-number">0xb688e593</span>, <span class="hljs-number">0xe9b994e6</span>, <span class="hljs-number">0x0a0da99d</span>, <span class="hljs-number">0x23230a0d</span>, <span class="hljs-number">0x32202323</span>, <span class="hljs-number">0x81e5202e</span>,<br>        <span class="hljs-number">0xa885e5a5</span>, <span class="hljs-number">0xe6babae4</span>, <span class="hljs-number">0xbde591b0</span>, <span class="hljs-number">0xb6aee593</span>, <span class="hljs-number">0xe49cbde4</span>, <span class="hljs-number">0x88e5bbb8</span>, <span class="hljs-number">0xa6bae5b6</span>, <span class="hljs-number">0xe793bde4</span>, <span class="hljs-number">0x0a0dbbb3</span>, <span class="hljs-number">0x9be50a0d</span>,<br>        <span class="hljs-number">0x93bde4bd</span>, <span class="hljs-number">0xe59abcef</span>, <span class="hljs-number">0xbae4a5b7</span>, <span class="hljs-number">0xb698e9ba</span>, <span class="hljs-number">0xe9a7bae7</span>, <span class="hljs-number">0xafe586a2</span>, <span class="hljs-number">0x849ae7bc</span>, <span class="hljs-number">0xe48cbcef</span>, <span class="hljs-number">0xb7e5a5bb</span>, <span class="hljs-number">0x9c86e5a5</span>,<br>        <span class="hljs-number">0xe79481e8</span>, <span class="hljs-number">0xb8e49f9b</span>, <span class="hljs-number">0xba9fe5ba</span>, <span class="hljs-number">0xe780a1e7</span>, <span class="hljs-number">0xbae4849a</span>, <span class="hljs-number">0x91b0e6ba</span>, <span class="hljs-number">0xe491b0e6</span>, <span class="hljs-number">0xb8e4bbb8</span>, <span class="hljs-number">0xbf94e693</span>, <span class="hljs-number">0xe7849ae7</span>,<br>        <span class="hljs-number">0xbce4bea4</span>, <span class="hljs-number">0xbbb8e49a</span>, <span class="hljs-number">0xe589b9e4</span>, <span class="hljs-number">0xaee5bd9b</span>, <span class="hljs-number">0x9bbcefb6</span>, <span class="hljs-number">0x0a0d0a0d</span>, <span class="hljs-number">0xe6b9a0e6</span>, <span class="hljs-number">0x94e6ac9c</span>, <span class="hljs-number">0xbbb2e6bf</span>, <span class="hljs-number">0xe5b688e5</span>,<br>        <span class="hljs-number">0xbcefa6ba</span>, <span class="hljs-number">0xbabae49a</span>, <span class="hljs-number">0xe491b0e6</span>, <span class="hljs-number">0xa1e8a3bb</span>, <span class="hljs-number">0xa7a4e5a8</span>, <span class="hljs-number">0xe59abce4</span>, <span class="hljs-number">0xbae5b688</span>, <span class="hljs-number">0x0d0a0da6</span>, <span class="hljs-number">0xba9fe50a</span>, <span class="hljs-number">0xe6ac9ce6</span>,<br>        <span class="hljs-number">0xb2e6bf94</span>, <span class="hljs-number">0xb688e5bb</span>, <span class="hljs-number">0xefa6bae5</span>, <span class="hljs-number">0x0a0d9abc</span>, <span class="hljs-number">0x202d0a0d</span>, <span class="hljs-number">0xe5adb8e4</span>, <span class="hljs-number">0x85e5bd9b</span>, <span class="hljs-number">0xa7bae4b1</span>, <span class="hljs-number">0xe99a85e5</span>, <span class="hljs-number">0xafe586a2</span>,<br>        <span class="hljs-number">0x849ae7bc</span>, <span class="hljs-number">0xe59aa4e5</span>, <span class="hljs-number">0x90e59a85</span>, <span class="hljs-number">0x9cbde488</span>, <span class="hljs-number">0xe68c92e5</span>, <span class="hljs-number">0xb2e6bf94</span>, <span class="hljs-number">0x8f8de5bb</span>, <span class="hljs-number">0xe58695e5</span>, <span class="hljs-number">0xbae5b688</span>, <span class="hljs-number">0x2d0a0da6</span>,<br>        <span class="hljs-number">0x91b0e620</span>, <span class="hljs-number">0xe58f97e6</span>, <span class="hljs-number">0x9fe5ba8c</span>, <span class="hljs-number">0xaa87e89f</span>, <span class="hljs-number">0xe5bbb2e6</span>, <span class="hljs-number">0xbae5b688</span>, <span class="hljs-number">0x2d0a0da6</span>, <span class="hljs-number">0xba9fe520</span>, <span class="hljs-number">0xe782b1e5</span>, <span class="hljs-number">0xbce4a4be</span>,<br>        <span class="hljs-number">0xb688e597</span>, <span class="hljs-number">0x0da6bae5</span>, <span class="hljs-number">0xe40a0d0a</span>, <span class="hljs-number">0xb0e6baba</span>, <span class="hljs-number">0x91b0e691</span>, <span class="hljs-number">0xe6bbb8e4</span>, <span class="hljs-number">0xb8e4af98</span>, <span class="hljs-number">0x8da7e780</span>, <span class="hljs-number">0x85e52a2a</span>, <span class="hljs-number">0x87bfe8a8</span>,<br>        <span class="hljs-number">0xe78ba8e7</span>, <span class="hljs-number">0xb0e6849a</span>, <span class="hljs-number">0xbbb8e491</span>, <span class="hljs-number">0x80e32a2a</span>, <span class="hljs-number">0x0d0a0d82</span>, <span class="hljs-number">0x2323230a</span>, <span class="hljs-number">0x8cbae420</span>, <span class="hljs-number">0xe58180e3</span>, <span class="hljs-number">0xaee8babb</span>, <span class="hljs-number">0xbea4e7be</span>,<br>        <span class="hljs-number">0xe49abce4</span>, <span class="hljs-number">0xb9e4bbb8</span>, <span class="hljs-number">0x8796e689</span>, <span class="hljs-number">0xe5968ce5</span>, <span class="hljs-number">0x9be5babc</span>, <span class="hljs-number">0x0d0a0dbd</span>, <span class="hljs-number">0x2323230a</span>, <span class="hljs-number">0x2e312023</span>, <span class="hljs-number">0x9a9de520</span>, <span class="hljs-number">0xe9818ce6</span>,<br>        <span class="hljs-number">0x85e5aca9</span>, <span class="hljs-number">0x9d80e68b</span>, <span class="hljs-number">0xe4bbb8e4</span>, <span class="hljs-number">0x9ce589b9</span>, <span class="hljs-number">0x8f84e6a8</span>, <span class="hljs-number">0xe586afe8</span>, <span class="hljs-number">0x80e6a2bd</span>, <span class="hljs-number">0x86a2e981</span>, <span class="hljs-number">0xe69f9fe5</span>, <span class="hljs-number">0xafe5878c</span>,<br>        <span class="hljs-number">0xb09ce5bc</span>, <span class="hljs-number">0xe78dbde4</span>, <span class="hljs-number">0xa0e6849a</span>, <span class="hljs-number">0xac9ce6b9</span>, <span class="hljs-number">0xe5b688e5</span>, <span class="hljs-number">0x0a0da6ba</span>, <span class="hljs-number">0x87e90a0d</span>, <span class="hljs-number">0x81a6e88d</span>, <span class="hljs-number">0xefa780e6</span>, <span class="hljs-number">0x0a0d9abc</span>,<br>        <span class="hljs-number">0x202d0a0d</span>, <span class="hljs-number">0xe5af98e6</span>, <span class="hljs-number">0x8ce69a9d</span>, <span class="hljs-number">0x8c92e581</span>, <span class="hljs-number">0xe5a08ae5</span>, <span class="hljs-number">0x85e5babc</span>, <span class="hljs-number">0xb9afe59a</span>, <span class="hljs-number">0xe4a3aee5</span>, <span class="hljs-number">0x96e6a0bc</span>, <span class="hljs-number">0x968ce587</span>,<br>        <span class="hljs-number">0xe48bbae4</span>, <span class="hljs-number">0x85e59ab8</span>, <span class="hljs-number">0xa29de9a8</span>, <span class="hljs-number">0xe586a2e9</span>, <span class="hljs-number">0x9ae7bcaf</span>, <span class="hljs-number">0xac9ce684</span>, <span class="hljs-number">0xe8a8b4e8</span>, <span class="hljs-number">0xb1e681a6</span>, <span class="hljs-number">0x2d0a0d82</span>, <span class="hljs-number">0xaf98e620</span>,<br>        <span class="hljs-number">0xe5aa81e6</span>, <span class="hljs-number">0x85e588ae</span>, <span class="hljs-number">0x849ae79a</span>, <span class="hljs-number">0xe8ac9ce6</span>, <span class="hljs-number">0xb1e5a8b4</span>, <span class="hljs-number">0xa780e69e</span>, <span class="hljs-number">0xe58180e3</span>, <span class="hljs-number">0x9be5a9b7</span>, <span class="hljs-number">0x9a85e5ba</span>, <span class="hljs-number">0xe5849ae7</span>,<br>        <span class="hljs-number">0xbbe7a29b</span>, <span class="hljs-number">0x9fbbe793</span>, <span class="hljs-number">0xe780b8e4</span>, <span class="hljs-number">0xbfe5849a</span>, <span class="hljs-number">0xb684e785</span>, <span class="hljs-number">0xe681a6e8</span>, <span class="hljs-number">0x0a0d82b1</span>, <span class="hljs-number">0x98e6202d</span>, <span class="hljs-number">0x9a9de5af</span>, <span class="hljs-number">0xe6818ce6</span>,<br>        <span class="hljs-number">0xa1e7a3ad</span>, <span class="hljs-number">0x918fe5ae</span>, <span class="hljs-number">0xe995b1e5</span>, <span class="hljs-number">0xb7e89381</span>, <span class="hljs-number">0x8180e3af</span>, <span class="hljs-number">0xe79eaee5</span>, <span class="hljs-number">0x9be5b08e</span>, <span class="hljs-number">0xb6aee5bd</span>, <span class="hljs-number">0xe6bf95e9</span>, <span class="hljs-number">0xb9e4bbb2</span>,<br>        <span class="hljs-number">0x89aee585</span>, <span class="hljs-number">0xe5849ae7</span>, <span class="hljs-number">0x84e785bf</span>, <span class="hljs-number">0x81a6e8b6</span>, <span class="hljs-number">0x0d82b1e6</span>, <span class="hljs-number">0xe6202d0a</span>, <span class="hljs-number">0xade7af98</span>, <span class="hljs-number">0xa289e791</span>, <span class="hljs-number">0xe4a885e5</span>, <span class="hljs-number">0xbae493bd</span>,<br>        <span class="hljs-number">0x91b0e6ba</span>, <span class="hljs-number">0xe69d80e6</span>, <span class="hljs-number">0x9fe5b383</span>, <span class="hljs-number">0x80a1e7ba</span>, <span class="hljs-number">0xe58180e3</span>, <span class="hljs-number">0x81e89d87</span>, <span class="hljs-number">0xa29be59a</span>, <span class="hljs-number">0xe593bbe7</span>, <span class="hljs-number">0xbfe88ba5</span>, <span class="hljs-number">0xbabce59b</span>,<br>        <span class="hljs-number">0xe7a7a4e5</span>, <span class="hljs-number">0xa5e7beb2</span>, <span class="hljs-number">0x9b8ae59e</span>, <span class="hljs-number">0xe78f87e9</span>, <span class="hljs-number">0xbfe5849a</span>, <span class="hljs-number">0xb684e785</span>, <span class="hljs-number">0xe681a6e8</span>, <span class="hljs-number">0x0a0d82b1</span>, <span class="hljs-number">0x98e6202d</span>, <span class="hljs-number">0x9dbfe4af</span>,<br>        <span class="hljs-number">0xe681afe8</span>, <span class="hljs-number">0x9be59188</span>, <span class="hljs-number">0x8796e6bd</span>, <span class="hljs-number">0xe5968ce5</span>, <span class="hljs-number">0xaee8babb</span>, <span class="hljs-number">0xa3ade6be</span>, <span class="hljs-number">0xe6aea1e7</span>, <span class="hljs-number">0x90e5b996</span>, <span class="hljs-number">0x8180e391</span>, <span class="hljs-number">0xe5b49be6</span>,<br>        <span class="hljs-number">0x8be6bda5</span>, <span class="hljs-number">0x9fb4e885</span>, <span class="hljs-number">0xe6b7b5e8</span>, <span class="hljs-number">0x97e6b096</span>, <span class="hljs-number">0xa3bbe4b6</span>, <span class="hljs-number">0xe5bfbde4</span>, <span class="hljs-number">0xbbe4bd91</span>, <span class="hljs-number">0xa18ae5bb</span>, <span class="hljs-number">0xe5849ae7</span>, <span class="hljs-number">0x84e785bf</span>,<br>        <span class="hljs-number">0x81a6e8b6</span>, <span class="hljs-number">0x0d82b1e6</span>, <span class="hljs-number">0xe50a0d0a</span>, <span class="hljs-number">0xb3e69a81</span>, <span class="hljs-number">0x9abcef95</span>, <span class="hljs-number">0x0a0d0a0d</span>, <span class="hljs-number">0x8ae6202d</span>, <span class="hljs-number">0xaca9e98a</span>, <span class="hljs-number">0xe68b85e5</span>, <span class="hljs-number">0xb8e49d80</span>,<br>        <span class="hljs-number">0x89b9e4bb</span>, <span class="hljs-number">0xe5878ce6</span>, <span class="hljs-number">0x9ce5bcaf</span>, <span class="hljs-number">0x8dbde4b0</span>, <span class="hljs-number">0xe7afb4e8</span>, <span class="hljs-number">0x88e5bfa9</span>, <span class="hljs-number">0x8796e6b0</span>, <span class="hljs-number">0xe5968ce5</span>, <span class="hljs-number">0xaee8babb</span>, <span class="hljs-number">0x849ae7be</span>,<br>        <span class="hljs-number">0xe48490e5</span>, <span class="hljs-number">0x96e6aab8</span>, <span class="hljs-number">0xa29de9b9</span>, <span class="hljs-number">0x202d0a0d</span>, <span class="hljs-number">0xe69eaee5</span>, <span class="hljs-number">0xa9e9bd96</span>, <span class="hljs-number">0x8b85e5ac</span>, <span class="hljs-number">0xe49d80e6</span>, <span class="hljs-number">0xb9e4bbb8</span>, <span class="hljs-number">0x8690e789</span>,<br>        <span class="hljs-number">0xe7baaee8</span>, <span class="hljs-number">0xa9e794a0</span>, <span class="hljs-number">0x8c92e5b6</span>, <span class="hljs-number">0xe8babbe5</span>, <span class="hljs-number">0xb7e5beae</span>, <span class="hljs-number">0x8ba8e7a5</span>, <span class="hljs-number">0x202d0a0d</span>, <span class="hljs-number">0xe5a08ae5</span>, <span class="hljs-number">0x92e5babc</span>, <span class="hljs-number">0xb994e68c</span>,<br>        <span class="hljs-number">0xe59bbfe8</span>, <span class="hljs-number">0xa0e6a6ad</span>, <span class="hljs-number">0x9d80e6a1</span>, <span class="hljs-number">0xe6b383e6</span>, <span class="hljs-number">0xb2e6bf94</span>, <span class="hljs-number">0x9995e6bb</span>, <span class="hljs-number">0x0db282e8</span>, <span class="hljs-number">0xe8202d0a</span>, <span class="hljs-number">0xaee5bd90</span>, <span class="hljs-number">0x8f84e69e</span>,<br>        <span class="hljs-number">0xe586afe8</span>, <span class="hljs-number">0x80e6a2bd</span>, <span class="hljs-number">0xa5b7e581</span>, <span class="hljs-number">0xe89cbde4</span>, <span class="hljs-number">0xbbe4a3b4</span>, <span class="hljs-number">0xb688e5bb</span>, <span class="hljs-number">0x0a0d0a0d</span>, <span class="hljs-number">0x23232323</span>, <span class="hljs-number">0x202e3220</span>, <span class="hljs-number">0xe8b99fe5</span>,<br>        <span class="hljs-number">0x92e5b282</span>, <span class="hljs-number">0xb5b7e88c</span>, <span class="hljs-number">0xe78ca1e8</span>, <span class="hljs-number">0xbce4bea4</span>, <span class="hljs-number">0xbbb8e49a</span>, <span class="hljs-number">0xe689b9e4</span>, <span class="hljs-number">0xbfe5b8a0</span>, <span class="hljs-number">0xb7bbe483</span>, <span class="hljs-number">0xe8bc80e5</span>, <span class="hljs-number">0x0a0d82a7</span>,<br>        <span class="hljs-number">0x202d0a0d</span>, <span class="hljs-number">0xe4203432</span>, <span class="hljs-number">0xade5aab8</span>, <span class="hljs-number">0x0d0a0d97</span>, <span class="hljs-number">0xe7202d0a</span>, <span class="hljs-number">0xbce4bea4</span>, <span class="hljs-number">0xbbb8e49a</span>, <span class="hljs-number">0xe689b9e4</span>, <span class="hljs-number">0xbfe5b8a0</span>, <span class="hljs-number">0xb7bbe483</span>,<br>        <span class="hljs-number">0xe8bc80e5</span>, <span class="hljs-number">0x242082a7</span>, <span class="hljs-number">0x656c785c</span>, <span class="hljs-number">0x72617466</span>, <span class="hljs-number">0x7b776f72</span>, <span class="hljs-number">0xe7908fe6</span>, <span class="hljs-number">0x247dbc82</span>, <span class="hljs-number">0xbea4e720</span>, <span class="hljs-number">0xe49abce4</span>, <span class="hljs-number">0xb9e4bbb8</span>,<br>        <span class="hljs-number">0xb8a0e689</span>, <span class="hljs-number">0xe483bfe5</span>, <span class="hljs-number">0x80e5b7bb</span>, <span class="hljs-number">0x93bde4bc</span>, <span class="hljs-number">0x0dbbb3e7</span>, <span class="hljs-number">0xe7202d0a</span>, <span class="hljs-number">0xbce4bea4</span>, <span class="hljs-number">0xbbb8e49a</span>, <span class="hljs-number">0xe689b9e4</span>, <span class="hljs-number">0xbfe5b8a0</span>,<br>        <span class="hljs-number">0xb7bbe483</span>, <span class="hljs-number">0xe4bc80e5</span>, <span class="hljs-number">0xb3e793bd</span>, <span class="hljs-number">0x88bcefbb</span>, <span class="hljs-number">0xe99b9be5</span>, <span class="hljs-number">0x88e5a883</span>, <span class="hljs-number">0x89bcef86</span>, <span class="hljs-number">0x0d9abcef</span>, <span class="hljs-number">0x2d20200a</span>, <span class="hljs-number">0xaca9e920</span>,<br>        <span class="hljs-number">0xe68b85e5</span>, <span class="hljs-number">0xb8e49d80</span>, <span class="hljs-number">0x89b9e4bb</span>, <span class="hljs-number">0xe5878ce6</span>, <span class="hljs-number">0x80e6bcaf</span>, <span class="hljs-number">0xb383e69d</span>, <span class="hljs-number">0x20200a0d</span>, <span class="hljs-number">0xb8e4202d</span>, <span class="hljs-number">0xbd9be5ad</span>, <span class="hljs-number">0xe8b989e7</span>,<br>        <span class="hljs-number">0xa4e7b289</span>, <span class="hljs-number">0x9abce4be</span>, <span class="hljs-number">0xe4bbb8e4</span>, <span class="hljs-number">0x85e589b9</span>, <span class="hljs-number">0x8c90e5b1</span>, <span class="hljs-number">0xe68690e7</span>, <span class="hljs-number">0x0a0db383</span>, <span class="hljs-number">0x202d2020</span>, <span class="hljs-number">0xe7a5bbe4</span>, <span class="hljs-number">0x9be5b188</span>,<br>        <span class="hljs-number">0xbbb8e4bd</span>, <span class="hljs-number">0xe489b9e4</span>, <span class="hljs-number">0xa0e6bab8</span>, <span class="hljs-number">0x83bfe5b8</span>, <span class="hljs-number">0xe6849ae7</span>, <span class="hljs-number">0x97e691b0</span>, <span class="hljs-number">0xbeb2e78f</span>, <span class="hljs-number">0xe59ea5e7</span>, <span class="hljs-number">0xbbe48c92</span>, <span class="hljs-number">0xb994e6a5</span>,<br>        <span class="hljs-number">0xe5a99de9</span>, <span class="hljs-number">0x96e69b88</span>, <span class="hljs-number">0xbab8e4b0</span>, <span class="hljs-number">0xe5b8a0e6</span>, <span class="hljs-number">0x9ae783bf</span>, <span class="hljs-number">0xb697e684</span>, <span class="hljs-number">0xe7a3bbe4</span>, <span class="hljs-number">0xa5e7beb2</span>, <span class="hljs-number">0x200a0d9e</span>, <span class="hljs-number">0xe7202d20</span>,<br>        <span class="hljs-number">0xbce4bea4</span>, <span class="hljs-number">0xbbb8e49a</span>, <span class="hljs-number">0xe889b9e4</span>, <span class="hljs-number">0xbee8a38d</span>, <span class="hljs-number">0x82a7e8b1</span>, <span class="hljs-number">0x0d0a0d20</span>, <span class="hljs-number">0x2323230a</span>, <span class="hljs-number">0x2e332023</span>, <span class="hljs-number">0x9a9de520</span>, <span class="hljs-number">0xe69aaee5</span>,<br>        <span class="hljs-number">0x8ce58796</span>, <span class="hljs-number">0xaa87e896</span>, <span class="hljs-number">0xefa1bfe4</span>, <span class="hljs-number">0xb9e78cbc</span>, <span class="hljs-number">0xa38de881</span>, <span class="hljs-number">0xe58c92e5</span>, <span class="hljs-number">0xb1e5918f</span>, <span class="hljs-number">0xbea4e795</span>, <span class="hljs-number">0xe49abce4</span>, <span class="hljs-number">0xb9e4bbb8</span>,<br>        <span class="hljs-number">0x8796e689</span>, <span class="hljs-number">0x0d968ce5</span>, <span class="hljs-number">0xe50a0d0a</span>, <span class="hljs-number">0xb3e69a81</span>, <span class="hljs-number">0x9abcef95</span>, <span class="hljs-number">0x0a0d0a0d</span>, <span class="hljs-number">0x9fe5202d</span>, <span class="hljs-number">0xbb85e5b9</span>, <span class="hljs-number">0xe598abe9</span>, <span class="hljs-number">0x9ae7a6ba</span>,<br>        <span class="hljs-number">0x8796e684</span>, <span class="hljs-number">0xe8968ce5</span>, <span class="hljs-number">0xbfe4aa87</span>, <span class="hljs-number">0x2d0a0da1</span>, <span class="hljs-number">0x908fe620</span>, <span class="hljs-number">0xe5878de5</span>, <span class="hljs-number">0x85e5ac85</span>, <span class="hljs-number">0x8796e6b1</span>, <span class="hljs-number">0xe6968ce5</span>, <span class="hljs-number">0x8ae58d9c</span>,<br>        <span class="hljs-number">0xb4b0e6a1</span>, <span class="hljs-number">0x0db3b9e5</span>, <span class="hljs-number">0xe5202d0a</span>, <span class="hljs-number">0x85e5a581</span>, <span class="hljs-number">0xb08ee7a8</span>, <span class="hljs-number">0xe6a3bbe4</span>, <span class="hljs-number">0x8ce58796</span>, <span class="hljs-number">0xa7bae496</span>, <span class="hljs-number">0xe49ab8e4</span>, <span class="hljs-number">0xb3e793bd</span>,<br>        <span class="hljs-number">0x2d0a0dbb</span>, <span class="hljs-number">0x908fe620</span>, <span class="hljs-number">0xe598abe9</span>, <span class="hljs-number">0xaee5bd9b</span>, <span class="hljs-number">0x8796e6b6</span>, <span class="hljs-number">0xe8968ce5</span>, <span class="hljs-number">0xaee5afbd</span>, <span class="hljs-number">0x9b8ae59e</span>, <span class="hljs-number">0x0a0d0a0d</span>, <span class="hljs-number">0xe4202323</span>,<br>        <span class="hljs-number">0xa2e993b8</span>, <span class="hljs-number">0x83b8e498</span>, <span class="hljs-number">0x82a6e520</span>, <span class="hljs-number">0xe595bde4</span>, <span class="hljs-number">0xb0e88f8d</span>, <span class="hljs-number">0xa88ee683</span>, <span class="hljs-number">0xe29bbfe8</span>, <span class="hljs-number">0x9be59c80</span>, <span class="hljs-number">0xaab8e49b</span>, <span class="hljs-number">0xe9a885e5</span>,<br>        <span class="hljs-number">0x80e2a29d</span>, <span class="hljs-number">0x9888e69d</span>, <span class="hljs-number">0xe5a595e7</span>, <span class="hljs-number">0xb1e583b8</span>, <span class="hljs-number">0x0d0a0d80</span>, <span class="hljs-number">0x2323230a</span>, <span class="hljs-number">0xe5202323</span>, <span class="hljs-number">0xb8e49b9b</span>, <span class="hljs-number">0xa885e5aa</span>, <span class="hljs-number">0xe5a29de9</span>,<br>        <span class="hljs-number">0xaee58586</span>, <span class="hljs-number">0x9abcefb9</span>, <span class="hljs-number">0x0a0d0a0d</span>, <span class="hljs-number">0x85e5202d</span>, <span class="hljs-number">0xa29de9a8</span>, <span class="hljs-number">0xe8babbe5</span>, <span class="hljs-number">0xa4e7beae</span>, <span class="hljs-number">0x9abce4be</span>, <span class="hljs-number">0xe4bbb8e4</span>, <span class="hljs-number">0x8ee789b9</span>,<br>        <span class="hljs-number">0xa3bbe4b0</span>, <span class="hljs-number">0xe5968ce5</span>, <span class="hljs-number">0xaee5bd9b</span>, <span class="hljs-number">0x2d0a0db6</span>, <span class="hljs-number">0xa885e520</span>, <span class="hljs-number">0xe6a29de9</span>, <span class="hljs-number">0x8ce5b1b7</span>, <span class="hljs-number">0xb994e696</span>, <span class="hljs-number">0x0da99de9</span>, <span class="hljs-number">0xe5202d0a</span>,<br>        <span class="hljs-number">0x9de9a885</span>, <span class="hljs-number">0x9dbee4a2</span>, <span class="hljs-number">0xe695b3e6</span>, <span class="hljs-number">0x9be5bbb2</span>, <span class="hljs-number">0x2d0a0dbd</span>, <span class="hljs-number">0xa885e520</span>, <span class="hljs-number">0xe4a29de9</span>, <span class="hljs-number">0xb8e48ebb</span>, <span class="hljs-number">0xbbb2e6a5</span>, <span class="hljs-number">0x0d9a85e5</span>,<br>        <span class="hljs-number">0x230a0d0a</span>, <span class="hljs-number">0xe4202323</span>, <span class="hljs-number">0x80e380b8</span>, <span class="hljs-number">0xa885e581</span>, <span class="hljs-number">0xe5a29de9</span>, <span class="hljs-number">0xaee8babb</span>, <span class="hljs-number">0xbea4e7be</span>, <span class="hljs-number">0xe49abce4</span>, <span class="hljs-number">0xb9e4bbb8</span>, <span class="hljs-number">0xb08ee789</span>,<br>        <span class="hljs-number">0xe5a3bbe4</span>, <span class="hljs-number">0x9be5968c</span>, <span class="hljs-number">0xb6aee5bd</span>, <span class="hljs-number">0x0a0d0a0d</span>, <span class="hljs-number">0x23232323</span>, <span class="hljs-number">0x202e3120</span>, <span class="hljs-number">0xe58ebbe4</span>, <span class="hljs-number">0x9de9a885</span>, <span class="hljs-number">0xbabbe5a2</span>, <span class="hljs-number">0xe59088e6</span>,<br>        <span class="hljs-number">0xbae58fb0</span>, <span class="hljs-number">0xbea4e7b7</span>, <span class="hljs-number">0xe59abce4</span>, <span class="hljs-number">0x85e5b088</span>, <span class="hljs-number">0xa29de9a8</span>, <span class="hljs-number">0xe8babbe5</span>, <span class="hljs-number">0xa4e7beae</span>, <span class="hljs-number">0x9abce4be</span>, <span class="hljs-number">0xe4bbb8e4</span>, <span class="hljs-number">0x8ee789b9</span>,<br>        <span class="hljs-number">0xa3bbe4b0</span>, <span class="hljs-number">0xe5968ce5</span>, <span class="hljs-number">0xaee5bd9b</span>, <span class="hljs-number">0x0d0a0db6</span>, <span class="hljs-number">0xa4b8e40a</span>, <span class="hljs-number">0xe7aab8e4</span>, <span class="hljs-number">0xb9e5be99</span>, <span class="hljs-number">0xae9be7b4</span>, <span class="hljs-number">0xef87a0e6</span>, <span class="hljs-number">0x0a0d9abc</span>,<br>        <span class="hljs-number">0x202d0a0d</span>, <span class="hljs-number">0xe5babbe5</span>, <span class="hljs-number">0xb8e49a85</span>, <span class="hljs-number">0xbe99e780</span>, <span class="hljs-number">0xefb4b9e5</span>, <span class="hljs-number">0x85e59abc</span>, <span class="hljs-number">0xa29de9a8</span>, <span class="hljs-number">0xe6babbe5</span>, <span class="hljs-number">0xb0e59088</span>, <span class="hljs-number">0xb7bae58f</span>,<br>        <span class="hljs-number">0xe4bea4e7</span>, <span class="hljs-number">0x0a0d9abc</span>, <span class="hljs-number">0xbbe5202d</span>, <span class="hljs-number">0xbd9be5ba</span>, <span class="hljs-number">0xe780b8e4</span>, <span class="hljs-number">0xb9e5be99</span>, <span class="hljs-number">0x9abcefb4</span>, <span class="hljs-number">0xe6babbe5</span>, <span class="hljs-number">0xafe59088</span>, <span class="hljs-number">0xbabce58c</span>,<br>        <span class="hljs-number">0xe491b0e6</span>, <span class="hljs-number">0x96e6bbb8</span>, <span class="hljs-number">0x8e98e687</span>, <span class="hljs-number">0xe88c92e5</span>, <span class="hljs-number">0x9ae790b0</span>, <span class="hljs-number">0xbea4e784</span>, <span class="hljs-number">0xe49abce4</span>, <span class="hljs-number">0xb9e4bbb8</span>, <span class="hljs-number">0xb08ee789</span>, <span class="hljs-number">0xe5a3bbe4</span>,<br>        <span class="hljs-number">0x9be5968c</span>, <span class="hljs-number">0xb6aee5bd</span>, <span class="hljs-number">0x0a0d0a0d</span>, <span class="hljs-number">0xe9a885e5</span>, <span class="hljs-number">0xb0e5a29d</span>, <span class="hljs-number">0xb7bae58f</span>, <span class="hljs-number">0xe2849ae7</span>, <span class="hljs-number">0x85e59c80</span>, <span class="hljs-number">0xa29de9a8</span>, <span class="hljs-number">0xef9d80e2</span>,<br>        <span class="hljs-number">0x0a0d9abc</span>, <span class="hljs-number">0x202d0a0d</span>, <span class="hljs-number">0xe7b2aee8</span>, <span class="hljs-number">0x85e5b6a9</span>, <span class="hljs-number">0xa29de9a8</span>, <span class="hljs-number">0xe58180e3</span>, <span class="hljs-number">0xb0e88f8d</span>, <span class="hljs-number">0x8180e383</span>, <span class="hljs-number">0xe6af8fe5</span>, <span class="hljs-number">0xbbe7818c</span>,<br>        <span class="hljs-number">0xa780e6ad</span>, <span class="hljs-number">0x202d0a0d</span>, <span class="hljs-number">0xe49c80e2</span>, <span class="hljs-number">0xbde494ba</span>, <span class="hljs-number">0x80b8e48d</span>, <span class="hljs-number">0xe293bde4</span>, <span class="hljs-number">0x85e59d80</span>, <span class="hljs-number">0xa29de9a8</span>, <span class="hljs-number">0xe69bbfe8</span>, <span class="hljs-number">0x0a0da5ad</span>,<br>        <span class="hljs-number">0x83e6202d</span>, <span class="hljs-number">0x8a8fe5a0</span>, <span class="hljs-number">0xe4a885e5</span>, <span class="hljs-number">0xbae493bd</span>, <span class="hljs-number">0x91b0e6ba</span>, <span class="hljs-number">0x202d0a0d</span>, <span class="hljs-number">0xe48e9fe5</span>, <span class="hljs-number">0x8ce5a1b9</span>, <span class="hljs-number">0x9f9fe5ba</span>, <span class="hljs-number">0xe5b185e5</span>,<br>        <span class="hljs-number">0x8fe58c90</span>, <span class="hljs-number">0x95b1e591</span>, <span class="hljs-number">0x0a0d0a0d</span>, <span class="hljs-number">0xe9a885e5</span>, <span class="hljs-number">0xb0e5a29d</span>, <span class="hljs-number">0xb7bae58f</span>, <span class="hljs-number">0xe8809ce6</span>, <span class="hljs-number">0xb7e5b089</span>, <span class="hljs-number">0xbbbbe4a8</span>, <span class="hljs-number">0xefa18ae5</span>,<br>        <span class="hljs-number">0x0a0d9abc</span>, <span class="hljs-number">0x202d0a0d</span>, <span class="hljs-number">0xe8b184e8</span>, <span class="hljs-number">0x94e6abb4</span>, <span class="hljs-number">0x9a9de5bb</span>, <span class="hljs-number">0xe59c83e8</span>, <span class="hljs-number">0xbcefa988</span>, <span class="hljs-number">0x3230329a</span>, <span class="hljs-number">0xb9e52030</span>, <span class="hljs-number">0x95bae5b4</span>,<br>        <span class="hljs-number">0x0a0d0a0d</span>, <span class="hljs-number">0x23232323</span>, <span class="hljs-number">0x202e3220</span>, <span class="hljs-number">0xe5adb8e4</span>, <span class="hljs-number">0xa4e7bd9b</span>, <span class="hljs-number">0x9abce4be</span>, <span class="hljs-number">0xe4bbb8e4</span>, <span class="hljs-number">0x8ee789b9</span>, <span class="hljs-number">0xa3bbe4b0</span>, <span class="hljs-number">0xe5968ce5</span>,<br>        <span class="hljs-number">0xaee5bd9b</span>, <span class="hljs-number">0x849ae7b6</span>, <span class="hljs-number">0xe6ba9fe5</span>, <span class="hljs-number">0x89e7ac9c</span>, <span class="hljs-number">0x81bee5b9</span>, <span class="hljs-number">0x0a0d0a0d</span>, <span class="hljs-number">0x8de52a2a</span>, <span class="hljs-number">0x9db9e481</span>, <span class="hljs-number">0xe48ab1e5</span>, <span class="hljs-number">0xb8e494ba</span>,<br>        <span class="hljs-number">0xa885e5ad</span>, <span class="hljs-number">0x2a9abce4</span>, <span class="hljs-number">0x9098e92a</span>, <span class="hljs-number">0xe68e98e6</span>, <span class="hljs-number">0x9be59188</span>, <span class="hljs-number">0xb08ee7bd</span>, <span class="hljs-number">0xe5a3bbe4</span>, <span class="hljs-number">0x9ae7968c</span>, <span class="hljs-number">0x94bae484</span>, <span class="hljs-number">0xe7aab8e4</span>,<br>        <span class="hljs-number">0xbee5b989</span>, <span class="hljs-number">0x9abcef81</span>, <span class="hljs-number">0x0a0d0a0d</span>, <span class="hljs-number">0xbae4202d</span>, <span class="hljs-number">0xa38fe5ba</span>, <span class="hljs-number">0xe684a7e8</span>, <span class="hljs-number">0xa4e5a1a8</span>, <span class="hljs-number">0x0d0a0da7</span>, <span class="hljs-number">0xe5202d0a</span>, <span class="hljs-number">0xbde4a885</span>,<br>        <span class="hljs-number">0xbabae493</span>, <span class="hljs-number">0xe591b0e6</span>, <span class="hljs-number">0x90e5b185</span>, <span class="hljs-number">0x8cafe58c</span>, <span class="hljs-number">0x0d95a3e8</span>, <span class="hljs-number">0x2d0a0d0a</span>, <span class="hljs-number">0xa989e720</span>, <span class="hljs-number">0xe6a8b4e8</span>, <span class="hljs-number">0x98e68796</span>, <span class="hljs-number">0x8c92e58e</span>,<br>        <span class="hljs-number">0xe7beb2e7</span>, <span class="hljs-number">0x96e69ea5</span>, <span class="hljs-number">0x8e98e687</span>, <span class="hljs-number">0xe5b89be7</span>, <span class="hljs-number">0xb0e88f8d</span>, <span class="hljs-number">0x0d0a0d83</span>, <span class="hljs-number">0xe4202d0a</span>, <span class="hljs-number">0xb8e4baba</span>, <span class="hljs-number">0xaa87e88e</span>, <span class="hljs-number">0xe5b684e7</span>,<br>        <span class="hljs-number">0xb0e88c92</span>, <span class="hljs-number">0xb185e590</span>, <span class="hljs-number">0x0d9f94e7</span>, <span class="hljs-number">0x2d0a0d0a</span>, <span class="hljs-number">0xb0b5e820</span>, <span class="hljs-number">0xe58c92e5</span>, <span class="hljs-number">0x8fe5b3b9</span>, <span class="hljs-number">0x95b1e591</span>, <span class="hljs-number">0xe89381e9</span>, <span class="hljs-number">0x0a0dafb7</span>,<br>        <span class="hljs-number">0x23230a0d</span>, <span class="hljs-number">0xbae42023</span>, <span class="hljs-number">0x8180e38c</span>, <span class="hljs-number">0xe9a885e5</span>, <span class="hljs-number">0xb7e6a29d</span>, <span class="hljs-number">0x968ce5b1</span>, <span class="hljs-number">0xe9b994e6</span>, <span class="hljs-number">0x0a0da99d</span>, <span class="hljs-number">0x23230a0d</span>, <span class="hljs-number">0x31202323</span>,<br>        <span class="hljs-number">0x9de5202e</span>, <span class="hljs-number">0x9aaee59a</span>, <span class="hljs-number">0xe78db8e4</span>, <span class="hljs-number">0x8ee6bba7</span>, <span class="hljs-number">0x9bbfe8a8</span>, <span class="hljs-number">0xe9a885e5</span>, <span class="hljs-number">0xb7e6a29d</span>, <span class="hljs-number">0x968ce5b1</span>, <span class="hljs-number">0xe9b994e6</span>, <span class="hljs-number">0x0a0da99d</span>,<br>        <span class="hljs-number">0xbde40a0d</span>, <span class="hljs-number">0xba87e59c</span>, <span class="hljs-number">0xe5b386e5</span>, <span class="hljs-number">0x9ae79aae</span>, <span class="hljs-number">0x9abce484</span>, <span class="hljs-number">0xefaeaee8</span>, <span class="hljs-number">0x0a0d9abc</span>, <span class="hljs-number">0x202d0a0d</span>, <span class="hljs-number">0xe5818de5</span>, <span class="hljs-number">0xb1e5ab85</span>,<br>        <span class="hljs-number">0x89b8e48a</span>, <span class="hljs-number">0xe5adb8e4</span>, <span class="hljs-number">0xbce4a885</span>, <span class="hljs-number">0x0d0a0d9a</span>, <span class="hljs-number">0xb1b7e60a</span>, <span class="hljs-number">0xe6968ce5</span>, <span class="hljs-number">0x9de9b994</span>, <span class="hljs-number">0x849ae7a9</span>, <span class="hljs-number">0xe7bb80e6</span>, <span class="hljs-number">0xa0e6ae9b</span>,<br>        <span class="hljs-number">0x9abcef87</span>, <span class="hljs-number">0x0a0d0a0d</span>, <span class="hljs-number">0xaee5202d</span>, <span class="hljs-number">0x8496e58c</span>, <span class="hljs-number">0xe58c92e5</span>, <span class="hljs-number">0xb1e5918f</span>, <span class="hljs-number">0xadb8e495</span>, <span class="hljs-number">0xe7bd9be5</span>, <span class="hljs-number">0x89e8b989</span>, <span class="hljs-number">0xbea4e7b2</span>,<br>        <span class="hljs-number">0xe49abce4</span>, <span class="hljs-number">0xb9e4bbb8</span>, <span class="hljs-number">0xb688e589</span>, <span class="hljs-number">0xe3a6bae5</span>, <span class="hljs-number">0x8ee68180</span>, <span class="hljs-number">0x9bbfe8a8</span>, <span class="hljs-number">0xe5bd9be5</span>, <span class="hljs-number">0xb2e6b6ae</span>, <span class="hljs-number">0x8690e7bb</span>, <span class="hljs-number">0xe5bd83e8</span>,<br>        <span class="hljs-number">0x92e59b8a</span>, <span class="hljs-number">0xbbb2e68c</span>, <span class="hljs-number">0xe48690e7</span>, <span class="hljs-number">0xb3e793bd</span>, <span class="hljs-number">0x849ae7bb</span>, <span class="hljs-number">0xe4b08ee7</span>, <span class="hljs-number">0x8ce5a3bb</span>, <span class="hljs-number">0x0d0a0d96</span>, <span class="hljs-number">0x2323230a</span>, <span class="hljs-number">0x2e322023</span>,<br>        <span class="hljs-number">0x9a9de520</span>, <span class="hljs-number">0xe5818ce6</span>, <span class="hljs-number">0x9de9a885</span>, <span class="hljs-number">0xb1b7e6a2</span>, <span class="hljs-number">0xe6968ce5</span>, <span class="hljs-number">0x9de9b994</span>, <span class="hljs-number">0x849ae7a9</span>, <span class="hljs-number">0xe5b996e6</span>, <span class="hljs-number">0x80e39190</span>, <span class="hljs-number">0x8babe781</span>,<br>        <span class="hljs-number">0xe5ba9ce5</span>, <span class="hljs-number">0x8ee58c92</span>, <span class="hljs-number">0x9988e59f</span>, <span class="hljs-number">0x0a0d0a0d</span>, <span class="hljs-number">0x96e6202d</span>, <span class="hljs-number">0x9190e5b9</span>, <span class="hljs-number">0xe59abcef</span>, <span class="hljs-number">0xa1e985bf</span>, <span class="hljs-number">0x9a9de5bb</span>, <span class="hljs-number">0x2a818ce6</span>,<br>        <span class="hljs-number">0x8caee52a</span>, <span class="hljs-number">0xe58496e5</span>, <span class="hljs-number">0x8fe58c92</span>, <span class="hljs-number">0x95b1e591</span>, <span class="hljs-number">0xe5adb8e4</span>, <span class="hljs-number">0x89e7bd9b</span>, <span class="hljs-number">0xb289e8b9</span>, <span class="hljs-number">0xe4bea4e7</span>, <span class="hljs-number">0xb8e49abc</span>, <span class="hljs-number">0x89b9e4bb</span>,<br>        <span class="hljs-number">0xe5b688e5</span>, <span class="hljs-number">0x80e3a6ba</span>, <span class="hljs-number">0xa88ee681</span>, <span class="hljs-number">0xe59bbfe8</span>, <span class="hljs-number">0xaee5bd9b</span>, <span class="hljs-number">0xbbb2e6b6</span>, <span class="hljs-number">0xe88690e7</span>, <span class="hljs-number">0x8ae5bd83</span>, <span class="hljs-number">0x8c92e59b</span>, <span class="hljs-number">0xe7bbb2e6</span>,<br>        <span class="hljs-number">0xbde48690</span>, <span class="hljs-number">0xbbb3e793</span>, <span class="hljs-number">0xe7849ae7</span>, <span class="hljs-number">0xbbe4b08e</span>, <span class="hljs-number">0x968ce5a3</span>, <span class="hljs-number">0x0a0d2a2a</span>, <span class="hljs-number">0xabe7202d</span>, <span class="hljs-number">0xba9ce58b</span>, <span class="hljs-number">0xe59abcef</span>, <span class="hljs-number">0xa1e985bf</span>,<br>        <span class="hljs-number">0x9a9de5bb</span>, <span class="hljs-number">0x2a818ce6</span>, <span class="hljs-number">0x99abe72a</span>, <span class="hljs-number">0xe4b3a8e7</span>, <span class="hljs-number">0xb0e6baba</span>, <span class="hljs-number">0x8babe791</span>, <span class="hljs-number">0x2aba9ce5</span>, <span class="hljs-number">0x8cbcef2a</span>, <span class="hljs-number">0xe69a9de5</span>, <span class="hljs-number">0x2a2a818c</span>,<br>        <span class="hljs-number">0xe4a5bbe4</span>, <span class="hljs-number">0xb0e6baba</span>, <span class="hljs-number">0xbab8e491</span>, <span class="hljs-number">0xe5adb8e4</span>, <span class="hljs-number">0x2a2a83bf</span>, <span class="hljs-number">0x202d0a0d</span>, <span class="hljs-number">0xe59f8ee5</span>, <span class="hljs-number">0xbcef9988</span>, <span class="hljs-number">0x85bfe59a</span>, <span class="hljs-number">0xe5bba1e9</span>,<br>        <span class="hljs-number">0x8ce69a9d</span>, <span class="hljs-number">0xe52a2a81</span>, <span class="hljs-number">0x9ae79a85</span>, <span class="hljs-number">0x869be984</span>, <span class="hljs-number">0xe7adb8e4</span>, <span class="hljs-number">0xb8e49fbb</span>, <span class="hljs-number">0x86a2e980</span>, <span class="hljs-number">0x2abcafe5</span>, <span class="hljs-number">0x0d0a0d2a</span>, <span class="hljs-number">0x2023230a</span>,<br>        <span class="hljs-number">0xe993b8e4</span>, <span class="hljs-number">0x85e598a2</span>, <span class="hljs-number">0xa6e520ab</span>, <span class="hljs-number">0x95bde482</span>, <span class="hljs-number">0xe88690e7</span>, <span class="hljs-number">0xb8e4a3a7</span>, <span class="hljs-number">0xbd9be5ad</span>, <span class="hljs-number">0xe8b989e7</span>, <span class="hljs-number">0xa4e5b289</span>, <span class="hljs-number">0xbd9be5a7</span>,<br>        <span class="hljs-number">0xe496a4e5</span>, <span class="hljs-number">0x0a0da4ba</span>, <span class="hljs-number">0x23230a0d</span>, <span class="hljs-number">0xb8e42023</span>, <span class="hljs-number">0x8180e380</span>, <span class="hljs-number">0xe8a0b9e4</span>, <span class="hljs-number">0xb9e591bf</span>, <span class="hljs-number">0x96a4e5b3</span>, <span class="hljs-number">0xe6a4bae4</span>, <span class="hljs-number">0x83e69d80</span>,<br>        <span class="hljs-number">0x849ae7b3</span>, <span class="hljs-number">0xe5b8a0e6</span>, <span class="hljs-number">0xa6e883bf</span>, <span class="hljs-number">0x89b9e481</span>, <span class="hljs-number">0x0a0d0a0d</span>, <span class="hljs-number">0xe5202e31</span>, <span class="hljs-number">0x86e59a9d</span>, <span class="hljs-number">0xb4bbe7b3</span>, <span class="hljs-number">0xe5a48ae6</span>, <span class="hljs-number">0xb8e49a85</span>,<br>        <span class="hljs-number">0xaea4e5ad</span>, <span class="hljs-number">0xe5839de6</span>, <span class="hljs-number">0xbcef81a8</span>, <span class="hljs-number">0xa08ae58c</span>, <span class="hljs-number">0xe5babce5</span>, <span class="hljs-number">0x2a2a9a85</span>, <span class="hljs-number">0xe5b9afe5</span>, <span class="hljs-number">0xb7e596a4</span>, <span class="hljs-number">0x9cbde4a5</span>, <span class="hljs-number">0x9ae72a2a</span>,<br>        <span class="hljs-number">0x869be984</span>, <span class="hljs-number">0xe7adb8e4</span>, <span class="hljs-number">0xb8e49fbb</span>, <span class="hljs-number">0x86a2e980</span>, <span class="hljs-number">0xefbcafe5</span>, <span class="hljs-number">0xace788bc</span>, <span class="hljs-number">0x8cbae4ac</span>, <span class="hljs-number">0xe7aab8e4</span>, <span class="hljs-number">0x8ae6b4bb</span>, <span class="hljs-number">0x89bcefa4</span>,<br>        <span class="hljs-number">0x0a0d0a0d</span>, <span class="hljs-number">0x3e202020</span>, <span class="hljs-number">0xa4b8e420</span>, <span class="hljs-number">0xe7aab8e4</span>, <span class="hljs-number">0x8ae6b4bb</span>, <span class="hljs-number">0x9abcefa4</span>, <span class="hljs-number">0xe59a9de5</span>, <span class="hljs-number">0xbbe7b386</span>, <span class="hljs-number">0xa48ae6b4</span>, <span class="hljs-number">0xe8a0b9e4</span>,<br>        <span class="hljs-number">0xb9e591bf</span>, <span class="hljs-number">0xbb80e6b3</span>, <span class="hljs-number">0xe8a6b9e4</span>, <span class="hljs-number">0x85e5b0ae</span>, <span class="hljs-number">0xadb8e49a</span>, <span class="hljs-number">0xe7aea4e5</span>, <span class="hljs-number">0xa0e6849a</span>, <span class="hljs-number">0x83bfe5b8</span>, <span class="hljs-number">0xe58180e3</span>, <span class="hljs-number">0x85e5a885</span>,<br>        <span class="hljs-number">0x849ae79a</span>, <span class="hljs-number">0xe5b8a0e6</span>, <span class="hljs-number">0x9ce583bf</span>, <span class="hljs-number">0x8dbde4b0</span>, <span class="hljs-number">0xe58cbcef</span>, <span class="hljs-number">0x86e59a9d</span>, <span class="hljs-number">0xb4bbe7b3</span>, <span class="hljs-number">0xe5a48ae6</span>, <span class="hljs-number">0xb8e49a85</span>, <span class="hljs-number">0xaea4e5ad</span>,<br>        <span class="hljs-number">0xe5839de6</span>, <span class="hljs-number">0x92e581a8</span>, <span class="hljs-number">0x869be98c</span>, <span class="hljs-number">0xe7adb8e4</span>, <span class="hljs-number">0xb8e49fbb</span>, <span class="hljs-number">0x86a2e980</span>, <span class="hljs-number">0xe3bcafe5</span>, <span class="hljs-number">0x0a0d8280</span>, <span class="hljs-number">0x2e320a0d</span>, <span class="hljs-number">0x9a9de520</span>,<br>        <span class="hljs-number">0xe4818ce6</span>, <span class="hljs-number">0xaee5a5bb</span>, <span class="hljs-number">0xb08ee79e</span>, <span class="hljs-number">0xe5adb8e4</span>, <span class="hljs-number">0xb0e68e8d</span>, <span class="hljs-number">0x8f97e691</span>, <span class="hljs-number">0xe59fbce4</span>, <span class="hljs-number">0xa4e5a7a4</span>, <span class="hljs-number">0xb485e58d</span>, <span class="hljs-number">0xe4bab8e4</span>,<br>        <span class="hljs-number">0x91e5bfbd</span>, <span class="hljs-number">0xa88ee6bd</span>, <span class="hljs-number">0xe49bbfe8</span>, <span class="hljs-number">0x9be5adb8</span>, <span class="hljs-number">0xb989e7bd</span>, <span class="hljs-number">0xe5b289e8</span>, <span class="hljs-number">0x9be5a7a4</span>, <span class="hljs-number">0x96a4e5bd</span>, <span class="hljs-number">0x0da4bae4</span>, <span class="hljs-number">0x202e330a</span>,<br>        <span class="hljs-number">0xe69a9de5</span>, <span class="hljs-number">0xbbe4818c</span>, <span class="hljs-number">0xb4bbe7a5</span>, <span class="hljs-number">0xe4a48ae6</span>, <span class="hljs-number">0x95e796b8</span>, <span class="hljs-number">0x8c92e58c</span>, <span class="hljs-number">0xe3b3b9e5</span>, <span class="hljs-number">0xbfe48180</span>, <span class="hljs-number">0x9bbfe883</span>, <span class="hljs-number">0xe5b185e5</span>,<br>        <span class="hljs-number">0x8fe58c90</span>, <span class="hljs-number">0x95b1e591</span>, <span class="hljs-number">0xe5bab8e4</span>, <span class="hljs-number">0x97e697ae</span>, <span class="hljs-number">0xa88ee6a8</span>, <span class="hljs-number">0xe6a88ae5</span>, <span class="hljs-number">0xbbe5849e</span>, <span class="hljs-number">0xbabae4ba</span>, <span class="hljs-number">0xe5bbb1e7</span>, <span class="hljs-number">0xbfe8bd91</span>,<br>        <span class="hljs-number">0xb185e590</span>, <span class="hljs-number">0xe48c90e5</span>, <span class="hljs-number">0x0a0d93bd</span>, <span class="hljs-number">0xe5202e34</span>, <span class="hljs-number">0x8ce69a9d</span>, <span class="hljs-number">0xa5bbe481</span>, <span class="hljs-number">0xe5adb8e4</span>, <span class="hljs-number">0x89e7bd9b</span>, <span class="hljs-number">0xb289e8b9</span>, <span class="hljs-number">0xe4bea4e7</span>,<br>        <span class="hljs-number">0xb8e49abc</span>, <span class="hljs-number">0x89b9e4bb</span>, <span class="hljs-number">0xe6bab8e4</span>, <span class="hljs-number">0x9ce6b9a0</span>, <span class="hljs-number">0x9ea2e5ac</span>, <span class="hljs-number">0xe6babce5</span>, <span class="hljs-number">0x95e79888</span>, <span class="hljs-number">0xaa87e8a5</span>, <span class="hljs-number">0x0da1bfe4</span>, <span class="hljs-number">0x202e350a</span>,<br>        <span class="hljs-number">0xe69a9de5</span>, <span class="hljs-number">0xbbe4818c</span>, <span class="hljs-number">0xb185e5a5</span>, <span class="hljs-number">0xe58695e5</span>, <span class="hljs-number">0xbbe5b185</span>, <span class="hljs-number">0xb185e5ba</span>, <span class="hljs-number">0xe4abbae4</span>, <span class="hljs-number">0x8ee5bab8</span>, <span class="hljs-number">0x9988e59f</span>, <span class="hljs-number">0xe5a88ee6</span>,<br>        <span class="hljs-number">0x80e2a88a</span>, <span class="hljs-number">0x80b8e49c</span>, <span class="hljs-number">0xe4a6b8e5</span>, <span class="hljs-number">0xb7e880b8</span>, <span class="hljs-number">0x9d80e2af</span>, <span class="hljs-number">0xe8babbe5</span>, <span class="hljs-number">0x0a0dbeae</span>, <span class="hljs-number">0xe5202e36</span>, <span class="hljs-number">0x8ce69a9d</span>, <span class="hljs-number">0xa5bbe481</span>,<br>        <span class="hljs-number">0xe792bae4</span>, <span class="hljs-number">0xb0e5b89b</span>, <span class="hljs-number">0x8d87e98a</span>, <span class="hljs-number">0xe58180e3</span>, <span class="hljs-number">0xbde48890</span>, <span class="hljs-number">0xb185e59c</span>, <span class="hljs-number">0xe4a2b5e8</span>, <span class="hljs-number">0x9fe5bab8</span>, <span class="hljs-number">0x80a1e7ba</span>, <span class="hljs-number">0xe5b0b5e8</span>,<br>        <span class="hljs-number">0xb9e58c92</span>, <span class="hljs-number">0x918fe5b3</span>, <span class="hljs-number">0xe995b1e5</span>, <span class="hljs-number">0xb7e89381</span>, <span class="hljs-number">0x370a0daf</span>, <span class="hljs-number">0x9de5202e</span>, <span class="hljs-number">0x818ce69a</span>, <span class="hljs-number">0xe6a5bbe4</span>, <span class="hljs-number">0x8ce5b1b7</span>, <span class="hljs-number">0x96a4e596</span>,<br>        <span class="hljs-number">0xe5a4bae4</span>, <span class="hljs-number">0xb1e583b8</span>, <span class="hljs-number">0xbab8e480</span>, <span class="hljs-number">0xe69dbee4</span>, <span class="hljs-number">0x89e69889</span>, <span class="hljs-number">0xa080e993</span>, <span class="hljs-number">0xe7a885e5</span>, <span class="hljs-number">0xbce48390</span>, <span class="hljs-number">0xb4bce499</span>, <span class="hljs-number">0xe7b385e5</span>,<br>        <span class="hljs-number">0x0a0dbbb3</span>, <span class="hljs-number">0xe5202e38</span>, <span class="hljs-number">0x8ce69a9d</span>, <span class="hljs-number">0xa5bbe481</span>, <span class="hljs-number">0xe5ac85e5</span>, <span class="hljs-number">0xade6b3b9</span>, <span class="hljs-number">0x89b9e4a3</span>, <span class="hljs-number">0xe7bab8e4</span>, <span class="hljs-number">0xbfe58690</span>, <span class="hljs-number">0x95bce5b5</span>,<br>        <span class="hljs-number">0xe586a2e9</span>, <span class="hljs-number">0x90e7a885</span>, <span class="hljs-number">0xbbb2e683</span>, <span class="hljs-number">0xe48690e7</span>, <span class="hljs-number">0xb3e793bd</span>, <span class="hljs-number">0xb994e6bb</span>, <span class="hljs-number">0x0da99de9</span>, <span class="hljs-number">0x202e390a</span>, <span class="hljs-number">0xe69a9de5</span>, <span class="hljs-number">0xbbe4818c</span>,<br>        <span class="hljs-number">0xbd9be5a5</span>, <span class="hljs-number">0xe6b6aee5</span>, <span class="hljs-number">0xbfe5b8a0</span>, <span class="hljs-number">0xa988e583</span>, <span class="hljs-number">0xe48a9be7</span>, <span class="hljs-number">0xbae5bab8</span>, <span class="hljs-number">0xbfbae795</span>, <span class="hljs-number">0xe6b4bbe7</span>, <span class="hljs-number">0x9be5a48a</span>, <span class="hljs-number">0xb6aee5bd</span>,<br>        <span class="hljs-number">0xe6bbb8e4</span>, <span class="hljs-number">0x80e3839d</span>, <span class="hljs-number">0x89aee581</span>, <span class="hljs-number">0xe3a885e5</span>, <span class="hljs-number">0x8fe58180</span>, <span class="hljs-number">0x95b1e591</span>, <span class="hljs-number">0xe7a988e5</span>, <span class="hljs-number">0x0a0d8a9b</span>, <span class="hljs-number">0x23230a0d</span>, <span class="hljs-number">0xbae42023</span>,<br>        <span class="hljs-number">0x8180e38c</span>, <span class="hljs-number">0xe5a88ee6</span>, <span class="hljs-number">0x9ee6a88a</span>, <span class="hljs-number">0xbabbe584</span>, <span class="hljs-number">0xe7babae4</span>, <span class="hljs-number">0x91e5bbb1</span>, <span class="hljs-number">0x90bfe8bd</span>, <span class="hljs-number">0xe5b185e5</span>, <span class="hljs-number">0xbde48c90</span>, <span class="hljs-number">0x0d0a0d93</span>,<br>        <span class="hljs-number">0x2323230a</span>, <span class="hljs-number">0x2e312023</span>, <span class="hljs-number">0xa88ee620</span>, <span class="hljs-number">0xe6a88ae5</span>, <span class="hljs-number">0xbbe5849e</span>, <span class="hljs-number">0xbabae4ba</span>, <span class="hljs-number">0xe5bbb1e7</span>, <span class="hljs-number">0xbfe8bd91</span>, <span class="hljs-number">0xb185e590</span>, <span class="hljs-number">0xe48c90e5</span>,<br>        <span class="hljs-number">0x9ae793bd</span>, <span class="hljs-number">0xb8a0e684</span>, <span class="hljs-number">0x0d83bfe5</span>, <span class="hljs-number">0x230a0d0a</span>, <span class="hljs-number">0x23232323</span>, <span class="hljs-number">0xb8a0e620</span>, <span class="hljs-number">0x0d83bfe5</span>, <span class="hljs-number">0xe50a0d0a</span>, <span class="hljs-number">0xaee8babb</span>, <span class="hljs-number">0xe62a2abe</span>,<br>        <span class="hljs-number">0xb9e4818c</span>, <span class="hljs-number">0x8c92e585</span>, <span class="hljs-number">0xe3b3b9e5</span>, <span class="hljs-number">0x99e68180</span>, <span class="hljs-number">0x8d81e9ae</span>, <span class="hljs-number">0xe589aee5</span>, <span class="hljs-number">0x80e3a885</span>, <span class="hljs-number">0xb185e581</span>, <span class="hljs-number">0xe78c90e5</span>, <span class="hljs-number">0x8de881b9</span>,<br>        <span class="hljs-number">0x8180e3a3</span>, <span class="hljs-number">0xe680bce5</span>, <span class="hljs-number">0x8ce5be94</span>, <span class="hljs-number">0xb9aee585</span>, <span class="hljs-number">0xe68180e3</span>, <span class="hljs-number">0xb4e685b8</span>, <span class="hljs-number">0x8ebee781</span>, <span class="hljs-number">0x2abdb8e4</span>, <span class="hljs-number">0x849ae72a</span>, <span class="hljs-number">0xe796b8e4</span>,<br>        <span class="hljs-number">0x80e38c95</span>, <span class="hljs-number">0x0d0a0d82</span>, <span class="hljs-number">0x2323230a</span>, <span class="hljs-number">0x2e322023</span>, <span class="hljs-number">0x82a6e520</span>, <span class="hljs-number">0xe695bde4</span>, <span class="hljs-number">0x8ae5a88e</span>, <span class="hljs-number">0x849ee6a8</span>, <span class="hljs-number">0xe4babbe5</span>, <span class="hljs-number">0xb1e7baba</span>,<br>        <span class="hljs-number">0xbd91e5bb</span>, <span class="hljs-number">0xe590bfe8</span>, <span class="hljs-number">0x90e5b185</span>, <span class="hljs-number">0x93bde48c</span>, <span class="hljs-number">0x0a0d0a0d</span>, <span class="hljs-number">0x94e6202d</span>, <span class="hljs-number">0xbbb2e6bf</span>, <span class="hljs-number">0xef8ab8e4</span>, <span class="hljs-number">0x9be79abc</span>, <span class="hljs-number">0x92bae4b8</span>,<br>        <span class="hljs-number">0xe98ab0e5</span>, <span class="hljs-number">0x80e38d87</span>, <span class="hljs-number">0xb3b9e581</span>, <span class="hljs-number">0xe589ade7</span>, <span class="hljs-number">0x95e58f8d</span>, <span class="hljs-number">0x8cbcef86</span>, <span class="hljs-number">0xe59291e6</span>, <span class="hljs-number">0x86e583bc</span>, <span class="hljs-number">0x9888e6b7</span>, <span class="hljs-number">0xe79d80e6</span>,<br>        <span class="hljs-number">0x92e5b4bb</span>, <span class="hljs-number">0xbabce58c</span>, <span class="hljs-number">0xe6839de6</span>, <span class="hljs-number">0xb2e6bf94</span>, <span class="hljs-number">0x8cbcefbb</span>, <span class="hljs-number">0xe8b9afe5</span>, <span class="hljs-number">0x80e89daf</span>, <span class="hljs-number">0x8db8e48c</span>, <span class="hljs-number">0xe6b9afe5</span>, <span class="hljs-number">0xbcef978a</span>,<br>        <span class="hljs-number">0x93bbe78c</span>, <span class="hljs-number">0xe8b4bce4</span>, <span class="hljs-number">0xb8e48c80</span>, <span class="hljs-number">0x93bbe78d</span>, <span class="hljs-number">0x0d9f9be7</span>, <span class="hljs-number">0xe5202d0a</span>, <span class="hljs-number">0x85e589ae</span>, <span class="hljs-number">0x8ab8e4a8</span>, <span class="hljs-number">0xe59abcef</span>, <span class="hljs-number">0xafe8b9af</span>,<br>        <span class="hljs-number">0xa3a7e89d</span>, <span class="hljs-number">0xe4b386e5</span>, <span class="hljs-number">0xabe789ba</span>, <span class="hljs-number">0x8180e3af</span>, <span class="hljs-number">0xe58f8de5</span>, <span class="hljs-number">0x8ce58695</span>, <span class="hljs-number">0xa3a7e896</span>, <span class="hljs-number">0xe68688e5</span>, <span class="hljs-number">0x80e3a7ad</span>, <span class="hljs-number">0x9fbbe781</span>,<br>        <span class="hljs-number">0xe5b9ade7</span>, <span class="hljs-number">0xafe594ba</span>, <span class="hljs-number">0x89aee5b9</span>, <span class="hljs-number">0xe5a885e5</span>, <span class="hljs-number">0x83e881a8</span>, <span class="hljs-number">0x8cbcef81</span>, <span class="hljs-number">0xe58d8fe5</span>, <span class="hljs-number">0x81e6b9af</span>, <span class="hljs-number">0x9680e690</span>, <span class="hljs-number">0xe4bbb8e4</span>,<br>        <span class="hljs-number">0x0a0d89b9</span>, <span class="hljs-number">0xbbe7202d</span>, <span class="hljs-number">0x8eb5e68f</span>, <span class="hljs-number">0xef8ab8e4</span>, <span class="hljs-number">0x90e59abc</span>, <span class="hljs-number">0x9f88e88c</span>, <span class="hljs-number">0xe6b185e5</span>, <span class="hljs-number">0xbcef8eb5</span>, <span class="hljs-number">0x83bfe48c</span>, <span class="hljs-number">0xe89bbfe8</span>,<br>        <span class="hljs-number">0x98e6b8b4</span>, <span class="hljs-number">0x958ae693</span>, <span class="hljs-number">0xe884b5e8</span>, <span class="hljs-number">0x94e7aa87</span>, <span class="hljs-number">0x968ce5b1</span>, <span class="hljs-number">0xe5bfbee4</span>, <span class="hljs-number">0x8ce5a988</span>, <span class="hljs-number">0x8cbcef96</span>, <span class="hljs-number">0xe5a88ee6</span>, <span class="hljs-number">0xbbe7a88a</span>,<br>        <span class="hljs-number">0x8eb5e68f</span>, <span class="hljs-number">0xe7a885e5</span>, <span class="hljs-number">0x8ce58390</span>, <span class="hljs-number">0x9d9ce696</span>, <span class="hljs-number">0xe6809de7</span>, <span class="hljs-number">0x8ae5b49b</span>, <span class="hljs-number">0x80bce5a0</span>, <span class="hljs-number">0xe3be94e6</span>, <span class="hljs-number">0x8ce58180</span>, <span class="hljs-number">0xb9aee585</span>,<br>        <span class="hljs-number">0xe68180e3</span>, <span class="hljs-number">0x83e6ae99</span>, <span class="hljs-number">0x8180e3a0</span>, <span class="hljs-number">0xe8b3b9e5</span>, <span class="hljs-number">0x80e3a1a1</span>, <span class="hljs-number">0xb185e581</span>, <span class="hljs-number">0xe7a2b5e8</span>, <span class="hljs-number">0x96e6849a</span>, <span class="hljs-number">0x9190e5b9</span>, <span class="hljs-number">0xe5918fe5</span>,<br>        <span class="hljs-number">0x80e395b1</span>, <span class="hljs-number">0x2d0a0d82</span>, <span class="hljs-number">0x8796e620</span>, <span class="hljs-number">0xe4968ce5</span>, <span class="hljs-number">0xbcef8ab8</span>, <span class="hljs-number">0x8ab0e59a</span>, <span class="hljs-number">0xe48d87e9</span>, <span class="hljs-number">0x95e796b8</span>, <span class="hljs-number">0x8796e68c</span>, <span class="hljs-number">0xe58e98e6</span>,<br>        <span class="hljs-number">0xa0e69aa4</span>, <span class="hljs-number">0xa780e6b7</span>, <span class="hljs-number">0xe48cbcef</span>, <span class="hljs-number">0xbfe883bf</span>, <span class="hljs-number">0xa4bae49b</span>, <span class="hljs-number">0xef81b5e6</span>, <span class="hljs-number">0x8ae58cbc</span>, <span class="hljs-number">0xbabce5a0</span>, <span class="hljs-number">0xe992bae4</span>, <span class="hljs-number">0xbcefb489</span>,<br>        <span class="hljs-number">0x9eaee58c</span>, <span class="hljs-number">0xe5b08ee7</span>, <span class="hljs-number">0xade5b185</span>, <span class="hljs-number">0x8280e398</span>, <span class="hljs-number">0x202d0a0d</span>, <span class="hljs-number">0xe69f94e7</span>, <span class="hljs-number">0xb8e48180</span>, <span class="hljs-number">0x9abcef8a</span>, <span class="hljs-number">0xe69a9de5</span>, <span class="hljs-number">0x8ee7818c</span>,<br>        <span class="hljs-number">0x83a2e5af</span>, <span class="hljs-number">0xe58b8fe5</span>, <span class="hljs-number">0xbcefbda5</span>, <span class="hljs-number">0x8890e58c</span>, <span class="hljs-number">0xe59cbde4</span>, <span class="hljs-number">0xafe594ba</span>, <span class="hljs-number">0x94b0e6b9</span>, <span class="hljs-number">0xe59980e5</span>, <span class="hljs-number">0x8ce5988f</span>, <span class="hljs-number">0x8cbcef96</span>,<br>        <span class="hljs-number">0xe69dbfe4</span>, <span class="hljs-number">0x9ce5a48a</span>, <span class="hljs-number">0x8390e7b0</span>, <span class="hljs-number">0xe5b6aee5</span>, <span class="hljs-number">0x80e3ad9b</span>, <span class="hljs-number">0x0d0a0d82</span>, <span class="hljs-number">0x2023230a</span>, <span class="hljs-number">0xe993b8e4</span>, <span class="hljs-number">0xb9e498a2</span>, <span class="hljs-number">0xb8e4209d</span>,<br>        <span class="hljs-number">0xbd9be5ad</span>, <span class="hljs-number">0xe4b185e5</span>, <span class="hljs-number">0x85e5a7ba</span>, <span class="hljs-number">0xbab8e49a</span>, <span class="hljs-number">0xe480bbe4</span>, <span class="hljs-number">0x83e888b9</span>, <span class="hljs-number">0x0d0a0dbd</span>, <span class="hljs-number">0x2323230a</span>, <span class="hljs-number">0x80b8e420</span>, <span class="hljs-number">0xe58180e3</span>,<br>        <span class="hljs-number">0x9de9a885</span>, <span class="hljs-number">0x8ebbe4a2</span>, <span class="hljs-number">0xe6a5b8e4</span>, <span class="hljs-number">0x85e5bbb2</span>, <span class="hljs-number">0xb8b0e69a</span>, <span class="hljs-number">0xe59cbfe8</span>, <span class="hljs-number">0xb7e8a89c</span>, <span class="hljs-number">0x8ab8e4af</span>, <span class="hljs-number">0x0a0d0a0d</span>, <span class="hljs-number">0x23232323</span>,<br>        <span class="hljs-number">0x202e3120</span>, <span class="hljs-number">0xe9a885e5</span>, <span class="hljs-number">0xbbe4a29d</span>, <span class="hljs-number">0xa5b8e48e</span>, <span class="hljs-number">0xe5bbb2e6</span>, <span class="hljs-number">0x98e69a85</span>, <span class="hljs-number">0x9fbce4af</span>, <span class="hljs-number">0xe7a7a4e5</span>, <span class="hljs-number">0x87e8849a</span>, <span class="hljs-number">0x9188e6aa</span>,<br>        <span class="hljs-number">0xe5a99de9</span>, <span class="hljs-number">0x0a0dbd91</span>, <span class="hljs-number">0xa0e60a0d</span>, <span class="hljs-number">0x83bfe5b8</span>, <span class="hljs-number">0x2aaf98e6</span>, <span class="hljs-number">0xa08ae52a</span>, <span class="hljs-number">0xe5babce5</span>, <span class="hljs-number">0x9ae79a85</span>, <span class="hljs-number">0x86a2e984</span>, <span class="hljs-number">0x2abcafe5</span>,<br>        <span class="hljs-number">0x8cbcef2a</span>, <span class="hljs-number">0xe7ba9fe5</span>, <span class="hljs-number">0x9ce580a1</span>, <span class="hljs-number">0xe52a2aa8</span>, <span class="hljs-number">0x9de9a885</span>, <span class="hljs-number">0xef2a2aa2</span>, <span class="hljs-number">0x85e58cbc</span>, <span class="hljs-number">0xae94e9b3</span>, <span class="hljs-number">0x2aa89ce5</span>, <span class="hljs-number">0xa5b8e42a</span>,<br>        <span class="hljs-number">0xbcef2a2a</span>, <span class="hljs-number">0x81a6e88c</span>, <span class="hljs-number">0xe5b3aee5</span>, <span class="hljs-number">0x2a2aa89c</span>, <span class="hljs-number">0x2abbb2e6</span>, <span class="hljs-number">0x8280e32a</span>, <span class="hljs-number">0x0a0d0a0d</span>, <span class="hljs-number">0xe59c80e2</span>, <span class="hljs-number">0x9de9a885</span>, <span class="hljs-number">0x9d80e2a2</span>,<br>        <span class="hljs-number">0xe9af98e6</span>, <span class="hljs-number">0x90e5a29d</span>, <span class="hljs-number">0xa885e591</span>, <span class="hljs-number">0xe593bde4</span>, <span class="hljs-number">0x91e59a85</span>, <span class="hljs-number">0x8180e398</span>, <span class="hljs-number">0xe79a85e5</span>, <span class="hljs-number">0xbbe784bb</span>, <span class="hljs-number">0x8cbcef87</span>, <span class="hljs-number">0xe78d87e9</span>,<br>        <span class="hljs-number">0x98e6b982</span>, <span class="hljs-number">0x938ae6af</span>, <span class="hljs-number">0xe28fbde4</span>, <span class="hljs-number">0x85e59c80</span>, <span class="hljs-number">0xae94e9b3</span>, <span class="hljs-number">0xe691b0e5</span>, <span class="hljs-number">0x80e2b095</span>, <span class="hljs-number">0x8280e39d</span>, <span class="hljs-number">0x0a0d0a0d</span>, <span class="hljs-number">0xe49c80e2</span>,<br>        <span class="hljs-number">0x80e2a5b8</span>, <span class="hljs-number">0xaf98e69d</span>, <span class="hljs-number">0xe79f9ce7</span>, <span class="hljs-number">0x9ce7a1ae</span>, <span class="hljs-number">0xa5b8e49f</span>, <span class="hljs-number">0xe68180e3</span>, <span class="hljs-number">0xaee7a295</span>, <span class="hljs-number">0xa295e6a1</span>, <span class="hljs-number">0xe3a5b8e4</span>, <span class="hljs-number">0x95e98180</span>,<br>        <span class="hljs-number">0xa1aee7bf</span>, <span class="hljs-number">0xe4bf95e9</span>, <span class="hljs-number">0x80e3a5b8</span>, <span class="hljs-number">0x0d0a0d82</span>, <span class="hljs-number">0x9c80e20a</span>, <span class="hljs-number">0xe2bbb2e6</span>, <span class="hljs-number">0x98e69d80</span>, <span class="hljs-number">0x8ebbe4af</span>, <span class="hljs-number">0xe49a85e5</span>, <span class="hljs-number">0xa4e5adb8</span>,<br>        <span class="hljs-number">0xb088e5ae</span>, <span class="hljs-number">0xe6b09ce5</span>, <span class="hljs-number">0x90e5b996</span>, <span class="hljs-number">0xa7bae784</span>, <span class="hljs-number">0xe59a85e5</span>, <span class="hljs-number">0x83e994a7</span>, <span class="hljs-number">0x81a6e8bd</span>, <span class="hljs-number">0xe8a982e8</span>, <span class="hljs-number">0xb8e49fb4</span>, <span class="hljs-number">0x93bde4bb</span>,<br>        <span class="hljs-number">0xe4a3b4e8</span>, <span class="hljs-number">0x80e3bbbb</span>, <span class="hljs-number">0x0d0a0d82</span>, <span class="hljs-number">0x2323230a</span>, <span class="hljs-number">0x2e322023</span>, <span class="hljs-number">0x8a8ae620</span>, <span class="hljs-number">0xe9a885e5</span>, <span class="hljs-number">0xbbe4a29d</span>, <span class="hljs-number">0xa5b8e48e</span>, <span class="hljs-number">0xe5bbb2e6</span>,<br>        <span class="hljs-number">0xbce59a85</span>, <span class="hljs-number">0x9190e595</span>, <span class="hljs-number">0xe5b1b7e6</span>, <span class="hljs-number">0x0a0da585</span>, <span class="hljs-number">0x23230a0d</span>, <span class="hljs-number">0x20232323</span>, <span class="hljs-number">0xe69a81e5</span>, <span class="hljs-number">0xbcef95b3</span>, <span class="hljs-number">0x83b8e488</span>, <span class="hljs-number">0xefa19de6</span>,<br>        <span class="hljs-number">0xbcef89bc</span>, <span class="hljs-number">0x0d0a0d9a</span>, <span class="hljs-number">0xe62a2a0a</span>, <span class="hljs-number">0xb2e6bf94</span>, <span class="hljs-number">0xe52a2abb</span>, <span class="hljs-number">0xaee8babb</span>, <span class="hljs-number">0xbab8e4be</span>, <span class="hljs-number">0xe99fbbe7</span>, <span class="hljs-number">0xbcef86a2</span>, <span class="hljs-number">0x938ae68c</span>,<br>        <span class="hljs-number">0x2abda5e5</span>, <span class="hljs-number">0x9d80e62a</span>, <span class="hljs-number">0x2ab383e6</span>, <span class="hljs-number">0xbabbe52a</span>, <span class="hljs-number">0xe3beaee8</span>, <span class="hljs-number">0x2a2a8180</span>, <span class="hljs-number">0xe784bbe7</span>, <span class="hljs-number">0x2a2a87bb</span>, <span class="hljs-number">0xe8babbe5</span>, <span class="hljs-number">0x80e3beae</span>,<br>        <span class="hljs-number">0xe42a2a81</span>, <span class="hljs-number">0xa3e99cbd</span>, <span class="hljs-number">0xe52a2a8e</span>, <span class="hljs-number">0xaee8babb</span>, <span class="hljs-number">0x8180e3be</span>, <span class="hljs-number">0xbae72a2a</span>, <span class="hljs-number">0x8bbee5aa</span>, <span class="hljs-number">0xbbe52a2a</span>, <span class="hljs-number">0xbeaee8ba</span>, <span class="hljs-number">0xe58cbcef</span>,<br>        <span class="hljs-number">0x2a2a86b0</span>, <span class="hljs-number">0xe5b688e5</span>, <span class="hljs-number">0x2a2aa6ba</span>, <span class="hljs-number">0xe8babbe5</span>, <span class="hljs-number">0xb4e8beae</span>, <span class="hljs-number">0xbfa9e7af</span>, <span class="hljs-number">0xe4b685e5</span>, <span class="hljs-number">0xbcefadb8</span>, <span class="hljs-number">0xbabce588</span>, <span class="hljs-number">0xe5968ce5</span>,<br>        <span class="hljs-number">0xbae5b688</span>, <span class="hljs-number">0x849ae7a6</span>, <span class="hljs-number">0xe6b9a0e6</span>, <span class="hljs-number">0xbfe4ac9c</span>, <span class="hljs-number">0x9c9ae99d</span>, <span class="hljs-number">0xe79cbde4</span>, <span class="hljs-number">0xbcefa894</span>, <span class="hljs-number">0x8cbcef89</span>, <span class="hljs-number">0xe5a9b7e5</span>, <span class="hljs-number">0x8fe5ba9b</span>,<br>        <span class="hljs-number">0x95b1e591</span>, <span class="hljs-number">0xe88d8fe5</span>, <span class="hljs-number">0xb4e89085</span>, <span class="hljs-number">0x9796e6a5</span>, <span class="hljs-number">0xe589bae4</span>, <span class="hljs-number">0x80e58b8e</span>, <span class="hljs-number">0xa780e692</span>, <span class="hljs-number">0xe59c83e8</span>, <span class="hljs-number">0x80e3a988</span>, <span class="hljs-number">0x0d0a0d82</span>,<br>        <span class="hljs-number">0x2323230a</span>, <span class="hljs-number">0x8cbae420</span>, <span class="hljs-number">0xe28180e3</span>, <span class="hljs-number">0xbbe49c80</span>, <span class="hljs-number">0xb28fe5a5</span>, <span class="hljs-number">0xe9bab8e4</span>, <span class="hljs-number">0xbcefb489</span>, <span class="hljs-number">0x80bce58c</span>, <span class="hljs-number">0xe69b88e5</span>, <span class="hljs-number">0x9de6aa9c</span>,<br>        <span class="hljs-number">0x9d80e2a5</span>, <span class="hljs-number">0xe6849ae7</span>, <span class="hljs-number">0x9ce6b9a0</span>, <span class="hljs-number">0x81a6e8ac</span>, <span class="hljs-number">0x0d82b1e6</span>, <span class="hljs-number">0x230a0d0a</span>, <span class="hljs-number">0x23232323</span>, <span class="hljs-number">0x9db9e420</span>, <span class="hljs-number">0xe2aab8e4</span>, <span class="hljs-number">0xbfe59c80</span>,<br>        <span class="hljs-number">0xbba1e985</span>, <span class="hljs-number">0x0d9d80e2</span>, <span class="hljs-number">0x310a0d0a</span>, <span class="hljs-number">0xbfe5202e</span>, <span class="hljs-number">0xbba1e985</span>, <span class="hljs-number">0xe69a9de5</span>, <span class="hljs-number">0xb8e4818c</span>, <span class="hljs-number">0xbd9be5ad</span>, <span class="hljs-number">0xe4b185e5</span>, <span class="hljs-number">0x85e5a7ba</span>,<br>        <span class="hljs-number">0x9a9de59a</span>, <span class="hljs-number">0xe9babce5</span>, <span class="hljs-number">0xafe586a2</span>, <span class="hljs-number">0x9bbcefbc</span>, <span class="hljs-number">0x2e320a0d</span>, <span class="hljs-number">0x85bfe520</span>, <span class="hljs-number">0xe5bba1e9</span>, <span class="hljs-number">0xbbe7a29b</span>, <span class="hljs-number">0xa6b8e593</span>, <span class="hljs-number">0xe486a2e9</span>,<br>        <span class="hljs-number">0x9be5adb8</span>, <span class="hljs-number">0xbabae4bd</span>, <span class="hljs-number">0xe491b0e6</span>, <span class="hljs-number">0x96e68db8</span>, <span class="hljs-number">0xbab8e4ad</span>, <span class="hljs-number">0xe58ebee7</span>, <span class="hljs-number">0x94e7bda5</span>, <span class="hljs-number">0xbbb4e69f</span>, <span class="hljs-number">0xe58c80e8</span>, <span class="hljs-number">0x96e68ba5</span>,<br>        <span class="hljs-number">0x9bbcef97</span>, <span class="hljs-number">0x2e330a0d</span>, <span class="hljs-number">0x85bfe520</span>, <span class="hljs-number">0xe7bba1e9</span>, <span class="hljs-number">0xbbe7a7bb</span>, <span class="hljs-number">0xa88ee6ad</span>, <span class="hljs-number">0xe99bbfe8</span>, <span class="hljs-number">0x85e5aca9</span>, <span class="hljs-number">0x9d80e68b</span>, <span class="hljs-number">0xe4bbb8e4</span>,<br>        <span class="hljs-number">0xb8e489b9</span>, <span class="hljs-number">0xbd9be5ad</span>, <span class="hljs-number">0xef968ce5</span>, <span class="hljs-number">0x0a0d9bbc</span>, <span class="hljs-number">0xe5202e34</span>, <span class="hljs-number">0xa1e985bf</span>, <span class="hljs-number">0x9a9de5bb</span>, <span class="hljs-number">0xe5818ce6</span>, <span class="hljs-number">0x8fe58c92</span>, <span class="hljs-number">0x95b1e591</span>,<br>        <span class="hljs-number">0xe5adb8e4</span>, <span class="hljs-number">0x89e7bd9b</span>, <span class="hljs-number">0xb289e8b9</span>, <span class="hljs-number">0xe4bea4e7</span>, <span class="hljs-number">0xb8e49abc</span>, <span class="hljs-number">0x89b9e4bb</span>, <span class="hljs-number">0x0d9bbcef</span>, <span class="hljs-number">0x202e350a</span>, <span class="hljs-number">0xe985bfe5</span>, <span class="hljs-number">0x8ae5bba1</span>,<br>        <span class="hljs-number">0xabbfe5a0</span>, <span class="hljs-number">0xe9bd9be5</span>, <span class="hljs-number">0x92e5b298</span>, <span class="hljs-number">0x9b86e58c</span>, <span class="hljs-number">0xe79f98e9</span>, <span class="hljs-number">0xbbe4b08e</span>, <span class="hljs-number">0x968ce5a3</span>, <span class="hljs-number">0x0d9bbcef</span>, <span class="hljs-number">0x202e360a</span>, <span class="hljs-number">0xe985bfe5</span>,<br>        <span class="hljs-number">0xb8e4bba1</span>, <span class="hljs-number">0xad96e68d</span>, <span class="hljs-number">0xe5a88ee6</span>, <span class="hljs-number">0x9ee6a88a</span>, <span class="hljs-number">0xbabbe584</span>, <span class="hljs-number">0xe7babae4</span>, <span class="hljs-number">0x91e5bbb1</span>, <span class="hljs-number">0x90bfe8bd</span>, <span class="hljs-number">0xe5b185e5</span>, <span class="hljs-number">0xbde48c90</span>,<br>        <span class="hljs-number">0x9bbcef93</span>, <span class="hljs-number">0x2e370a0d</span>, <span class="hljs-number">0x85bfe520</span>, <span class="hljs-number">0xe8bba1e9</span>, <span class="hljs-number">0xa1e89bbf</span>, <span class="hljs-number">0xb785e58c</span>, <span class="hljs-number">0xe8899ce6</span>, <span class="hljs-number">0xa4e5b8ae</span>, <span class="hljs-number">0xb096e69a</span>, <span class="hljs-number">0xe5849ae7</span>,<br>        <span class="hljs-number">0x8fe5868e</span>, <span class="hljs-number">0xb989e7b2</span>, <span class="hljs-number">0xe7b982e7</span>, <span class="hljs-number">0xbce4849a</span>, <span class="hljs-number">0xa7a4e59f</span>, <span class="hljs-number">0xe49796e6</span>, <span class="hljs-number">0xbcef89ba</span>, <span class="hljs-number">0x380a0d9b</span>, <span class="hljs-number">0xbfe5202e</span>, <span class="hljs-number">0xbba1e985</span>,<br>        <span class="hljs-number">0xe5a08ae5</span>, <span class="hljs-number">0xb8e4babc</span>, <span class="hljs-number">0x8e8de5ad</span>, <span class="hljs-number">0xe5bf84e5</span>, <span class="hljs-number">0xa4e5b3a5</span>, <span class="hljs-number">0xa29be5a7</span>, <span class="hljs-number">0xef93bbe7</span>, <span class="hljs-number">0x0a0d9bbc</span>, <span class="hljs-number">0xe5202e39</span>, <span class="hljs-number">0xa1e985bf</span>,<br>        <span class="hljs-number">0x8db8e4bb</span>, <span class="hljs-number">0xe6ad96e6</span>, <span class="hljs-number">0xbfe8a88e</span>, <span class="hljs-number">0x9a85e59b</span>, <span class="hljs-number">0xe5849ae7</span>, <span class="hljs-number">0xaee8babb</span>, <span class="hljs-number">0xb096e6be</span>, <span class="hljs-number">0xe4849ae7</span>, <span class="hljs-number">0xa4e59fbc</span>, <span class="hljs-number">0xa5b7e5a7</span>,<br>        <span class="hljs-number">0xe38ba8e7</span>, <span class="hljs-number">0x0a0d8280</span>, <span class="hljs-number">0x2d2d0a0d</span>, <span class="hljs-number">0x0d0a0d2d</span>, <span class="hljs-number">0x75412a0a</span>, <span class="hljs-number">0x726f6874</span>, <span class="hljs-number">0x32203a20</span>, <span class="hljs-number">0x5f313230</span>, <span class="hljs-number">0x796c6e4f</span>, <span class="hljs-number">0x29524128</span>,<br>        <span class="hljs-number">0x2020202a</span>, <span class="hljs-number">0x0d0a0d20</span>,<br>&#125;;<br> <br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    FILE *out = fopen(<span class="hljs-string">&quot;mao.md&quot;</span>, <span class="hljs-string">&quot;wb&quot;</span>);<br>    fwrite(article, <span class="hljs-number">4</span>, <span class="hljs-number">2832</span>, out);<br>    fclose(out);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>期末复习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>BUAA</tag>
      
      <tag>毛概</tag>
      
      <tag>复习资料</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
